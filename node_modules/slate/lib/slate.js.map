{"version":3,"file":"slate.js","sources":["../src/utils/mixin.js","../src/utils/key-utils.js","../src/constants/model-types.js","../src/models/data.js","../src/models/document.js","../src/models/inline.js","../src/models/mark.js","../src/models/leaf.js","../src/utils/memoize.js","../src/models/text.js","../src/models/node.js","../src/models/block.js","../src/changes/at-current-range.js","../src/utils/text-utils.js","../src/changes/at-range.js","../src/utils/path-utils.js","../src/changes/by-path.js","../src/changes/on-history.js","../src/models/point.js","../src/models/decoration.js","../src/models/range.js","../src/models/selection.js","../src/changes/on-selection.js","../src/models/history.js","../src/models/stack.js","../src/utils/slate-error.js","../src/models/schema.js","../src/models/value.js","../src/changes/on-value.js","../src/changes/index.js","../src/operations/apply.js","../src/operations/invert.js","../src/models/operation.js","../src/models/change.js","../src/interfaces/common.js","../src/interfaces/element.js","../src/interfaces/node.js","../src/interfaces/range.js","../src/operations/index.js","../src/index.js"],"sourcesContent":["/**\n * Mix in an `Interface` to a `Class`.\n *\n * @param {Class} Class\n * @param {Class} Interface\n */\n\nexport default function mixin(Interface, Classes) {\n  for (const Class of Classes) {\n    for (const name of Object.getOwnPropertyNames(Interface)) {\n      if (Class.hasOwnProperty(name)) continue\n      const desc = Object.getOwnPropertyDescriptor(Interface, name)\n      Object.defineProperty(Class, name, desc)\n    }\n\n    for (const name of Object.getOwnPropertyNames(Interface.prototype)) {\n      if (Class.prototype.hasOwnProperty(name)) continue\n      const desc = Object.getOwnPropertyDescriptor(Interface.prototype, name)\n      Object.defineProperty(Class.prototype, name, desc)\n    }\n  }\n}\n","/**\n * An auto-incrementing index for generating keys.\n *\n * @type {Number}\n */\n\nlet n\n\n/**\n * The global key generating function.\n *\n * @type {Function}\n */\n\nlet generate\n\n/**\n * Create a key, using a provided key if available.\n *\n * @param {String|Void} key\n * @return {String}\n */\n\nfunction create(key) {\n  if (key == null) {\n    return generate()\n  }\n\n  if (typeof key === 'string') {\n    return key\n  }\n\n  throw new Error(`Keys must be strings, but you passed: ${key}`)\n}\n\n/**\n * Set a different unique ID generating `function`.\n *\n * @param {Function} func\n */\n\nfunction setGenerator(func) {\n  generate = func\n}\n\n/**\n * Reset the key generating function to its initial state.\n */\n\nfunction resetGenerator() {\n  n = 0\n  generate = () => `${n++}`\n}\n\n/**\n * Set the initial state.\n */\n\nresetGenerator()\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  create,\n  setGenerator,\n  resetGenerator,\n}\n","/**\n * Slate-specific model types.\n *\n * @type {Object}\n */\n\nconst MODEL_TYPES = {\n  BLOCK: '@@__SLATE_BLOCK__@@',\n  CHANGE: '@@__SLATE_CHANGE__@@',\n  DECORATION: '@@__SLATE_DECORATION__@@',\n  DOCUMENT: '@@__SLATE_DOCUMENT__@@',\n  HISTORY: '@@__SLATE_HISTORY__@@',\n  INLINE: '@@__SLATE_INLINE__@@',\n  LEAF: '@@__SLATE_LEAF__@@',\n  MARK: '@@__SLATE_MARK__@@',\n  OPERATION: '@@__SLATE_OPERATION__@@',\n  POINT: '@@__SLATE_POINT__@@',\n  RANGE: '@@__SLATE_RANGE__@@',\n  SCHEMA: '@@__SLATE_SCHEMA__@@',\n  SELECTION: '@@__SLATE_SELECTION__@@',\n  STACK: '@@__SLATE_STACK__@@',\n  TEXT: '@@__SLATE_TEXT__@@',\n  VALUE: '@@__SLATE_VALUE__@@',\n}\n\n/**\n * Export type identification function\n *\n * @param {string} type\n * @param {any} any\n * @return {boolean}\n */\n\nexport function isType(type, any) {\n  return !!(any && any[MODEL_TYPES[type]])\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default MODEL_TYPES\n","import isPlainObject from 'is-plain-object'\nimport { Map } from 'immutable'\n\n/**\n * Data.\n *\n * This isn't an immutable record, it's just a thin wrapper around `Map` so that\n * we can allow for more convenient creation.\n *\n * @type {Object}\n */\n\nclass Data {\n  /**\n   * Create a new `Data` with `attrs`.\n   *\n   * @param {Object|Data|Map} attrs\n   * @return {Data} data\n   */\n\n  static create(attrs = {}) {\n    if (Map.isMap(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Data.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Data.create\\` only accepts objects or maps, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Data` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Data}\n   */\n\n  static fromJSON(object) {\n    return new Map(object)\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Data.fromJSON\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Data\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  key: undefined,\n  nodes: new List(),\n}\n\n/**\n * Document.\n *\n * @type {Document}\n */\n\nclass Document extends Record(DEFAULTS) {\n  /**\n   * Create a new `Document` with `attrs`.\n   *\n   * @param {Object|Array|List|Text} attrs\n   * @return {Document}\n   */\n\n  static create(attrs = {}) {\n    if (Document.isDocument(attrs)) {\n      return attrs\n    }\n\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      attrs = { nodes: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Document.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Document.create\\` only accepts objects, arrays, lists or documents, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Document` from a JSON `object`.\n   *\n   * @param {Object|Document} object\n   * @return {Document}\n   */\n\n  static fromJSON(object) {\n    if (Document.isDocument(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [] } = object\n\n    const document = new Document({\n      key,\n      data: new Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return document\n  }\n\n  /**\n   * Check if `any` is a `Document`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isDocument = isType.bind(null, 'DOCUMENT')\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'document'\n  }\n\n  /**\n   * Return a JSON representation of the document.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nDocument.prototype[MODEL_TYPES.DOCUMENT] = true\n\n/**\n * Export.\n *\n * @type {Document}\n */\n\nexport default Document\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  key: undefined,\n  nodes: new List(),\n  type: undefined,\n}\n\n/**\n * Inline.\n *\n * @type {Inline}\n */\n\nclass Inline extends Record(DEFAULTS) {\n  /**\n   * Create a new `Inline` with `attrs`.\n   *\n   * @param {Object|String|Inline} attrs\n   * @return {Inline}\n   */\n\n  static create(attrs = {}) {\n    if (Inline.isInline(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Inline.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Inline.create\\` only accepts objects, strings or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Inlines` from an array.\n   *\n   * @param {Array<Inline|Object>|List<Inline|Object>} elements\n   * @return {List<Inline>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Inline.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Inline.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Inline` from a JSON `object`.\n   *\n   * @param {Object|Inline} object\n   * @return {Inline}\n   */\n\n  static fromJSON(object) {\n    if (Inline.isInline(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [], type } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Inline.fromJS` requires a `type` string.')\n    }\n\n    const inline = new Inline({\n      key,\n      type,\n      data: new Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return inline\n  }\n\n  /**\n   * Check if `any` is a `Inline`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isInline = isType.bind(null, 'INLINE')\n\n  /**\n   * Check if `any` is a list of inlines.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isInlineList(any) {\n    return List.isList(any) && any.every(item => Inline.isInline(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'inline'\n  }\n\n  /**\n   * Return a JSON representation of the inline.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nInline.prototype[MODEL_TYPES.INLINE] = true\n\n/**\n * Export.\n *\n * @type {Inline}\n */\n\nexport default Inline\n","import isPlainObject from 'is-plain-object'\nimport { Map, Record, Set } from 'immutable'\n\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport Data from './data'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  type: undefined,\n}\n\n/**\n * Mark.\n *\n * @type {Mark}\n */\n\nclass Mark extends Record(DEFAULTS) {\n  /**\n   * Create a new `Mark` with `attrs`.\n   *\n   * @param {Object|Mark} attrs\n   * @return {Mark}\n   */\n\n  static create(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Mark.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Mark.create\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a set of marks.\n   *\n   * @param {Array<Object|Mark>} elements\n   * @return {Set<Mark>}\n   */\n\n  static createSet(elements) {\n    if (Set.isSet(elements) || Array.isArray(elements)) {\n      const marks = new Set(elements.map(Mark.create))\n      return marks\n    }\n\n    if (elements == null) {\n      return Set()\n    }\n\n    throw new Error(\n      `\\`Mark.createSet\\` only accepts sets, arrays or null, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable mark properties from `attrs`.\n   *\n   * @param {Object|String|Mark} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return {\n        data: attrs.data,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs == 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      return props\n    }\n\n    throw new Error(\n      `\\`Mark.createProperties\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Mark` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Mark}\n   */\n\n  static fromJSON(object) {\n    const { data = {}, type } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Mark.fromJS` requires a `type` string.')\n    }\n\n    const mark = new Mark({\n      type,\n      data: new Map(data),\n    })\n\n    return mark\n  }\n\n  /**\n   * Check if `any` is a `Mark`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isMark = isType.bind(null, 'MARK')\n\n  /**\n   * Check if `any` is a set of marks.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isMarkSet(any) {\n    return Set.isSet(any) && any.every(item => Mark.isMark(item))\n  }\n\n  /**\n   * Object.\n   */\n\n  get object() {\n    return 'mark'\n  }\n\n  /**\n   * Return a JSON representation of the mark.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n    }\n\n    return object\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nMark.prototype[MODEL_TYPES.MARK] = true\n\n/**\n * Export.\n *\n * @type {Mark}\n */\n\nexport default Mark\n","import isPlainObject from 'is-plain-object'\nimport { List, Record, Set } from 'immutable'\n\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport Mark from './mark'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  marks: Set(),\n  text: '',\n}\n\n/**\n * Leaf.\n *\n * @type {Leaf}\n */\n\nclass Leaf extends Record(DEFAULTS) {\n  /**\n   * Create a new `Leaf` with `attrs`.\n   *\n   * @param {Object|Leaf} attrs\n   * @return {Leaf}\n   */\n\n  static create(attrs = {}) {\n    if (Leaf.isLeaf(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { text: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Leaf.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Leaf.create\\` only accepts objects, strings or leaves, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a valid List of `Leaf` from `leaves`\n   *\n   * @param {List<Leaf>} leaves\n   * @return {List<Leaf>}\n   */\n\n  static createLeaves(leaves) {\n    if (leaves.size <= 1) return leaves\n\n    let invalid = false\n\n    // TODO: we can make this faster with [List] and then flatten\n    const result = List().withMutations(cache => {\n      // Search from the leaves left end to find invalid node;\n      leaves.findLast((leaf, index) => {\n        const firstLeaf = cache.first()\n\n        // If the first leaf of cache exist, check whether the first leaf is connectable with the current leaf\n        if (firstLeaf) {\n          // If marks equals, then the two leaves can be connected\n          if (firstLeaf.marks.equals(leaf.marks)) {\n            invalid = true\n            cache.set(0, firstLeaf.set('text', `${leaf.text}${firstLeaf.text}`))\n            return\n          }\n\n          // If the cached leaf is empty, drop the empty leaf with the upcoming leaf\n          if (firstLeaf.text === '') {\n            invalid = true\n            cache.set(0, leaf)\n            return\n          }\n\n          // If the current leaf is empty, drop the leaf\n          if (leaf.text === '') {\n            invalid = true\n            return\n          }\n        }\n\n        cache.unshift(leaf)\n      })\n    })\n\n    if (!invalid) return leaves\n    return result\n  }\n\n  /**\n   * Split a list of leaves to two lists; if the leaves are valid leaves, the returned leaves are also valid\n   * Corner Cases:\n   *   1. if offset is smaller than 0, then return [List(), leaves]\n   *   2. if offset is bigger than the text length, then return [leaves, List()]\n   *\n   * @param {List<Leaf> leaves\n   * @return {Array<List<Leaf>>}\n   */\n\n  static splitLeaves(leaves, offset) {\n    if (offset < 0) return [List(), leaves]\n\n    if (leaves.size === 0) {\n      return [List(), List()]\n    }\n\n    let endOffset = 0\n    let index = -1\n    let left, right\n\n    leaves.find(leaf => {\n      index++\n      const startOffset = endOffset\n      const { text } = leaf\n      endOffset += text.length\n\n      if (endOffset < offset) return false\n      if (startOffset > offset) return false\n\n      const length = offset - startOffset\n      left = leaf.set('text', text.slice(0, length))\n      right = leaf.set('text', text.slice(length))\n      return true\n    })\n\n    if (!left) return [leaves, List()]\n\n    if (left.text === '') {\n      if (index === 0) {\n        return [List.of(left), leaves]\n      }\n\n      return [leaves.take(index), leaves.skip(index)]\n    }\n\n    if (right.text === '') {\n      if (index === leaves.size - 1) {\n        return [leaves, List.of(right)]\n      }\n\n      return [leaves.take(index + 1), leaves.skip(index + 1)]\n    }\n\n    return [\n      leaves.take(index).push(left),\n      leaves.skip(index + 1).unshift(right),\n    ]\n  }\n\n  /**\n   * Create a `Leaf` list from `attrs`.\n   *\n   * @param {Array<Leaf|Object>|List<Leaf|Object>} attrs\n   * @return {List<Leaf>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Leaf.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Leaf.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Leaf` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Leaf}\n   */\n\n  static fromJSON(object) {\n    const { text = '', marks = [] } = object\n\n    const leaf = new Leaf({\n      text,\n      marks: Set(marks.map(Mark.fromJSON)),\n    })\n\n    return leaf\n  }\n\n  /**\n   * Check if `any` is a `Leaf`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isLeaf = isType.bind(null, 'LEAF')\n\n  /**\n   * Check if `any` is a list of leaves.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isLeafList(any) {\n    return List.isList(any) && any.every(item => Leaf.isLeaf(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'leaf'\n  }\n\n  /**\n   * Update a `mark` at leaf, replace with newMark\n   *\n   * @param {Mark} mark\n   * @param {Mark} newMark\n   * @returns {Leaf}\n   */\n\n  updateMark(mark, newMark) {\n    const { marks } = this\n    if (newMark.equals(mark)) return this\n    if (!marks.has(mark)) return this\n    const newMarks = marks.withMutations(collection => {\n      collection.remove(mark).add(newMark)\n    })\n    return this.set('marks', newMarks)\n  }\n\n  /**\n   * Add a `mark` to the leaf.\n   *\n   * @param {Mark} mark\n   * @returns {Text}\n   */\n\n  addMark(mark) {\n    const { marks } = this\n    return this.set('marks', marks.add(mark))\n  }\n\n  /**\n   * Add a `set` of marks to the leaf.\n   *\n   * @param {Set<Mark>} set\n   * @returns {Text}\n   */\n\n  addMarks(set) {\n    const { marks } = this\n    return this.set('marks', marks.union(set))\n  }\n\n  /**\n   * Remove a `mark` from the leaf.\n   *\n   * @param {Mark} mark\n   * @returns {Text}\n   */\n\n  removeMark(mark) {\n    const { marks } = this\n    return this.set('marks', marks.remove(mark))\n  }\n\n  /**\n   * Return a JSON representation of the leaf.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      text: this.text,\n      marks: this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nLeaf.prototype[MODEL_TYPES.LEAF] = true\n\n/**\n * Export.\n *\n * @type {Leaf}\n */\n\nexport default Leaf\n","/**\n * GLOBAL: True if memoization should is enabled.\n *\n * @type {Boolean}\n */\n\nlet ENABLED = true\n\n/**\n * GLOBAL: Changing this cache key will clear all previous cached results.\n *\n * @type {Number}\n */\n\nlet CACHE_KEY = 0\n\n/**\n * The leaf node of a cache tree. Used to support variable argument length. A\n * unique object, so that native Maps will key it by reference.\n *\n * @type {Object}\n */\n\nconst LEAF = {}\n\n/**\n * A value to represent a memoized undefined value. Allows efficient value\n * retrieval using Map.get only.\n *\n * @type {Object}\n */\n\nconst UNDEFINED = {}\n\n/**\n * Default value for unset keys in native Maps\n *\n * @type {Undefined}\n */\n\nconst UNSET = undefined\n\n/**\n * Memoize all of the `properties` on a `object`.\n *\n * @param {Object} object\n * @param {Array} properties\n * @return {Record}\n */\n\nfunction memoize(object, properties) {\n  for (const property of properties) {\n    const original = object[property]\n\n    if (!original) {\n      throw new Error(`Object does not have a property named \"${property}\".`)\n    }\n\n    object[property] = function(...args) {\n      // If memoization is disabled, call into the original method.\n      if (!ENABLED) return original.apply(this, args)\n\n      // If the cache key is different, previous caches must be cleared.\n      if (CACHE_KEY !== this.__cache_key) {\n        this.__cache_key = CACHE_KEY\n        this.__cache = new Map() // eslint-disable-line no-undef,no-restricted-globals\n        this.__cache_no_args = {}\n      }\n\n      if (!this.__cache) {\n        this.__cache = new Map() // eslint-disable-line no-undef,no-restricted-globals\n      }\n\n      if (!this.__cache_no_args) {\n        this.__cache_no_args = {}\n      }\n\n      const takesArguments = args.length !== 0\n\n      let cachedValue\n      let keys\n\n      if (takesArguments) {\n        keys = [property, ...args]\n        cachedValue = getIn(this.__cache, keys)\n      } else {\n        cachedValue = this.__cache_no_args[property]\n      }\n\n      // If we've got a result already, return it.\n      if (cachedValue !== UNSET) {\n        return cachedValue === UNDEFINED ? undefined : cachedValue\n      }\n\n      // Otherwise calculate what it should be once and cache it.\n      const value = original.apply(this, args)\n      const v = value === undefined ? UNDEFINED : value\n\n      if (takesArguments) {\n        this.__cache = setIn(this.__cache, keys, v)\n      } else {\n        this.__cache_no_args[property] = v\n      }\n\n      return value\n    }\n  }\n}\n\n/**\n * Get a value at a key path in a tree of Map.\n *\n * If not set, returns UNSET.\n * If the set value is undefined, returns UNDEFINED.\n *\n * @param {Map} map\n * @param {Array} keys\n * @return {Any|UNSET|UNDEFINED}\n */\n\nfunction getIn(map, keys) {\n  for (const key of keys) {\n    map = map.get(key)\n    if (map === UNSET) return UNSET\n  }\n\n  return map.get(LEAF)\n}\n\n/**\n * Set a value at a key path in a tree of Map, creating Maps on the go.\n *\n * @param {Map} map\n * @param {Array} keys\n * @param {Any} value\n * @return {Map}\n */\n\nfunction setIn(map, keys, value) {\n  let parent = map\n  let child\n\n  for (const key of keys) {\n    child = parent.get(key)\n\n    // If the path was not created yet...\n    if (child === UNSET) {\n      child = new Map() // eslint-disable-line no-undef,no-restricted-globals\n      parent.set(key, child)\n    }\n\n    parent = child\n  }\n\n  // The whole path has been created, so set the value to the bottom most map.\n  child.set(LEAF, value)\n  return map\n}\n\n/**\n * In DEV mode, clears the previously memoized values, globally.\n *\n * @return {Void}\n */\n\nfunction resetMemoization() {\n  CACHE_KEY++\n\n  if (CACHE_KEY >= Number.MAX_SAFE_INTEGER) {\n    CACHE_KEY = 0\n  }\n}\n\n/**\n * In DEV mode, enable or disable the use of memoize values, globally.\n *\n * @param {Boolean} enabled\n * @return {Void}\n */\n\nfunction useMemoization(enabled) {\n  ENABLED = enabled\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default memoize\nexport { resetMemoization, useMemoization }\n","import isPlainObject from 'is-plain-object'\nimport warning from 'slate-dev-warning'\nimport { List, OrderedSet, Record, Set } from 'immutable'\n\nimport Leaf from './leaf'\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport KeyUtils from '../utils/key-utils'\nimport memoize from '../utils/memoize'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  leaves: List(),\n  key: undefined,\n}\n\n/**\n * Text.\n *\n * @type {Text}\n */\n\nclass Text extends Record(DEFAULTS) {\n  /**\n   * Create a new `Text` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Text} attrs\n   * @return {Text}\n   */\n\n  static create(attrs = '') {\n    if (Text.isText(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { leaves: [{ text: attrs }] }\n    }\n\n    if (isPlainObject(attrs)) {\n      if (attrs.text) {\n        const { text, marks, key } = attrs\n        attrs = { key, leaves: [{ text, marks }] }\n      }\n\n      return Text.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Text.create\\` only accepts objects, arrays, strings or texts, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Texts` from `elements`.\n   *\n   * @param {Array<Text|Object>|List<Text|Object>} elements\n   * @return {List<Text>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Text.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Text.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Text` from a JSON `object`.\n   *\n   * @param {Object|Text} object\n   * @return {Text}\n   */\n\n  static fromJSON(object) {\n    if (Text.isText(object)) {\n      return object\n    }\n\n    const { key = KeyUtils.create() } = object\n    let { leaves } = object\n\n    if (!leaves) {\n      if (object.ranges) {\n        warning(\n          false,\n          'As of slate@0.27.0, the `ranges` property of Slate objects has been renamed to `leaves`.'\n        )\n\n        leaves = object.ranges\n      } else {\n        leaves = List()\n      }\n    }\n\n    if (Array.isArray(leaves)) {\n      leaves = List(leaves.map(x => Leaf.create(x)))\n    } else if (List.isList(leaves)) {\n      leaves = leaves.map(x => Leaf.create(x))\n    } else {\n      throw new Error('leaves must be either Array or Immutable.List')\n    }\n\n    const node = new Text({\n      leaves: Leaf.createLeaves(leaves),\n      key,\n    })\n\n    return node\n  }\n\n  /**\n   * Check if `any` is a `Text`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isText = isType.bind(null, 'TEXT')\n\n  /**\n   * Check if `any` is a list of texts.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isTextList(any) {\n    return List.isList(any) && any.every(item => Text.isText(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'text'\n  }\n\n  /**\n   * Find the 'first' leaf at offset; By 'first' the alorighthm prefers `endOffset === offset` than `startOffset === offset`\n   * Corner Cases:\n   *   1. if offset is negative, return the first leaf;\n   *   2. if offset is larger than text length, the leaf is null, startOffset, endOffset and index is of the last leaf\n   *\n   * @param {number}\n   * @returns {Object}\n   *   @property {number} startOffset\n   *   @property {number} endOffset\n   *   @property {number} index\n   *   @property {Leaf} leaf\n   */\n\n  searchLeafAtOffset(offset) {\n    let endOffset = 0\n    let startOffset = 0\n    let index = -1\n\n    const leaf = this.leaves.find(l => {\n      index++\n      startOffset = endOffset\n      endOffset = startOffset + l.text.length\n      return endOffset >= offset\n    })\n\n    return {\n      leaf,\n      endOffset,\n      index,\n      startOffset,\n    }\n  }\n\n  /**\n   * Add a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  addMark(index, length, mark) {\n    const marks = Set.of(mark)\n    return this.addMarks(index, length, marks)\n  }\n\n  /**\n   * Add a `set` of marks at `index` and `length`.\n   * Corner Cases:\n   *   1. If empty text, and if length === 0 and index === 0, will make sure the text contain an empty leaf with the given mark.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Set<Mark>} set\n   * @return {Text}\n   */\n\n  addMarks(index, length, set) {\n    if (this.text === '' && length === 0 && index === 0) {\n      const { leaves } = this\n      const first = leaves.first()\n\n      if (!first) {\n        return this.set(\n          'leaves',\n          List.of(Leaf.fromJSON({ text: '', marks: set }))\n        )\n      }\n\n      const newFirst = first.addMarks(set)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (this.text === '') return this\n    if (length === 0) return this\n    if (index >= this.text.length) return this\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n    const leaves = before.concat(middle.map(x => x.addMarks(set)), after)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Derive the leaves for a list of `decorations`.\n   *\n   * @param {Array|Void} decorations (optional)\n   * @return {List<Leaf>}\n   */\n\n  getLeaves(decorations = []) {\n    let { leaves } = this\n    if (leaves.size === 0) return List.of(Leaf.create({}))\n    if (!decorations || decorations.length === 0) return leaves\n    if (this.text.length === 0) return leaves\n    const { key } = this\n\n    decorations.forEach(dec => {\n      const { start, end, mark } = dec\n      const hasStart = start.key == key\n      const hasEnd = end.key == key\n\n      if (hasStart && hasEnd) {\n        const index = hasStart ? start.offset : 0\n        const length = hasEnd ? end.offset - index : this.text.length - index\n\n        if (length < 1) return\n        if (index >= this.text.length) return\n\n        if (index !== 0 || length < this.text.length) {\n          const [before, bundle] = Leaf.splitLeaves(leaves, index)\n          const [middle, after] = Leaf.splitLeaves(bundle, length)\n          leaves = before.concat(middle.map(x => x.addMark(mark)), after)\n          return\n        }\n      }\n\n      leaves = leaves.map(x => x.addMark(mark))\n    })\n\n    if (leaves === this.leaves) return leaves\n    return Leaf.createLeaves(leaves)\n  }\n\n  /**\n   * Get all of the active marks on between two offsets\n   * Corner Cases:\n   *   1. if startOffset is equal or bigger than endOffset, then return Set();\n   *   2. If no text is selected between start and end, then return Set()\n   *\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarksBetweenOffsets(startOffset, endOffset) {\n    if (startOffset <= 0 && endOffset >= this.text.length) {\n      return this.getActiveMarks()\n    }\n\n    if (startOffset >= endOffset) return Set()\n    // For empty text in a paragraph, use getActiveMarks;\n    if (this.text === '') return this.getActiveMarks()\n\n    let result = null\n    let leafEnd = 0\n\n    this.leaves.forEach(leaf => {\n      const leafStart = leafEnd\n      leafEnd = leafStart + leaf.text.length\n\n      if (leafEnd <= startOffset) return\n      if (leafStart >= endOffset) return false\n\n      if (!result) {\n        result = leaf.marks\n        return\n      }\n\n      result = result.intersect(leaf.marks)\n      if (result && result.size === 0) return false\n      return false\n    })\n\n    return result || Set()\n  }\n\n  /**\n   * Get all of the active marks on the text\n   *\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarks() {\n    if (this.leaves.size === 0) return Set()\n\n    const result = this.leaves.first().marks\n    if (result.size === 0) return result\n\n    return result.withMutations(x => {\n      this.leaves.forEach(c => {\n        x.intersect(c.marks)\n        if (x.size === 0) return false\n      })\n    })\n  }\n\n  /**\n   * Get all of the marks on between two offsets\n   * Corner Cases:\n   *   1. if startOffset is equal or bigger than endOffset, then return Set();\n   *   2. If no text is selected between start and end, then return Set()\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getMarksBetweenOffsets(startOffset, endOffset) {\n    if (startOffset <= 0 && endOffset >= this.text.length) {\n      return this.getMarks()\n    }\n\n    if (startOffset >= endOffset) return Set()\n    // For empty text in a paragraph, use getActiveMarks;\n    if (this.text === '') return this.getActiveMarks()\n\n    let result = null\n    let leafEnd = 0\n\n    this.leaves.forEach(leaf => {\n      const leafStart = leafEnd\n      leafEnd = leafStart + leaf.text.length\n\n      if (leafEnd <= startOffset) return\n      if (leafStart >= endOffset) return false\n\n      if (!result) {\n        result = leaf.marks\n        return\n      }\n\n      result = result.union(leaf.marks)\n    })\n\n    return result || Set()\n  }\n\n  /**\n   * Get all of the marks on the text.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return new OrderedSet(array)\n  }\n\n  /**\n   * Get all of the marks on the text as an array\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    if (this.leaves.size === 0) return []\n    const first = this.leaves.first().marks\n    if (this.leaves.size === 1) return first.toArray()\n\n    const result = []\n\n    this.leaves.forEach(leaf => {\n      result.push(leaf.marks.toArray())\n    })\n\n    return Array.prototype.concat.apply(first.toArray(), result)\n  }\n\n  /**\n   * Get the marks on the text at `index`.\n   * Corner Cases:\n   *   1. if no text is before the index, and index !== 0, then return Set()\n   *   2. (for insert after split node or mark at range) if index === 0, and text === '', then return the leaf.marks\n   *   3. if index === 0, text !== '', return Set()\n   *\n   *\n   * @param {Number} index\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtIndex(index) {\n    const { leaf } = this.searchLeafAtOffset(index)\n    if (!leaf) return Set()\n    return leaf.marks\n  }\n\n  /**\n   * Insert `text` at `index`.\n   *\n   * @param {Numbder} offset\n   * @param {String} text\n   * @param {Set} marks (optional)\n   * @return {Text}\n   */\n\n  insertText(offset, text, marks) {\n    if (this.text === '') {\n      return this.set('leaves', List.of(Leaf.create({ text, marks })))\n    }\n\n    if (text.length === 0) return this\n    if (!marks) marks = Set()\n\n    const { startOffset, leaf, index } = this.searchLeafAtOffset(offset)\n    const delta = offset - startOffset\n    const beforeText = leaf.text.slice(0, delta)\n    const afterText = leaf.text.slice(delta)\n    const { leaves } = this\n\n    if (leaf.marks.equals(marks)) {\n      return this.set(\n        'leaves',\n        leaves.set(index, leaf.set('text', beforeText + text + afterText))\n      )\n    }\n\n    const nextLeaves = leaves.splice(\n      index,\n      1,\n      leaf.set('text', beforeText),\n      Leaf.create({ text, marks }),\n      leaf.set('text', afterText)\n    )\n\n    return this.setLeaves(nextLeaves)\n  }\n\n  /**\n   * Remove a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  removeMark(index, length, mark) {\n    if (this.text === '' && index === 0 && length === 0) {\n      const first = this.leaves.first()\n      if (!first) return this\n      const newFirst = first.removeMark(mark)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (length <= 0) return this\n    if (index >= this.text.length) return this\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n    const leaves = before.concat(middle.map(x => x.removeMark(mark)), after)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Remove text from the text node at `start` for `length`.\n   *\n   * @param {Number} start\n   * @param {Number} length\n   * @return {Text}\n   */\n\n  removeText(start, length) {\n    if (length <= 0) return this\n    if (start >= this.text.length) return this\n\n    // PERF: For simple backspace, we can operate directly on the leaf\n    if (length === 1) {\n      const { leaf, index, startOffset } = this.searchLeafAtOffset(start + 1)\n      const offset = start - startOffset\n\n      if (leaf) {\n        if (leaf.text.length === 1) {\n          const leaves = this.leaves.remove(index)\n          return this.setLeaves(leaves)\n        }\n\n        const beforeText = leaf.text.slice(0, offset)\n        const afterText = leaf.text.slice(offset + length)\n        const text = beforeText + afterText\n\n        if (text.length > 0) {\n          return this.set(\n            'leaves',\n            this.leaves.set(index, leaf.set('text', text))\n          )\n        }\n      }\n    }\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, start)\n    const after = Leaf.splitLeaves(bundle, length)[1]\n    const leaves = Leaf.createLeaves(before.concat(after))\n\n    if (leaves.size === 1) {\n      const first = leaves.first()\n\n      if (first.text === '') {\n        return this.set(\n          'leaves',\n          List.of(first.set('marks', this.getActiveMarks()))\n        )\n      }\n    }\n\n    return this.set('leaves', leaves)\n  }\n\n  /**\n   * Return a JSON representation of the text.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      leaves: this.getLeaves()\n        .toArray()\n        .map(r => r.toJSON()),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n\n  /**\n   * Update a `mark` at `index` and `length` with `properties`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Text}\n   */\n\n  updateMark(index, length, mark, properties) {\n    const newMark = mark.merge(properties)\n\n    if (this.text === '' && length === 0 && index === 0) {\n      const { leaves } = this\n      const first = leaves.first()\n      if (!first) return this\n      const newFirst = first.updateMark(mark, newMark)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (length <= 0) return this\n    if (index >= this.text.length) return this\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n\n    const leaves = before.concat(\n      middle.map(x => x.updateMark(mark, newMark)),\n      after\n    )\n\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Split this text and return two different texts\n   * @param {Number} position\n   * @returns {Array<Text>}\n   */\n\n  splitText(offset) {\n    const splitted = Leaf.splitLeaves(this.leaves, offset)\n    const one = this.set('leaves', splitted[0])\n    const two = this.set('leaves', splitted[1]).regenerateKey()\n    return [one, two]\n  }\n\n  /**\n   * merge this text and another text at the end\n   * @param {Text} text\n   * @returns {Text}\n   */\n\n  mergeText(text) {\n    const leaves = this.leaves.concat(text.leaves)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Set leaves with normalized `leaves`\n   *\n   * @param {Schema} schema\n   * @returns {Text|Null}\n   */\n\n  setLeaves(leaves) {\n    const result = Leaf.createLeaves(leaves)\n\n    if (result.size === 1) {\n      const first = result.first()\n\n      if (!first.marks || first.marks.size === 0) {\n        if (first.text === '') {\n          return this.set('leaves', List())\n        }\n      }\n    }\n\n    return this.set('leaves', Leaf.createLeaves(leaves))\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nText.prototype[MODEL_TYPES.TEXT] = true\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Text.prototype, ['getActiveMarks', 'getMarks', 'getMarksAsArray'])\n\n/**\n * Export.\n *\n * @type {Text}\n */\n\nexport default Text\n","import isPlainObject from 'is-plain-object'\nimport warning from 'slate-dev-warning'\nimport { List } from 'immutable'\n\nimport Block from './block'\nimport Data from './data'\nimport Document from './document'\nimport Inline from './inline'\nimport Text from './text'\nimport { isType } from '../constants/model-types'\n\n/**\n * A pseudo-model that is used for its static methods only.\n *\n * @type {Node}\n */\n\nclass Node {\n  /**\n   * Create a new `Node` with `attrs`.\n   *\n   * @param {Object|Node} attrs\n   * @return {Node}\n   */\n\n  static create(attrs = {}) {\n    if (Node.isNode(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      let { object } = attrs\n\n      if (!object && attrs.kind) {\n        warning(\n          false,\n          'As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`.'\n        )\n\n        object = attrs.kind\n      }\n\n      switch (object) {\n        case 'block':\n          return Block.create(attrs)\n        case 'document':\n          return Document.create(attrs)\n        case 'inline':\n          return Inline.create(attrs)\n        case 'text':\n          return Text.create(attrs)\n\n        default: {\n          throw new Error('`Node.create` requires a `object` string.')\n        }\n      }\n    }\n\n    throw new Error(\n      `\\`Node.create\\` only accepts objects or nodes but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Nodes` from an array.\n   *\n   * @param {Array<Object|Node>} elements\n   * @return {List<Node>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = List(elements.map(Node.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Node.createList\\` only accepts lists or arrays, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable node properties from `attrs`.\n   *\n   * @param {Object|String|Node} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Block.isBlock(attrs) || Inline.isInline(attrs)) {\n      return {\n        data: attrs.data,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs == 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      return props\n    }\n\n    throw new Error(\n      `\\`Node.createProperties\\` only accepts objects, strings, blocks or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Node` from a JSON `value`.\n   *\n   * @param {Object} value\n   * @return {Node}\n   */\n\n  static fromJSON(value) {\n    let { object } = value\n\n    if (!object && value.kind) {\n      warning(\n        false,\n        'As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`.'\n      )\n\n      object = value.kind\n    }\n\n    switch (object) {\n      case 'block':\n        return Block.fromJSON(value)\n      case 'document':\n        return Document.fromJSON(value)\n      case 'inline':\n        return Inline.fromJSON(value)\n      case 'text':\n        return Text.fromJSON(value)\n\n      default: {\n        throw new Error(\n          `\\`Node.fromJSON\\` requires an \\`object\\` of either 'block', 'document', 'inline' or 'text', but you passed: ${value}`\n        )\n      }\n    }\n  }\n\n  /**\n   * Check if `any` is a `Node`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNode(any) {\n    return !!['BLOCK', 'DOCUMENT', 'INLINE', 'TEXT'].find(type =>\n      isType(type, any)\n    )\n  }\n\n  /**\n   * Check if `any` is a list of nodes.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNodeList(any) {\n    return List.isList(any) && any.every(item => Node.isNode(item))\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Node\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  key: undefined,\n  nodes: new List(),\n  type: undefined,\n}\n\n/**\n * Block.\n *\n * @type {Block}\n */\n\nclass Block extends Record(DEFAULTS) {\n  /**\n   * Create a new `Block` from `attrs`.\n   *\n   * @param {Object|String|Block} attrs\n   * @return {Block}\n   */\n\n  static create(attrs = {}) {\n    if (Block.isBlock(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Block.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Block.create\\` only accepts objects, strings or blocks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Blocks` from `attrs`.\n   *\n   * @param {Array<Block|Object>|List<Block|Object>} attrs\n   * @return {List<Block>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Block.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Block.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Block` from a JSON `object`.\n   *\n   * @param {Object|Block} object\n   * @return {Block}\n   */\n\n  static fromJSON(object) {\n    if (Block.isBlock(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [], type } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Block.fromJSON` requires a `type` string.')\n    }\n\n    const block = new Block({\n      key,\n      type,\n      data: Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return block\n  }\n\n  /**\n   * Check if `any` is a `Block`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isBlock = isType.bind(null, 'BLOCK')\n\n  /**\n   * Check if `any` is a block list.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isBlockList(any) {\n    return List.isList(any) && any.every(item => Block.isBlock(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'block'\n  }\n\n  /**\n   * Return a JSON representation of the block.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nBlock.prototype[MODEL_TYPES.BLOCK] = true\n\n/**\n * Export.\n *\n * @type {Block}\n */\n\nexport default Block\n","import Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Mix in the changes that pass through to their at-range equivalents because\n * they don't have any effect on the selection.\n */\n\nconst PROXY_TRANSFORMS = [\n  'deleteBackward',\n  'deleteCharBackward',\n  'deleteLineBackward',\n  'deleteWordBackward',\n  'deleteForward',\n  'deleteCharForward',\n  'deleteWordForward',\n  'deleteLineForward',\n  'setBlocks',\n  'setInlines',\n  'splitInline',\n  'unwrapBlock',\n  'unwrapInline',\n  'wrapBlock',\n  'wrapInline',\n]\n\nPROXY_TRANSFORMS.forEach(method => {\n  Changes[method] = (change, ...args) => {\n    const { value } = change\n    const { selection } = value\n    const methodAtRange = `${method}AtRange`\n    change[methodAtRange](selection, ...args)\n\n    if (method.match(/Backward$/)) {\n      change.moveToStart()\n    } else if (method.match(/Forward$/)) {\n      change.moveToEnd()\n    }\n  }\n})\n\n/**\n * Add a `mark` to the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.addMark = (change, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    change.addMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.add(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).add(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  }\n}\n\n/**\n * Add a list of `marks` to the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.addMarks = (change, marks) => {\n  marks.forEach(mark => change.addMark(mark))\n}\n\n/**\n * Delete at the current selection.\n *\n * @param {Change} change\n */\n\nChanges.delete = change => {\n  const { value } = change\n  const { selection } = value\n  change.deleteAtRange(selection)\n\n  // Ensure that the selection is collapsed to the start, because in certain\n  // cases when deleting across inline nodes, when splitting the inline node the\n  // end point of the selection will end up after the split point.\n  change.moveToStart()\n}\n\n/**\n * Insert a `block` at the current selection.\n *\n * @param {Change} change\n * @param {String|Object|Block} block\n */\n\nChanges.insertBlock = (change, block) => {\n  block = Block.create(block)\n  const { value } = change\n  const { selection } = value\n  change.insertBlockAtRange(selection, block)\n\n  // If the node was successfully inserted, update the selection.\n  const node = change.value.document.getNode(block.key)\n  if (node) change.moveToEndOfNode(node)\n}\n\n/**\n * Insert a `fragment` at the current selection.\n *\n * @param {Change} change\n * @param {Document} fragment\n */\n\nChanges.insertFragment = (change, fragment) => {\n  if (!fragment.nodes.size) return\n\n  let { value } = change\n  let { document, selection } = value\n  const { start, end } = selection\n  const { startText, endText, startInline } = value\n  const lastText = fragment.getLastText()\n  const lastInline = fragment.getClosestInline(lastText.key)\n  const firstChild = fragment.nodes.first()\n  const lastChild = fragment.nodes.last()\n  const keys = document.getTexts().map(text => text.key)\n  const isAppending =\n    !startInline ||\n    (start.isAtStartOfNode(startText) || end.isAtStartOfNode(startText)) ||\n    (start.isAtEndOfNode(endText) || end.isAtEndOfNode(endText))\n\n  const isInserting =\n    firstChild.hasBlockChildren() || lastChild.hasBlockChildren()\n\n  change.insertFragmentAtRange(selection, fragment)\n  value = change.value\n  document = value.document\n\n  const newTexts = document.getTexts().filter(n => !keys.includes(n.key))\n  const newText = isAppending ? newTexts.last() : newTexts.takeLast(2).first()\n\n  if (newText && (lastInline || isInserting)) {\n    change.select(selection.moveToEndOfNode(newText))\n  } else if (newText) {\n    change.select(\n      selection.moveToStartOfNode(newText).moveForward(lastText.text.length)\n    )\n  } else {\n    change.select(selection.moveToStart().moveForward(lastText.text.length))\n  }\n}\n\n/**\n * Insert an `inline` at the current selection.\n *\n * @param {Change} change\n * @param {String|Object|Inline} inline\n */\n\nChanges.insertInline = (change, inline) => {\n  inline = Inline.create(inline)\n  const { value } = change\n  const { selection } = value\n  change.insertInlineAtRange(selection, inline)\n\n  // If the node was successfully inserted, update the selection.\n  const node = change.value.document.getNode(inline.key)\n  if (node) change.moveToEndOfNode(node)\n}\n\n/**\n * Insert a string of `text` with optional `marks` at the current selection.\n *\n * @param {Change} change\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nChanges.insertText = (change, text, marks) => {\n  const { value } = change\n  const { document, selection } = value\n  marks = marks || selection.marks || document.getInsertMarksAtRange(selection)\n  change.insertTextAtRange(selection, text, marks)\n\n  // If the text was successfully inserted, and the selection had marks on it,\n  // unset the selection's marks.\n  if (selection.marks && document != change.value.document) {\n    change.select({ marks: null })\n  }\n}\n\n/**\n * Remove a `mark` from the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.removeMark = (change, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    change.removeMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.remove(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).remove(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  }\n}\n\n/**\n * Replace an `oldMark` with a `newMark` in the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} oldMark\n * @param {Mark} newMark\n */\n\nChanges.replaceMark = (change, oldMark, newMark) => {\n  change.removeMark(oldMark)\n  change.addMark(newMark)\n}\n\n/**\n * Split the block node at the current selection, to optional `depth`.\n *\n * @param {Change} change\n * @param {Number} depth (optional)\n */\n\nChanges.splitBlock = (change, depth = 1) => {\n  const { value } = change\n  const { selection, document } = value\n  const marks = selection.marks || document.getInsertMarksAtRange(selection)\n  change.splitBlockAtRange(selection, depth).moveToEnd()\n\n  if (marks && marks.size !== 0) {\n    change.select({ marks })\n  }\n}\n\n/**\n * Add or remove a `mark` from the characters in the current selection,\n * depending on whether it's already there.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.toggleMark = (change, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const exists = value.activeMarks.has(mark)\n\n  if (exists) {\n    change.removeMark(mark)\n  } else {\n    change.addMark(mark)\n  }\n}\n\n/**\n * Wrap the current selection with prefix/suffix.\n *\n * @param {Change} change\n * @param {String} prefix\n * @param {String} suffix\n */\n\nChanges.wrapText = (change, prefix, suffix = prefix) => {\n  const { value } = change\n  const { selection } = value\n  change.wrapTextAtRange(selection, prefix, suffix)\n\n  // If the selection was collapsed, it will have moved the start offset too.\n  if (selection.isCollapsed) {\n    change.moveStartBackward(prefix.length)\n  }\n\n  // Adding the suffix will have pushed the end of the selection further on, so\n  // we need to move it back to account for this.\n  change.moveEndBackward(suffix.length)\n\n  // There's a chance that the selection points moved \"through\" each other,\n  // resulting in a now-incorrect selection direction.\n  if (selection.isForward != change.value.selection.isForward) {\n    change.flip()\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import { reverse } from 'esrever'\n\n/**\n * Surrogate pair start and end points.\n *\n * @type {Number}\n */\n\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\n\n/**\n * A regex to match space characters.\n *\n * @type {RegExp}\n */\n\nconst SPACE = /\\s/\n\n/**\n * A regex to match chameleon characters, that count as word characters as long\n * as they are inside of a word.\n *\n * @type {RegExp}\n */\n\nconst CHAMELEON = /['\\u2018\\u2019]/\n\n/**\n * A regex that matches punctuation.\n *\n * @type {RegExp}\n */\n\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n\n/**\n * Is a character `code` in a surrogate character.\n *\n * @param {Number} code\n * @return {Boolean}\n */\n\nfunction isSurrogate(code) {\n  return SURROGATE_START <= code && code <= SURROGATE_END\n}\n\n/**\n * Is a character a word character? Needs the `remaining` characters too.\n *\n * @param {String} char\n * @param {String|Void} remaining\n * @return {Boolean}\n */\n\nfunction isWord(char, remaining) {\n  if (SPACE.test(char)) return false\n\n  // If it's a chameleon character, recurse to see if the next one is or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharLength(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n    if (isWord(next, rest)) return true\n  }\n\n  if (PUNCTUATION.test(char)) return false\n  return true\n}\n\n/**\n * Get the length of a `character`.\n *\n * @param {String} char\n * @return {Number}\n */\n\nfunction getCharLength(char) {\n  return isSurrogate(char.charCodeAt(0)) ? 2 : 1\n}\n\n/**\n * Get the offset to the end of the first character in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getCharOffset(text) {\n  const char = text.charAt(0)\n  return getCharLength(char)\n}\n\n/**\n * Get the offset to the end of the character before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the character after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetForward(text, offset) {\n  text = text.slice(offset)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the first word in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getWordOffset(text) {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharLength(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWord(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Get the offset to the end of the word before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Get the offset to the end of the word after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetForward(text, offset) {\n  text = text.slice(offset)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  getCharLength,\n  getCharOffset,\n  getCharOffsetBackward,\n  getCharOffsetForward,\n  getWordOffset,\n  getWordOffsetBackward,\n  getWordOffsetForward,\n  isSurrogate,\n  isWord,\n}\n","import { List } from 'immutable'\nimport Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport TextUtils from '../utils/text-utils'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Add a new `mark` to the characters at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Mixed} mark\n */\n\nChanges.addMarkAtRange = (change, range, mark) => {\n  if (range.isCollapsed) return\n\n  const { value } = change\n  const { document } = value\n  const { start, end } = range\n  const texts = document.getTextsAtRange(range)\n\n  change.withoutNormalizing(() => {\n    texts.forEach(node => {\n      const { key } = node\n      let index = 0\n      let length = node.text.length\n\n      if (key == start.key) index = start.offset\n      if (key == end.key) length = end.offset\n      if (key == start.key && key == end.key) length = end.offset - start.offset\n\n      change.addMarkByKey(key, index, length, mark)\n    })\n  })\n}\n\n/**\n * Add a list of `marks` to the characters at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Array<Mixed>} mark\n */\n\nChanges.addMarksAtRange = (change, range, marks) => {\n  marks.forEach(mark => change.addMarkAtRange(range, mark))\n}\n\n/**\n * Delete everything in a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteAtRange = (change, range) => {\n  // Snapshot the selection, which creates an extra undo save point, so that\n  // when you undo a delete, the expanded selection will be retained.\n  change.snapshotSelection()\n\n  const { value } = change\n  const { start, end } = range\n  let startKey = start.key\n  let startOffset = start.offset\n  let endKey = end.key\n  let endOffset = end.offset\n  let { document, schema } = value\n  let isStartVoid = document.hasVoidParent(startKey, schema)\n  let isEndVoid = document.hasVoidParent(endKey, schema)\n  let startBlock = document.getClosestBlock(startKey, schema)\n  let endBlock = document.getClosestBlock(endKey, schema)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    startOffset == 0 &&\n    endOffset == 0 &&\n    isStartVoid == false &&\n    startKey == startBlock.getFirstText().key &&\n    endKey == endBlock.getFirstText().key\n\n  // If it's a hanging selection, nudge it back to end in the previous text.\n  if (isHanging && isEndVoid) {\n    const prevText = document.getPreviousText(endKey)\n    endKey = prevText.key\n    endOffset = prevText.text.length\n    isEndVoid = document.hasVoidParent(endKey, schema)\n  }\n\n  change.withoutNormalizing(() => {\n    // If the start node is inside a void node, remove the void node and update\n    // the starting point to be right after it, continuously until the start point\n    // is not a void, or until the entire range is handled.\n    while (isStartVoid) {\n      const startVoid = document.getClosestVoid(startKey, schema)\n      const nextText = document.getNextText(startKey)\n      change.removeNodeByKey(startVoid.key)\n\n      // If the start and end keys are the same, we're done.\n      if (startKey == endKey) return\n\n      // If there is no next text node, we're done.\n      if (!nextText) return\n\n      // Continue...\n      document = change.value.document\n      startKey = nextText.key\n      startOffset = 0\n      isStartVoid = document.hasVoidParent(startKey, schema)\n    }\n\n    // If the end node is inside a void node, do the same thing but backwards. But\n    // we don't need any aborting checks because if we've gotten this far there\n    // must be a non-void node that will exit the loop.\n    while (isEndVoid) {\n      const endVoid = document.getClosestVoid(endKey, schema)\n      const prevText = document.getPreviousText(endKey)\n      change.removeNodeByKey(endVoid.key)\n\n      // Continue...\n      document = change.value.document\n      endKey = prevText.key\n      endOffset = prevText.text.length\n      isEndVoid = document.hasVoidParent(endKey, schema)\n    }\n\n    // If the start and end key are the same, and it was a hanging selection, we\n    // can just remove the entire block.\n    if (startKey == endKey && isHanging) {\n      change.removeNodeByKey(startBlock.key)\n      return\n    } else if (startKey == endKey) {\n      // Otherwise, if it wasn't hanging, we're inside a single text node, so we can\n      // simply remove the text in the range.\n      const index = startOffset\n      const length = endOffset - startOffset\n      change.removeTextByKey(startKey, index, length)\n      return\n    } else {\n      // Otherwise, we need to recursively remove text and nodes inside the start\n      // block after the start offset and inside the end block before the end\n      // offset. Then remove any blocks that are in between the start and end\n      // blocks. Then finally merge the start and end nodes.\n      startBlock = document.getClosestBlock(startKey)\n      endBlock = document.getClosestBlock(endKey)\n      const startText = document.getNode(startKey)\n      const endText = document.getNode(endKey)\n      const startLength = startText.text.length - startOffset\n      const endLength = endOffset\n\n      const ancestor = document.getCommonAncestor(startKey, endKey)\n      const startChild = ancestor.getFurthestAncestor(startKey)\n      const endChild = ancestor.getFurthestAncestor(endKey)\n\n      const startParent = document.getParent(startBlock.key)\n      const startParentIndex = startParent.nodes.indexOf(startBlock)\n      const endParentIndex = startParent.nodes.indexOf(endBlock)\n\n      let child\n\n      // Iterate through all of the nodes in the tree after the start text node\n      // but inside the end child, and remove them.\n      child = startText\n\n      while (child.key != startChild.key) {\n        const parent = document.getParent(child.key)\n        const index = parent.nodes.indexOf(child)\n        const afters = parent.nodes.slice(index + 1)\n\n        afters.reverse().forEach(node => {\n          change.removeNodeByKey(node.key)\n        })\n\n        child = parent\n      }\n\n      // Remove all of the middle children.\n      const startChildIndex = ancestor.nodes.indexOf(startChild)\n      const endChildIndex = ancestor.nodes.indexOf(endChild)\n      const middles = ancestor.nodes.slice(startChildIndex + 1, endChildIndex)\n\n      middles.reverse().forEach(node => {\n        change.removeNodeByKey(node.key)\n      })\n\n      // Remove the nodes before the end text node in the tree.\n      child = endText\n\n      while (child.key != endChild.key) {\n        const parent = document.getParent(child.key)\n        const index = parent.nodes.indexOf(child)\n        const befores = parent.nodes.slice(0, index)\n\n        befores.reverse().forEach(node => {\n          change.removeNodeByKey(node.key)\n        })\n\n        child = parent\n      }\n\n      // Remove any overlapping text content from the leaf text nodes.\n      if (startLength != 0) {\n        change.removeTextByKey(startKey, startOffset, startLength)\n      }\n\n      if (endLength != 0) {\n        change.removeTextByKey(endKey, 0, endOffset)\n      }\n\n      // If the start and end blocks aren't the same, move and merge the end block\n      // into the start block.\n      if (startBlock.key != endBlock.key) {\n        document = change.value.document\n        const lonely = document.getFurthestOnlyChildAncestor(endBlock.key)\n\n        // Move the end block to be right after the start block.\n        if (endParentIndex != startParentIndex + 1) {\n          change.moveNodeByKey(\n            endBlock.key,\n            startParent.key,\n            startParentIndex + 1\n          )\n        }\n\n        // If the selection is hanging, just remove the start block, otherwise\n        // merge the end block into it.\n        if (isHanging) {\n          change.removeNodeByKey(startBlock.key)\n        } else {\n          change.mergeNodeByKey(endBlock.key)\n        }\n\n        // If nested empty blocks are left over above the end block, remove them.\n        if (lonely) {\n          change.removeNodeByKey(lonely.key)\n        }\n      }\n    }\n  })\n}\n\n/**\n * Delete backward until the character boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteCharBackwardAtRange = (change, range) => {\n  const { value } = change\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = TextUtils.getCharOffsetBackward(text, o)\n  change.deleteBackwardAtRange(range, n)\n}\n\n/**\n * Delete backward until the line boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteLineBackwardAtRange = (change, range) => {\n  const { value } = change\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  change.deleteBackwardAtRange(range, o)\n}\n\n/**\n * Delete backward until the word boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteWordBackwardAtRange = (change, range) => {\n  const { value } = change\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = o === 0 ? 1 : TextUtils.getWordOffsetBackward(text, o)\n  change.deleteBackwardAtRange(range, n)\n}\n\n/**\n * Delete backward `n` characters at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} n (optional)\n */\n\nChanges.deleteBackwardAtRange = (change, range, n = 1) => {\n  if (n === 0) return\n  const { value } = change\n  const { document, schema } = value\n  const { start, focus } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    change.deleteAtRange(range)\n    return\n  }\n\n  const voidParent = document.getClosestVoid(start.key, schema)\n\n  // If there is a void parent, delete it.\n  if (voidParent) {\n    change.removeNodeByKey(voidParent.key)\n    return\n  }\n\n  const block = document.getClosestBlock(start.key)\n\n  // If the closest is not void, but empty, remove it\n  if (\n    block &&\n    !schema.isVoid(block) &&\n    block.text === '' &&\n    document.nodes.size !== 1\n  ) {\n    change.removeNodeByKey(block.key)\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (start.isAtStartOfNode(document)) {\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(start.key)\n\n  if (start.isAtStartOfNode(text)) {\n    const prev = document.getPreviousText(text.key)\n    const prevBlock = document.getClosestBlock(prev.key)\n    const prevVoid = document.getClosestVoid(prev.key, schema)\n\n    // If the previous text node has a void parent, remove it.\n    if (prevVoid) {\n      change.removeNodeByKey(prevVoid.key)\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n == 1 && prevBlock != block) {\n      range = range.moveAnchorTo(prev.key, prev.text.length)\n      change.deleteAtRange(range)\n      return\n    }\n  }\n\n  // If the focus offset is farther than the number of characters to delete,\n  // just remove the characters backwards inside the current node.\n  if (n < focus.offset) {\n    range = range.moveFocusBackward(n)\n    change.deleteAtRange(range)\n    return\n  }\n\n  // Otherwise, we need to see how many nodes backwards to go.\n  let node = text\n  let offset = 0\n  let traversed = focus.offset\n\n  while (n > traversed) {\n    node = document.getPreviousText(node.key)\n    const next = traversed + node.text.length\n\n    if (n <= next) {\n      offset = next - n\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  range = range.moveAnchorTo(node.key, offset)\n  change.deleteAtRange(range)\n}\n\n/**\n * Delete forward until the character boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteCharForwardAtRange = (change, range) => {\n  const { value } = change\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = TextUtils.getCharOffsetForward(text, o)\n  change.deleteForwardAtRange(range, n)\n}\n\n/**\n * Delete forward until the line boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteLineForwardAtRange = (change, range) => {\n  const { value } = change\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  change.deleteForwardAtRange(range, startBlock.text.length - o)\n}\n\n/**\n * Delete forward until the word boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteWordForwardAtRange = (change, range) => {\n  const { value } = change\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = TextUtils.getWordOffsetForward(text, o)\n  change.deleteForwardAtRange(range, n)\n}\n\n/**\n * Delete forward `n` characters at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} n (optional)\n */\n\nChanges.deleteForwardAtRange = (change, range, n = 1) => {\n  if (n === 0) return\n  const { value } = change\n  const { document, schema } = value\n  const { start, focus } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    change.deleteAtRange(range)\n    return\n  }\n\n  const voidParent = document.getClosestVoid(start.key, schema)\n\n  // If the node has a void parent, delete it.\n  if (voidParent) {\n    change.removeNodeByKey(voidParent.key)\n    return\n  }\n\n  const block = document.getClosestBlock(start.key)\n\n  // If the closest is not void, but empty, remove it\n  if (\n    block &&\n    !schema.isVoid(block) &&\n    block.text === '' &&\n    document.nodes.size !== 1\n  ) {\n    const nextBlock = document.getNextBlock(block.key)\n    change.removeNodeByKey(block.key)\n\n    if (nextBlock && nextBlock.key) {\n      change.moveToStartOfNode(nextBlock)\n    }\n\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (start.isAtEndOfNode(document)) {\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(start.key)\n\n  if (start.isAtEndOfNode(text)) {\n    const next = document.getNextText(text.key)\n    const nextBlock = document.getClosestBlock(next.key)\n    const nextVoid = document.getClosestVoid(next.key, schema)\n\n    // If the next text node has a void parent, remove it.\n    if (nextVoid) {\n      change.removeNodeByKey(nextVoid.key)\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n == 1 && nextBlock != block) {\n      range = range.moveFocusTo(next.key, 0)\n      change.deleteAtRange(range)\n      return\n    }\n  }\n\n  // If the remaining characters to the end of the node is greater than or equal\n  // to the number of characters to delete, just remove the characters forwards\n  // inside the current node.\n  if (n <= text.text.length - focus.offset) {\n    range = range.moveFocusForward(n)\n    change.deleteAtRange(range)\n    return\n  }\n\n  // Otherwise, we need to see how many nodes forwards to go.\n  let node = text\n  let offset = focus.offset\n  let traversed = text.text.length - focus.offset\n\n  while (n > traversed) {\n    node = document.getNextText(node.key)\n    const next = traversed + node.text.length\n\n    if (n <= next) {\n      offset = n - traversed\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  range = range.moveFocusTo(node.key, offset)\n  change.deleteAtRange(range)\n}\n\n/**\n * Insert a `block` node at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Block|String|Object} block\n */\n\nChanges.insertBlockAtRange = (change, range, block) => {\n  block = Block.create(block)\n\n  if (range.isExpanded) {\n    change.deleteAtRange(range)\n    range = range.moveToStart()\n  }\n\n  const { value } = change\n  const { document, schema } = value\n  const { start } = range\n  let startKey = start.key\n  let startOffset = start.offset\n  const startBlock = document.getClosestBlock(startKey)\n  const startInline = document.getClosestInline(startKey)\n  const parent = document.getParent(startBlock.key)\n  const index = parent.nodes.indexOf(startBlock)\n\n  if (schema.isVoid(startBlock)) {\n    const extra = start.isAtEndOfNode(startBlock) ? 1 : 0\n    change.insertNodeByKey(parent.key, index + extra, block)\n  } else if (!startInline && startBlock.text === '') {\n    change.insertNodeByKey(parent.key, index + 1, block)\n  } else if (start.isAtStartOfNode(startBlock)) {\n    change.insertNodeByKey(parent.key, index, block)\n  } else if (start.isAtEndOfNode(startBlock)) {\n    change.insertNodeByKey(parent.key, index + 1, block)\n  } else {\n    if (startInline && schema.isVoid(startInline)) {\n      const atEnd = start.isAtEndOfNode(startInline)\n      const siblingText = atEnd\n        ? document.getNextText(startKey)\n        : document.getPreviousText(startKey)\n\n      const splitRange = atEnd\n        ? range.moveToStartOfNode(siblingText)\n        : range.moveToEndOfNode(siblingText)\n\n      startKey = splitRange.start.key\n      startOffset = splitRange.start.offset\n    }\n\n    change.withoutNormalizing(() => {\n      change.splitDescendantsByKey(startBlock.key, startKey, startOffset)\n      change.insertNodeByKey(parent.key, index + 1, block)\n    })\n  }\n}\n\n/**\n * Insert a `fragment` at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Document} fragment\n */\n\nChanges.insertFragmentAtRange = (change, range, fragment) => {\n  change.withoutNormalizing(() => {\n    // If the range is expanded, delete it first.\n    if (range.isExpanded) {\n      change.deleteAtRange(range)\n\n      if (change.value.document.getDescendant(range.start.key)) {\n        range = range.moveToStart()\n      } else {\n        range = range.moveTo(range.end.key, 0).normalize(change.value.document)\n      }\n    }\n\n    // If the fragment is empty, there's nothing to do after deleting.\n    if (!fragment.nodes.size) return\n\n    // Regenerate the keys for all of the fragments nodes, so that they're\n    // guaranteed not to collide with the existing keys in the document. Otherwise\n    // they will be rengerated automatically and we won't have an easy way to\n    // reference them.\n    fragment = fragment.mapDescendants(child => child.regenerateKey())\n\n    // Calculate a few things...\n    const { start } = range\n    const { value } = change\n    const { schema } = value\n    let { document } = value\n    let startText = document.getDescendant(start.key)\n    let startBlock = document.getClosestBlock(startText.key)\n    let startChild = startBlock.getFurthestAncestor(startText.key)\n    const isAtStart = start.isAtStartOfNode(startBlock)\n    const parent = document.getParent(startBlock.key)\n    const index = parent.nodes.indexOf(startBlock)\n    const blocks = fragment.getBlocks()\n    const firstChild = fragment.nodes.first()\n    const lastChild = fragment.nodes.last()\n    const firstBlock = blocks.first()\n    const lastBlock = blocks.last()\n\n    // If the fragment only contains a void block, use `insertBlock` instead.\n    if (firstBlock === lastBlock && schema.isVoid(firstBlock)) {\n      change.insertBlockAtRange(range, firstBlock)\n      return\n    }\n\n    // If the fragment starts or ends with single nested block, (e.g., table),\n    // do not merge this fragment with existing blocks.\n    if (firstChild.hasBlockChildren() || lastChild.hasBlockChildren()) {\n      fragment.nodes.reverse().forEach(node => {\n        change.insertBlockAtRange(range, node)\n      })\n      return\n    }\n\n    // If the first and last block aren't the same, we need to insert all of the\n    // nodes after the fragment's first block at the index.\n    if (firstBlock != lastBlock) {\n      const lonelyParent = fragment.getFurthest(\n        firstBlock.key,\n        p => p.nodes.size == 1\n      )\n      const lonelyChild = lonelyParent || firstBlock\n      const startIndex = parent.nodes.indexOf(startBlock)\n      fragment = fragment.removeNode(lonelyChild.key)\n\n      fragment.nodes.forEach((node, i) => {\n        const newIndex = startIndex + i + 1\n        change.insertNodeByKey(parent.key, newIndex, node)\n      })\n    }\n\n    // Check if we need to split the node.\n    if (start.offset != 0) {\n      change.splitDescendantsByKey(startChild.key, start.key, start.offset)\n    }\n\n    // Update our variables with the new value.\n    document = change.value.document\n    startText = document.getDescendant(start.key)\n    startBlock = document.getClosestBlock(start.key)\n    startChild = startBlock.getFurthestAncestor(startText.key)\n\n    // If the first and last block aren't the same, we need to move any of the\n    // starting block's children after the split into the last block of the\n    // fragment, which has already been inserted.\n    if (firstBlock != lastBlock) {\n      const nextChild = isAtStart\n        ? startChild\n        : startBlock.getNextSibling(startChild.key)\n      const nextNodes = nextChild\n        ? startBlock.nodes.skipUntil(n => n.key == nextChild.key)\n        : List()\n      const lastIndex = lastBlock.nodes.size\n\n      nextNodes.forEach((node, i) => {\n        const newIndex = lastIndex + i\n        change.moveNodeByKey(node.key, lastBlock.key, newIndex)\n      })\n    }\n\n    // If the starting block is empty, we replace it entirely with the first block\n    // of the fragment, since this leads to a more expected behavior for the user.\n    if (!schema.isVoid(startBlock) && startBlock.text === '') {\n      change.removeNodeByKey(startBlock.key)\n      change.insertNodeByKey(parent.key, index, firstBlock)\n    } else {\n      // Otherwise, we maintain the starting block, and insert all of the first\n      // block's inline nodes into it at the split point.\n      const inlineChild = startBlock.getFurthestAncestor(startText.key)\n      const inlineIndex = startBlock.nodes.indexOf(inlineChild)\n\n      firstBlock.nodes.forEach((inline, i) => {\n        const o = start.offset == 0 ? 0 : 1\n        const newIndex = inlineIndex + i + o\n        change.insertNodeByKey(startBlock.key, newIndex, inline)\n      })\n    }\n  })\n}\n\n/**\n * Insert an `inline` node at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Inline|String|Object} inline\n */\n\nChanges.insertInlineAtRange = (change, range, inline) => {\n  inline = Inline.create(inline)\n\n  change.withoutNormalizing(() => {\n    if (range.isExpanded) {\n      change.deleteAtRange(range)\n      range = range.moveToStart()\n    }\n\n    const { value } = change\n    const { document, schema } = value\n    const { start } = range\n    const parent = document.getParent(start.key)\n    const startText = document.assertDescendant(start.key)\n    const index = parent.nodes.indexOf(startText)\n\n    if (schema.isVoid(parent)) return\n\n    change.splitNodeByKey(start.key, start.offset)\n    change.insertNodeByKey(parent.key, index + 1, inline)\n  })\n}\n\n/**\n * Insert `text` at a `range`, with optional `marks`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nChanges.insertTextAtRange = (change, range, text, marks) => {\n  const { value } = change\n  const { document, schema } = value\n  const { start } = range\n  let key = start.key\n  let offset = start.offset\n  const parent = document.getParent(start.key)\n\n  if (schema.isVoid(parent)) {\n    return\n  }\n\n  change.withoutNormalizing(() => {\n    if (range.isExpanded) {\n      change.deleteAtRange(range)\n\n      // Update range start after delete\n      if (change.value.selection.start.key !== key) {\n        key = change.value.selection.start.key\n        offset = change.value.selection.start.offset\n      }\n    }\n\n    change.insertTextByKey(key, offset, text, marks)\n  })\n}\n\n/**\n * Remove an existing `mark` to the characters at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Mark|String} mark (optional)\n */\n\nChanges.removeMarkAtRange = (change, range, mark) => {\n  if (range.isCollapsed) return\n\n  const { value } = change\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const { start, end } = range\n\n  change.withoutNormalizing(() => {\n    texts.forEach(node => {\n      const { key } = node\n      let index = 0\n      let length = node.text.length\n\n      if (key == start.key) index = start.offset\n      if (key == end.key) length = end.offset\n      if (key == start.key && key == end.key) length = end.offset - start.offset\n\n      change.removeMarkByKey(key, index, length, mark)\n    })\n  })\n}\n\n/**\n * Set the `properties` of block nodes in a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object|String} properties\n */\n\nChanges.setBlocksAtRange = (change, range, properties) => {\n  const { value } = change\n  const { document, schema } = value\n  const blocks = document.getBlocksAtRange(range)\n\n  const { start, end, isCollapsed } = range\n  const isStartVoid = document.hasVoidParent(start.key, schema)\n  const startBlock = document.getClosestBlock(start.key)\n  const endBlock = document.getClosestBlock(end.key)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    isCollapsed == false &&\n    start.offset == 0 &&\n    end.offset == 0 &&\n    isStartVoid == false &&\n    start.key == startBlock.getFirstText().key &&\n    end.key == endBlock.getFirstText().key\n\n  // If it's a hanging selection, ignore the last block.\n  const sets = isHanging ? blocks.slice(0, -1) : blocks\n\n  change.withoutNormalizing(() => {\n    sets.forEach(block => {\n      change.setNodeByKey(block.key, properties)\n    })\n  })\n}\n\n/**\n * Set the `properties` of inline nodes in a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object|String} properties\n */\n\nChanges.setInlinesAtRange = (change, range, properties) => {\n  const { value } = change\n  const { document } = value\n  const inlines = document.getInlinesAtRange(range)\n\n  change.withoutNormalizing(() => {\n    inlines.forEach(inline => {\n      change.setNodeByKey(inline.key, properties)\n    })\n  })\n}\n\n/**\n * Split the block nodes at a `range`, to optional `height`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} height (optional)\n */\n\nChanges.splitBlockAtRange = (change, range, height = 1) => {\n  const { start, end } = range\n  let { value } = change\n  let { document } = value\n  let node = document.assertDescendant(start.key)\n  let parent = document.getClosestBlock(node.key)\n  let h = 0\n\n  while (parent && parent.object == 'block' && h < height) {\n    node = parent\n    parent = document.getClosestBlock(parent.key)\n    h++\n  }\n\n  change.withoutNormalizing(() => {\n    change.splitDescendantsByKey(node.key, start.key, start.offset)\n\n    value = change.value\n    document = value.document\n\n    if (range.isExpanded) {\n      if (range.isBackward) range = range.flip()\n      const nextBlock = document.getNextBlock(node.key)\n      range = range.moveAnchorToStartOfNode(nextBlock)\n      range = range.setFocus(range.focus.setPath(null))\n\n      if (start.key === end.key) {\n        range = range.moveFocusTo(range.anchor.key, end.offset - start.offset)\n      }\n\n      range = document.resolveRange(range)\n      change.deleteAtRange(range)\n    }\n  })\n}\n\n/**\n * Split the inline nodes at a `range`, to optional `height`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} height (optional)\n */\n\nChanges.splitInlineAtRange = (change, range, height = Infinity) => {\n  if (range.isExpanded) {\n    change.deleteAtRange(range)\n    range = range.moveToStart()\n  }\n\n  const { start } = range\n  const { value } = change\n  const { document } = value\n  let node = document.assertDescendant(start.key)\n  let parent = document.getClosestInline(node.key)\n  let h = 0\n\n  while (parent && parent.object == 'inline' && h < height) {\n    node = parent\n    parent = document.getClosestInline(parent.key)\n    h++\n  }\n\n  change.splitDescendantsByKey(node.key, start.key, start.offset)\n}\n\n/**\n * Add or remove a `mark` from the characters at `range`, depending on whether\n * it's already there.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Mixed} mark\n */\n\nChanges.toggleMarkAtRange = (change, range, mark) => {\n  if (range.isCollapsed) return\n\n  mark = Mark.create(mark)\n\n  const { value } = change\n  const { document } = value\n  const marks = document.getActiveMarksAtRange(range)\n  const exists = marks.some(m => m.equals(mark))\n\n  if (exists) {\n    change.removeMarkAtRange(range, mark)\n  } else {\n    change.addMarkAtRange(range, mark)\n  }\n}\n\n/**\n * Unwrap all of the block nodes in a `range` from a block with `properties`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String|Object} properties\n */\n\nChanges.unwrapBlockAtRange = (change, range, properties) => {\n  properties = Node.createProperties(properties)\n\n  const { value } = change\n  let { document } = value\n  const blocks = document.getBlocksAtRange(range)\n  const wrappers = blocks\n    .map(block => {\n      return document.getClosest(block.key, parent => {\n        if (parent.object != 'block') return false\n        if (properties.type != null && parent.type != properties.type)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  change.withoutNormalizing(() => {\n    wrappers.forEach(block => {\n      const first = block.nodes.first()\n      const last = block.nodes.last()\n      const parent = document.getParent(block.key)\n      const index = parent.nodes.indexOf(block)\n\n      const children = block.nodes.filter(child => {\n        return blocks.some(b => child == b || child.hasDescendant(b.key))\n      })\n\n      const firstMatch = children.first()\n      const lastMatch = children.last()\n\n      if (first == firstMatch && last == lastMatch) {\n        block.nodes.forEach((child, i) => {\n          change.moveNodeByKey(child.key, parent.key, index + i)\n        })\n\n        change.removeNodeByKey(block.key)\n      } else if (last == lastMatch) {\n        block.nodes.skipUntil(n => n == firstMatch).forEach((child, i) => {\n          change.moveNodeByKey(child.key, parent.key, index + 1 + i)\n        })\n      } else if (first == firstMatch) {\n        block.nodes\n          .takeUntil(n => n == lastMatch)\n          .push(lastMatch)\n          .forEach((child, i) => {\n            change.moveNodeByKey(child.key, parent.key, index + i)\n          })\n      } else {\n        const firstText = firstMatch.getFirstText()\n\n        change.splitDescendantsByKey(block.key, firstText.key, 0)\n\n        document = change.value.document\n\n        children.forEach((child, i) => {\n          if (i == 0) {\n            const extra = child\n            child = document.getNextBlock(child.key)\n            change.removeNodeByKey(extra.key)\n          }\n\n          change.moveNodeByKey(child.key, parent.key, index + 1 + i)\n        })\n      }\n    })\n  })\n}\n\n/**\n * Unwrap the inline nodes in a `range` from an inline with `properties`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String|Object} properties\n */\n\nChanges.unwrapInlineAtRange = (change, range, properties) => {\n  properties = Node.createProperties(properties)\n\n  const { value } = change\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const inlines = texts\n    .map(text => {\n      return document.getClosest(text.key, parent => {\n        if (parent.object != 'inline') return false\n        if (properties.type != null && parent.type != properties.type)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  change.withoutNormalizing(() => {\n    inlines.forEach(inline => {\n      const parent = change.value.document.getParent(inline.key)\n      const index = parent.nodes.indexOf(inline)\n\n      inline.nodes.forEach((child, i) => {\n        change.moveNodeByKey(child.key, parent.key, index + i)\n      })\n\n      change.removeNodeByKey(inline.key)\n    })\n  })\n}\n\n/**\n * Wrap all of the blocks in a `range` in a new `block`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Block|Object|String} block\n */\n\nChanges.wrapBlockAtRange = (change, range, block) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n\n  const { value } = change\n  const { document } = value\n\n  const blocks = document.getBlocksAtRange(range)\n  const firstblock = blocks.first()\n  const lastblock = blocks.last()\n  let parent, siblings, index\n\n  // If there is only one block in the selection then we know the parent and\n  // siblings.\n  if (blocks.length === 1) {\n    parent = document.getParent(firstblock.key)\n    siblings = blocks\n  } else {\n    // Determine closest shared parent to all blocks in selection.\n    parent = document.getClosest(firstblock.key, p1 => {\n      return !!document.getClosest(lastblock.key, p2 => p1 == p2)\n    })\n  }\n\n  // If no shared parent could be found then the parent is the document.\n  if (parent == null) parent = document\n\n  // Create a list of direct children siblings of parent that fall in the\n  // selection.\n  if (siblings == null) {\n    const indexes = parent.nodes.reduce((ind, node, i) => {\n      if (node == firstblock || node.hasDescendant(firstblock.key)) ind[0] = i\n      if (node == lastblock || node.hasDescendant(lastblock.key)) ind[1] = i\n      return ind\n    }, [])\n\n    index = indexes[0]\n    siblings = parent.nodes.slice(indexes[0], indexes[1] + 1)\n  }\n\n  // Get the index to place the new wrapped node at.\n  if (index == null) {\n    index = parent.nodes.indexOf(siblings.first())\n  }\n\n  change.withoutNormalizing(() => {\n    // Inject the new block node into the parent.\n    change.insertNodeByKey(parent.key, index, block)\n\n    // Move the sibling nodes into the new block node.\n    siblings.forEach((node, i) => {\n      change.moveNodeByKey(node.key, block.key, i)\n    })\n  })\n}\n\n/**\n * Wrap the text and inlines in a `range` in a new `inline`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Inline|Object|String} inline\n */\n\nChanges.wrapInlineAtRange = (change, range, inline) => {\n  const { value } = change\n  let { document, schema } = value\n  const { start, end } = range\n\n  if (range.isCollapsed) {\n    // Wrapping an inline void\n    const inlineParent = document.getClosestInline(start.key)\n\n    if (!schema.isVoid(inlineParent)) {\n      return\n    }\n\n    return change.wrapInlineByKey(inlineParent.key, inline)\n  }\n\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n\n  const blocks = document.getBlocksAtRange(range)\n  let startBlock = document.getClosestBlock(start.key)\n  let endBlock = document.getClosestBlock(end.key)\n  const startInline = document.getClosestInline(start.key)\n  const endInline = document.getClosestInline(end.key)\n  let startChild = startBlock.getFurthestAncestor(start.key)\n  let endChild = endBlock.getFurthestAncestor(end.key)\n\n  change.withoutNormalizing(() => {\n    if (!startInline || startInline != endInline) {\n      change.splitDescendantsByKey(endChild.key, end.key, end.offset)\n      change.splitDescendantsByKey(startChild.key, start.key, start.offset)\n    }\n\n    document = change.value.document\n    startBlock = document.getDescendant(startBlock.key)\n    endBlock = document.getDescendant(endBlock.key)\n    startChild = startBlock.getFurthestAncestor(start.key)\n    endChild = endBlock.getFurthestAncestor(end.key)\n    const startIndex = startBlock.nodes.indexOf(startChild)\n    const endIndex = endBlock.nodes.indexOf(endChild)\n\n    if (startInline && startInline == endInline) {\n      const text = startBlock\n        .getTextsAtRange(range)\n        .get(0)\n        .splitText(start.offset)[1]\n        .splitText(end.offset - start.offset)[0]\n\n      inline = inline.set('nodes', List([text]))\n      change.insertInlineAtRange(range, inline)\n\n      const inlinekey = inline.getFirstText().key\n      const rng = {\n        anchor: {\n          key: inlinekey,\n          offset: 0,\n        },\n        focus: {\n          key: inlinekey,\n          offset: end.offset - start.offset,\n        },\n        isFocused: true,\n      }\n      change.select(rng)\n    } else if (startBlock == endBlock) {\n      document = change.value.document\n      startBlock = document.getClosestBlock(start.key)\n      startChild = startBlock.getFurthestAncestor(start.key)\n\n      const startInner = document.getNextSibling(startChild.key)\n      const startInnerIndex = startBlock.nodes.indexOf(startInner)\n      const endInner =\n        start.key == end.key\n          ? startInner\n          : startBlock.getFurthestAncestor(end.key)\n      const inlines = startBlock.nodes\n        .skipUntil(n => n == startInner)\n        .takeUntil(n => n == endInner)\n        .push(endInner)\n\n      const node = inline.regenerateKey()\n\n      change.insertNodeByKey(startBlock.key, startInnerIndex, node)\n\n      inlines.forEach((child, i) => {\n        change.moveNodeByKey(child.key, node.key, i)\n      })\n    } else {\n      const startInlines = startBlock.nodes.slice(startIndex + 1)\n      const endInlines = endBlock.nodes.slice(0, endIndex + 1)\n      const startNode = inline.regenerateKey()\n      const endNode = inline.regenerateKey()\n\n      change.insertNodeByKey(startBlock.key, startIndex + 1, startNode)\n      change.insertNodeByKey(endBlock.key, endIndex, endNode)\n\n      startInlines.forEach((child, i) => {\n        change.moveNodeByKey(child.key, startNode.key, i)\n      })\n\n      endInlines.forEach((child, i) => {\n        change.moveNodeByKey(child.key, endNode.key, i)\n      })\n\n      blocks.slice(1, -1).forEach(block => {\n        const node = inline.regenerateKey()\n        change.insertNodeByKey(block.key, 0, node)\n\n        block.nodes.forEach((child, i) => {\n          change.moveNodeByKey(child.key, node.key, i)\n        })\n      })\n    }\n  })\n}\n\n/**\n * Wrap the text in a `range` in a prefix/suffix.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String} prefix\n * @param {String} suffix (optional)\n */\n\nChanges.wrapTextAtRange = (change, range, prefix, suffix = prefix) => {\n  const { start, end } = range\n  const startRange = range.moveToStart()\n  let endRange = range.moveToEnd()\n\n  if (start.key == end.key) {\n    endRange = endRange.moveForward(prefix.length)\n  }\n\n  change.withoutNormalizing(() => {\n    change.insertTextAtRange(startRange, prefix, [])\n    change.insertTextAtRange(endRange, suffix, [])\n  })\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import { List } from 'immutable'\n\n/**\n * Compare paths `path` and `b` to see which is before or after.\n *\n * @param {List} path\n * @param {List} b\n * @return {Number|Null}\n */\n\nfunction compare(path, target) {\n  // PERF: if the paths are not the same size we can exit early.\n  if (path.size !== target.size) return null\n\n  for (let i = 0; i < path.size; i++) {\n    const pv = path.get(i)\n    const tv = target.get(i)\n\n    // If the path's value is ever less than the target's, it's before.\n    if (pv < tv) return -1\n\n    // If the target's value is ever less than the path's, it's after.\n    if (pv > tv) return 1\n  }\n\n  // Otherwise they were equal the whole way, it's the same.\n  return 0\n}\n\n/**\n * Create a path from `attrs`.\n *\n * @param {Array|List} attrs\n * @return {List}\n */\n\nfunction create(attrs) {\n  if (attrs == null) {\n    return null\n  }\n\n  if (List.isList(attrs)) {\n    return attrs\n  }\n\n  if (Array.isArray(attrs)) {\n    return List(attrs)\n  }\n\n  throw new Error(\n    `Paths can only be created from arrays or lists, but you passed: ${attrs}`\n  )\n}\n\n/**\n * Crop paths `a` and `b` to an equal size, defaulting to the shortest.\n *\n * @param {List} a\n * @param {List} b\n */\n\nfunction crop(a, b, size = min(a, b)) {\n  const ca = a.slice(0, size)\n  const cb = b.slice(0, size)\n  return [ca, cb]\n}\n\n/**\n * Decrement a `path` by `n` at `index`, defaulting to the last index.\n *\n * @param {List} path\n * @param {Number} n\n * @param {Number} index\n */\n\nfunction decrement(path, n = 1, index = path.size - 1) {\n  return increment(path, 0 - n, index)\n}\n\n/**\n * Increment a `path` by `n` at `index`, defaulting to the last index.\n *\n * @param {List} path\n * @param {Number} n\n * @param {Number} index\n */\n\nfunction increment(path, n = 1, index = path.size - 1) {\n  const value = path.get(index)\n  const newValue = value + n\n  const newPath = path.set(index, newValue)\n  return newPath\n}\n\n/**\n * Is a `path` above another `target` path?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isAbove(path, target) {\n  const [p, t] = crop(path, target)\n  return path.size < target.size && compare(p, t) === 0\n}\n\n/**\n * Is a `path` after another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isAfter(path, target) {\n  const [p, t] = crop(path, target)\n  return compare(p, t) === 1\n}\n\n/**\n * Is a `path` before another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isBefore(path, target) {\n  const [p, t] = crop(path, target)\n  return compare(p, t) === -1\n}\n\n/**\n * Is a `path` equal to another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isEqual(path, target) {\n  return path.equals(target)\n}\n\n/**\n * Is a `path` a sibling of a `target` path?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isSibling(path, target) {\n  if (path.size !== target.size) return false\n  const p = path.butLast()\n  const t = target.butLast()\n  return p.equals(t)\n}\n\n/**\n * Lift a `path` to refer to its parent.\n *\n * @param {List} path\n * @return {Array}\n */\n\nfunction lift(path) {\n  const parent = path.slice(0, -1)\n  return parent\n}\n\n/**\n * Get the maximum length of paths `a` and `b`.\n *\n * @param {List} path\n * @param {List} path\n * @return {Number}\n */\n\nfunction max(a, b) {\n  const n = Math.max(a.size, b.size)\n  return n\n}\n\n/**\n * Get the minimum length of paths `a` and `b`.\n *\n * @param {List} path\n * @param {List} path\n * @return {Number}\n */\n\nfunction min(a, b) {\n  const n = Math.min(a.size, b.size)\n  return n\n}\n\n/**\n * Get the common ancestor path of path `a` and path `b`.\n *\n * @param {List} a\n * @param {List} b\n * @return {List}\n */\n\nfunction relate(a, b) {\n  const array = []\n\n  for (let i = 0; i < a.size && i < b.size; i++) {\n    const av = a.get(i)\n    const bv = b.get(i)\n\n    // If the values aren't equal, they've diverged and don't share an ancestor.\n    if (av !== bv) break\n\n    // Otherwise, the current value is still a common ancestor.\n    array.push(av)\n  }\n\n  const path = create(array)\n  return path\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  compare,\n  create,\n  crop,\n  decrement,\n  increment,\n  isAbove,\n  isAfter,\n  isBefore,\n  isEqual,\n  isSibling,\n  lift,\n  max,\n  min,\n  relate,\n}\n","import Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Add mark to text at `offset` and `length` in node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mixed} mark\n */\n\nChanges.addMarkByPath = (change, path, offset, length, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'add_mark',\n      value,\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  change.applyOperations(operations)\n}\n\n/**\n * Insert a `fragment` at `index` in a node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} index\n * @param {Fragment} fragment\n */\n\nChanges.insertFragmentByPath = (change, path, index, fragment) => {\n  fragment.nodes.forEach((node, i) => {\n    change.insertNodeByPath(path, index + i, node)\n  })\n}\n\n/**\n * Insert a `node` at `index` in a node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} index\n * @param {Node} node\n */\n\nChanges.insertNodeByPath = (change, path, index, node) => {\n  const { value } = change\n\n  change.applyOperation({\n    type: 'insert_node',\n    value,\n    path: path.concat(index),\n    node,\n  })\n}\n\n/**\n * Insert `text` at `offset` in node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} offset\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nChanges.insertTextByPath = (change, path, offset, text, marks) => {\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n  marks = marks || node.getMarksAtIndex(offset)\n\n  change.applyOperation({\n    type: 'insert_text',\n    value,\n    path,\n    offset,\n    text,\n    marks,\n  })\n}\n\n/**\n * Merge a node by `path` with the previous node.\n *\n * @param {Change} change\n * @param {Array} path\n */\n\nChanges.mergeNodeByPath = (change, path) => {\n  const { value } = change\n  const { document } = value\n  const original = document.getDescendant(path)\n  const previous = document.getPreviousSibling(path)\n\n  if (!previous) {\n    throw new Error(\n      `Unable to merge node with path \"${path}\", because it has no previous sibling.`\n    )\n  }\n\n  const position =\n    previous.object == 'text' ? previous.text.length : previous.nodes.size\n\n  change.applyOperation({\n    type: 'merge_node',\n    value,\n    path,\n    position,\n    // for undos to succeed we only need the type and data because\n    // these are the only properties that get changed in the merge operation\n    properties: {\n      type: original.type,\n      data: original.data,\n    },\n    target: null,\n  })\n}\n\n/**\n * Move a node by `path` to a new parent by `newPath` and `index`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {String} newPath\n * @param {Number} index\n */\n\nChanges.moveNodeByPath = (change, path, newPath, newIndex) => {\n  const { value } = change\n\n  change.applyOperation({\n    type: 'move_node',\n    value,\n    path,\n    newPath: newPath.concat(newIndex),\n  })\n}\n\n/**\n * Remove mark from text at `offset` and `length` in node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n */\n\nChanges.removeMarkByPath = (change, path, offset, length, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (!leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'remove_mark',\n      value,\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  change.applyOperations(operations)\n}\n\n/**\n * Remove all `marks` from node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n */\n\nChanges.removeAllMarksByPath = (change, path) => {\n  const { state } = change\n  const { document } = state\n  const node = document.assertNode(path)\n  const texts = node.object === 'text' ? [node] : node.getTextsAsArray()\n\n  texts.forEach(text => {\n    text.getMarksAsArray().forEach(mark => {\n      change.removeMarkByKey(text.key, 0, text.text.length, mark)\n    })\n  })\n}\n\n/**\n * Remove a node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n */\n\nChanges.removeNodeByPath = (change, path) => {\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n\n  change.applyOperation({\n    type: 'remove_node',\n    value,\n    path,\n    node,\n  })\n}\n\n/**\n * Remove text at `offset` and `length` in node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n */\n\nChanges.removeTextByPath = (change, path, offset, length) => {\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n  const { text } = node\n\n  const removals = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the removal, continue on.\n    if (ay < bx || by < ax) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n    const string = text.slice(start, end)\n\n    removals.push({\n      type: 'remove_text',\n      value,\n      path,\n      offset: start,\n      text: string,\n      marks: leaf.marks,\n    })\n  })\n\n  // Apply in reverse order, so subsequent removals don't impact previous ones.\n  change.applyOperations(removals.reverse())\n}\n\n/**\n`* Replace a `node` with another `node`\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Object|Node} node\n */\n\nChanges.replaceNodeByPath = (change, path, newNode) => {\n  newNode = Node.create(newNode)\n  const index = path.last()\n  const parentPath = PathUtils.lift(path)\n\n  change.withoutNormalizing(() => {\n    change.removeNodeByPath(path)\n    change.insertNodeByPath(parentPath, index, newNode)\n  })\n}\n\n/**\n * Replace A Length of Text with another string or text\n * @param {Change} change\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {string} text\n * @param {Set<Mark>} marks (optional)\n */\n\nChanges.replaceTextByPath = (change, path, offset, length, text, marks) => {\n  const { document } = change.value\n  const node = document.assertNode(path)\n\n  if (length + offset > node.text.length) {\n    length = node.text.length - offset\n  }\n\n  const range = document.createRange({\n    anchor: { path, offset },\n    focus: { path, offset: offset + length },\n  })\n\n  let activeMarks = document.getActiveMarksAtRange(range)\n\n  change.withoutNormalizing(() => {\n    change.removeTextByPath(path, offset, length)\n\n    if (!marks) {\n      // Do not use mark at index when marks and activeMarks are both empty\n      marks = activeMarks ? activeMarks : []\n    } else if (activeMarks) {\n      // Do not use `has` because we may want to reset marks like font-size with\n      // an updated data;\n      activeMarks = activeMarks.filter(\n        activeMark => !marks.find(m => activeMark.type === m.type)\n      )\n\n      marks = activeMarks.merge(marks)\n    }\n\n    change.insertTextByPath(path, offset, text, marks)\n  })\n}\n\n/**\n * Set `properties` on mark on text at `offset` and `length` in node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n */\n\nChanges.setMarkByPath = (change, path, offset, length, mark, properties) => {\n  mark = Mark.create(mark)\n  properties = Mark.createProperties(properties)\n  const { value } = change\n\n  change.applyOperation({\n    type: 'set_mark',\n    value,\n    path,\n    offset,\n    length,\n    mark,\n    properties,\n  })\n}\n\n/**\n * Set `properties` on a node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nChanges.setNodeByPath = (change, path, properties) => {\n  properties = Node.createProperties(properties)\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n\n  change.applyOperation({\n    type: 'set_node',\n    value,\n    path,\n    node,\n    properties,\n  })\n}\n\n/**\n * Insert `text` at `offset` in node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nChanges.setTextByPath = (change, path, text, marks) => {\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n  const end = node.text.length\n  change.replaceTextByPath(path, 0, end, text, marks)\n}\n\n/**\n * Split a node by `path` at `position`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} position\n * @param {Object} options\n */\n\nChanges.splitNodeByPath = (change, path, position, options = {}) => {\n  const { target = null } = options\n  const { value } = change\n  const { document } = value\n  const node = document.getDescendant(path)\n\n  change.applyOperation({\n    type: 'split_node',\n    value,\n    path,\n    position,\n    target,\n    properties: {\n      type: node.type,\n      data: node.data,\n    },\n  })\n}\n\n/**\n * Split a node deeply down the tree by `path`, `textPath` and `textOffset`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Array} textPath\n * @param {Number} textOffset\n */\n\nChanges.splitDescendantsByPath = (change, path, textPath, textOffset) => {\n  if (path.equals(textPath)) {\n    change.splitNodeByPath(textPath, textOffset)\n    return\n  }\n\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n  const text = document.assertNode(textPath)\n  const ancestors = document.getAncestors(textPath)\n  const nodes = ancestors\n    .skipUntil(a => a.key == node.key)\n    .reverse()\n    .unshift(text)\n\n  let previous\n  let index\n\n  change.withoutNormalizing(() => {\n    nodes.forEach(n => {\n      const prevIndex = index == null ? null : index\n      index = previous ? n.nodes.indexOf(previous) + 1 : textOffset\n      previous = n\n      change.splitNodeByKey(n.key, index, { target: prevIndex })\n    })\n  })\n}\n\n/**\n * Unwrap content from an inline parent with `properties`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nChanges.unwrapInlineByPath = (change, path, properties) => {\n  const { value } = change\n  const { document, selection } = value\n  const node = document.assertNode(path)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOfNode(first, last)\n  change.unwrapInlineAtRange(range, properties)\n}\n\n/**\n * Unwrap content from a block parent with `properties`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nChanges.unwrapBlockByPath = (change, path, properties) => {\n  const { value } = change\n  const { document, selection } = value\n  const node = document.assertNode(path)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOfNode(first, last)\n  change.unwrapBlockAtRange(range, properties)\n}\n\n/**\n * Unwrap a single node from its parent.\n *\n * If the node is surrounded with siblings, its parent will be\n * split. If the node is the only child, the parent is removed, and\n * simply replaced by the node itself.  Cannot unwrap a root node.\n *\n * @param {Change} change\n * @param {Array} path\n */\n\nChanges.unwrapNodeByPath = (change, path) => {\n  const { value } = change\n  const { document } = value\n  document.assertNode(path)\n\n  const parentPath = PathUtils.lift(path)\n  const parent = document.assertNode(parentPath)\n  const index = path.last()\n  const parentIndex = parentPath.last()\n  const grandPath = PathUtils.lift(parentPath)\n  const isFirst = index === 0\n  const isLast = index === parent.nodes.size - 1\n\n  change.withoutNormalizing(() => {\n    if (parent.nodes.size === 1) {\n      change.moveNodeByPath(path, grandPath, parentIndex + 1)\n      change.removeNodeByPath(parentPath)\n    } else if (isFirst) {\n      change.moveNodeByPath(path, grandPath, parentIndex)\n    } else if (isLast) {\n      change.moveNodeByPath(path, grandPath, parentIndex + 1)\n    } else {\n      let updatedPath = PathUtils.increment(path, 1, parentPath.size - 1)\n      updatedPath = updatedPath.set(updatedPath.size - 1, 0)\n      change.splitNodeByPath(parentPath, index)\n      change.moveNodeByPath(updatedPath, grandPath, parentIndex + 1)\n    }\n  })\n}\n\n/**\n * Wrap a node in a block with `properties`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Block|Object|String} block\n */\n\nChanges.wrapBlockByPath = (change, path, block) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n  const parentPath = PathUtils.lift(path)\n  const index = path.last()\n  const newPath = PathUtils.increment(path)\n\n  change.withoutNormalizing(() => {\n    change.insertNodeByPath(parentPath, index, block)\n    change.moveNodeByPath(newPath, path, 0)\n  })\n}\n\n/**\n * Wrap a node in an inline with `properties`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Block|Object|String} inline\n */\n\nChanges.wrapInlineByPath = (change, path, inline) => {\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n  const parentPath = PathUtils.lift(path)\n  const index = path.last()\n  const newPath = PathUtils.increment(path)\n\n  change.withoutNormalizing(() => {\n    change.insertNodeByPath(parentPath, index, inline)\n    change.moveNodeByPath(newPath, path, 0)\n  })\n}\n\n/**\n * Wrap a node by `path` with `node`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Node|Object} node\n */\n\nChanges.wrapNodeByPath = (change, path, node) => {\n  node = Node.create(node)\n\n  if (node.object === 'block') {\n    change.wrapBlockByPath(path, node)\n  } else if (node.object === 'inline') {\n    change.wrapInlineByPath(path, node)\n  }\n}\n\n/**\n * Mix in `*ByKey` variants.\n */\n\nconst CHANGES = [\n  'addMark',\n  'insertFragment',\n  'insertNode',\n  'insertText',\n  'mergeNode',\n  'removeMark',\n  'removeAllMarks',\n  'removeNode',\n  'setText',\n  'replaceText',\n  'removeText',\n  'replaceNode',\n  'setMark',\n  'setNode',\n  'splitNode',\n  'unwrapInline',\n  'unwrapBlock',\n  'unwrapNode',\n  'wrapBlock',\n  'wrapInline',\n  'wrapNode',\n]\n\nfor (const method of CHANGES) {\n  Changes[`${method}ByKey`] = (change, key, ...args) => {\n    const { value } = change\n    const { document } = value\n    const path = document.assertPath(key)\n    change[`${method}ByPath`](path, ...args)\n  }\n}\n\n// Moving nodes takes two keys, so it's slightly different.\nChanges.moveNodeByKey = (change, key, newKey, ...args) => {\n  const { value } = change\n  const { document } = value\n  const path = document.assertPath(key)\n  const newPath = document.assertPath(newKey)\n  change.moveNodeByPath(path, newPath, ...args)\n}\n\n// Splitting descendants takes two keys, so it's slightly different.\nChanges.splitDescendantsByKey = (change, key, textKey, ...args) => {\n  const { value } = change\n  const { document } = value\n  const path = document.assertPath(key)\n  const textPath = document.assertPath(textKey)\n  change.splitDescendantsByPath(path, textPath, ...args)\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import omit from 'lodash/omit'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Redo to the next value in the history.\n *\n * @param {Change} change\n */\n\nChanges.redo = change => {\n  let { value } = change\n  let { history } = value\n  if (!history) return\n\n  let { undos, redos } = history\n  const next = redos.peek()\n  if (!next) return\n\n  // Shift the next value into the undo stack.\n  redos = redos.pop()\n  undos = undos.push(next)\n\n  // Replay the next operations.\n  next.forEach(op => {\n    const { type, properties } = op\n\n    // When the operation mutates the selection, omit its `isFocused` value to\n    // prevent the editor focus from changing during redoing.\n    if (type == 'set_selection') {\n      op = op.set('properties', omit(properties, 'isFocused'))\n    }\n\n    change.withoutSaving(() => {\n      change.applyOperation(op)\n    })\n  })\n\n  // Update the history.\n  value = change.value\n  history = history.set('undos', undos).set('redos', redos)\n  value = value.set('history', history)\n  change.value = value\n}\n\n/**\n * Undo the previous operations in the history.\n *\n * @param {Change} change\n */\n\nChanges.undo = change => {\n  let { value } = change\n  let { history } = value\n  if (!history) return\n\n  let { undos, redos } = history\n  const previous = undos.peek()\n  if (!previous) return\n\n  // Shift the previous operations into the redo stack.\n  undos = undos.pop()\n  redos = redos.push(previous)\n\n  // Replay the inverse of the previous operations.\n  previous\n    .slice()\n    .reverse()\n    .map(op => op.invert())\n    .forEach(inverse => {\n      const { type, properties } = inverse\n\n      // When the operation mutates the selection, omit its `isFocused` value to\n      // prevent the editor focus from changing during undoing.\n      if (type == 'set_selection') {\n        inverse = inverse.set('properties', omit(properties, 'isFocused'))\n      }\n\n      change.withoutSaving(() => {\n        change.applyOperation(inverse)\n      })\n    })\n\n  // Update the history.\n  value = change.value\n  history = history.set('undos', undos).set('redos', redos)\n  value = value.set('history', history)\n  change.value = value\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import isPlainObject from 'is-plain-object'\nimport warning from 'slate-dev-warning'\nimport { Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport PathUtils from '../utils/path-utils'\nimport MODEL_TYPES from '../constants/model-types'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  key: null,\n  offset: null,\n  path: null,\n}\n\n/**\n * Point.\n *\n * @type {Point}\n */\n\nclass Point extends Record(DEFAULTS) {\n  /**\n   * Create a new `Point` with `attrs`.\n   *\n   * @param {Object|Point} attrs\n   * @return {Point}\n   */\n\n  static create(attrs = {}) {\n    if (Point.isPoint(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Point.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Point.create\\` only accepts objects or points, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable point properties from `attrs`.\n   *\n   * @param {Object|Point} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Point.isPoint(a)) {\n      return {\n        key: a.key,\n        offset: a.offset,\n        path: a.path,\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('key' in a) p.key = a.key\n      if ('offset' in a) p.offset = a.offset\n      if ('path' in a) p.path = PathUtils.create(a.path)\n\n      // If only a path is set, or only a key is set, ensure that the other is\n      // set to null so that it can be normalized back to the right value.\n      // Otherwise we won't realize that the path and key don't match anymore.\n      if ('path' in a && !('key' in a)) p.key = null\n      if ('key' in a && !('path' in a)) p.path = null\n\n      return p\n    }\n\n    throw new Error(\n      `\\`Point.createProperties\\` only accepts objects or points, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Point` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Point}\n   */\n\n  static fromJSON(object) {\n    const { key = null, offset = null, path = null } = object\n\n    const point = new Point({\n      key,\n      offset,\n      path: PathUtils.create(path),\n    })\n\n    return point\n  }\n\n  /**\n   * Check if an `obj` is a `Point`.\n   *\n   * @param {Any} obj\n   * @return {Boolean}\n   */\n\n  static isPoint(obj) {\n    return !!(obj && obj[MODEL_TYPES.POINT])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'point'\n  }\n\n  /**\n   * Check whether all properties of the point are set.\n   *\n   * @return {Boolean}\n   */\n\n  get isSet() {\n    return this.key != null && this.offset != null && this.path != null\n  }\n\n  /**\n   * Check whether any property of the point is not set.\n   *\n   * @return {Boolean}\n   */\n\n  get isUnset() {\n    return !this.isSet\n  }\n\n  /**\n   * Check whether the point is at the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtEndOfNode(node) {\n    if (this.isUnset) return false\n    const last = node.getLastText()\n    const is = this.key === last.key && this.offset === last.text.length\n    return is\n  }\n\n  /**\n   * Check whether the point is at the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtStartOfNode(node) {\n    if (this.isUnset) return false\n\n    // PERF: Do a check for a `0` offset first since it's quickest.\n    if (this.offset != 0) return false\n\n    const first = node.getFirstText()\n    const is = this.key === first.key\n    return is\n  }\n\n  /**\n   * Check whether the point is in a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isInNode(node) {\n    if (this.isUnset) return false\n    if (node.object === 'text' && node.key === this.key) return true\n    if (node.hasNode(this.key)) return true\n    return false\n  }\n\n  /**\n   * Move the point's offset backward `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Point}\n   */\n\n  moveBackward(n = 1) {\n    if (n === 0) return this\n    if (n < 0) return this.moveForward(-n)\n    const point = this.setOffset(this.offset - n)\n    return point\n  }\n\n  /**\n   * Move the point's offset forward `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Point}\n   */\n\n  moveForward(n = 1) {\n    if (n === 0) return this\n    if (n < 0) return this.moveBackward(-n)\n    const point = this.setOffset(this.offset + n)\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String|Number} path\n   * @param {Number} offset\n   * @return {Point}\n   */\n\n  moveTo(path, offset = 0) {\n    let key = this.key\n\n    if (typeof path === 'number') {\n      offset = path\n      path = this.path\n    } else if (typeof path === 'string') {\n      key = path\n      path = key === this.key ? this.path : null\n    } else {\n      key = path.equals(this.path) ? this.key : null\n    }\n\n    const point = this.merge({ key, path, offset })\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  moveToStartOfNode(node) {\n    const first = node.getFirstText()\n    const point = this.moveTo(first.key, 0)\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  moveToEndOfNode(node) {\n    const last = node.getLastText()\n    const point = this.moveTo(last.key, last.text.length)\n    return point\n  }\n\n  /**\n   * Normalize the point relative to a `node`, ensuring that its key and path\n   * reference a text node, or that it gets unset.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  normalize(node) {\n    // If both the key and path are null, there's no reference to a node, so\n    // make sure it is entirely unset.\n    if (this.key == null && this.path == null) {\n      return this.setOffset(null)\n    }\n\n    const { key, offset, path } = this\n    const target = node.getNode(key || path)\n\n    if (!target) {\n      warning(false, \"A point's `path` or `key` invalid and was reset!\")\n\n      const text = node.getFirstText()\n      if (!text) return Point.create()\n\n      const point = this.merge({\n        key: text.key,\n        offset: 0,\n        path: node.getPath(text.key),\n      })\n\n      return point\n    }\n\n    if (target.object !== 'text') {\n      warning(false, 'A point should not reference a non-text node!')\n\n      const text = target.getTextAtOffset(offset)\n      const before = target.getOffset(text.key)\n      const point = this.merge({\n        offset: offset - before,\n        key: text.key,\n        path: node.getPath(text.key),\n      })\n\n      return point\n    }\n\n    if (target && path && key && key !== target.key) {\n      warning(false, \"A point's `key` did not match its `path`!\")\n    }\n\n    const point = this.merge({\n      key: target.key,\n      path: path == null ? node.getPath(target.key) : path,\n      offset: offset == null ? 0 : Math.min(offset, target.text.length),\n    })\n\n    return point\n  }\n\n  /**\n   * Set the point's key to a new `key`.\n   *\n   * @param {String} key\n   * @return {Point}\n   */\n\n  setKey(key) {\n    if (key !== null) {\n      key = KeyUtils.create(key)\n    }\n\n    const point = this.set('key', key)\n    return point\n  }\n\n  /**\n   * Set the point's offset to a new `offset`.\n   *\n   * @param {Number} offset\n   * @return {Point}\n   */\n\n  setOffset(offset) {\n    const point = this.set('offset', offset)\n    return point\n  }\n\n  /**\n   * Set the point's path to a new `path`.\n   *\n   * @param {List|Array} path\n   * @return {Point}\n   */\n\n  setPath(path) {\n    if (path !== null) {\n      path = PathUtils.create(path)\n    }\n\n    const point = this.set('path', path)\n    return point\n  }\n\n  /**\n   * Return a JSON representation of the point.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      key: this.key,\n      offset: this.offset,\n      path: this.path && this.path.toArray(),\n    }\n\n    if (!options.preserveKeys) {\n      delete object.key\n    }\n\n    return object\n  }\n\n  /**\n   * Unset the point.\n   *\n   * @return {Point}\n   */\n\n  unset() {\n    return this.merge({\n      key: null,\n      offset: null,\n      path: null,\n    })\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nPoint.prototype[MODEL_TYPES.POINT] = true\n\n/**\n * Export.\n *\n * @type {Point}\n */\n\nexport default Point\n","import isPlainObject from 'is-plain-object'\nimport { List, Record } from 'immutable'\n\nimport Mark from './mark'\nimport MODEL_TYPES from '../constants/model-types'\nimport Point from './point'\nimport Range from './range'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: Point.create(),\n  focus: Point.create(),\n  mark: undefined,\n}\n\n/**\n * Decoration.\n *\n * @type {Decoration}\n */\n\nclass Decoration extends Record(DEFAULTS) {\n  /**\n   * Create a new `Decoration` with `attrs`.\n   *\n   * @param {Object|Decoration} attrs\n   * @return {Decoration}\n   */\n\n  static create(attrs = {}) {\n    if (Decoration.isDecoration(attrs)) {\n      return attrs\n    }\n\n    if (Range.isRange(attrs)) {\n      return Decoration.fromJSON(Range.createProperties(attrs))\n    }\n\n    if (isPlainObject(attrs)) {\n      return Decoration.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Decoration.create\\` only accepts objects or decorations, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Ranges` from `elements`.\n   *\n   * @param {Array<Decoration|Object>|List<Decoration|Object>} elements\n   * @return {List<Decoration>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Decoration.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Decoration.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable decoration properties from `attrs`.\n   *\n   * @param {Object|String|Decoration} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Decoration.isDecoration(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n        mark: Mark.create(a.mark),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      if ('mark' in a) p.mark = Mark.create(a.mark)\n      return p\n    }\n\n    throw new Error(\n      `\\`Decoration.createProperties\\` only accepts objects or decorations, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Decoration` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Decoration}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus, mark } = object\n\n    if (!mark) {\n      throw new Error(\n        `Decorations must be created with a \\`mark\\`, but you passed: ${JSON.stringify(\n          object\n        )}`\n      )\n    }\n\n    const decoration = new Decoration({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n      mark: Mark.fromJSON(mark),\n    })\n\n    return decoration\n  }\n\n  /**\n   * Check if an `obj` is a `Decoration`.\n   *\n   * @param {Any} obj\n   * @return {Boolean}\n   */\n\n  static isDecoration(obj) {\n    return !!(obj && obj[MODEL_TYPES.DECORATION])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'decoration'\n  }\n\n  /**\n   * Set new `properties` on the decoration.\n   *\n   * @param {Object|Range|Selection} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Decoration.createProperties(properties)\n    const { anchor, focus, mark } = properties\n    const props = {}\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    if (mark) {\n      props.mark = Mark.create(mark)\n    }\n\n    const decoration = this.merge(props)\n    return decoration\n  }\n\n  /**\n   * Return a JSON representation of the decoration.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n      mark: this.mark.toJSON(options),\n    }\n\n    return object\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nDecoration.prototype[MODEL_TYPES.DECORATION] = true\n\n/**\n * Export.\n *\n * @type {Decoration}\n */\n\nexport default Decoration\n","import isPlainObject from 'is-plain-object'\nimport { List, Record } from 'immutable'\n\nimport Decoration from './decoration'\nimport MODEL_TYPES from '../constants/model-types'\nimport Point from './point'\nimport Selection from './selection'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: Point.create(),\n  focus: Point.create(),\n}\n\n/**\n * Range.\n *\n * @type {Range}\n */\n\nclass Range extends Record(DEFAULTS) {\n  /**\n   * Create a new `Range` with `attrs`.\n   *\n   * @param {Object|Range} attrs\n   * @return {Range}\n   */\n\n  static create(attrs = {}) {\n    if (Range.isRange(attrs)) {\n      if (attrs.object === 'range') {\n        return attrs\n      } else {\n        return Range.fromJSON(Range.createProperties(attrs))\n      }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Range.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Range.create\\` only accepts objects or ranges, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Ranges` from `elements`.\n   *\n   * @param {Array<Range|Object>|List<Range|Object>} elements\n   * @return {List<Range>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Range.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Range.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable range properties from `attrs`.\n   *\n   * @param {Object|String|Range} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Range.isRange(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      return p\n    }\n\n    throw new Error(\n      `\\`Range.createProperties\\` only accepts objects, decorations, ranges or selections, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Range` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Range}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus } = object\n    const range = new Range({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n    })\n\n    return range\n  }\n\n  /**\n   * Check if an `obj` is a `Range`, or is range-like.\n   *\n   * @param {Any} obj\n   * @return {Boolean}\n   */\n\n  static isRange(obj) {\n    return (\n      !!(obj && obj[MODEL_TYPES.RANGE]) ||\n      Decoration.isDecoration(obj) ||\n      Selection.isSelection(obj)\n    )\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'range'\n  }\n\n  /**\n   * Return a JSON representation of the range.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n    }\n\n    return object\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nRange.prototype[MODEL_TYPES.RANGE] = true\n\n/**\n * Export.\n *\n * @type {Range}\n */\n\nexport default Range\n","import isPlainObject from 'is-plain-object'\nimport { Record, Set } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport Mark from './mark'\nimport Point from './point'\nimport Range from './range'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: Point.create(),\n  focus: Point.create(),\n  isFocused: false,\n  marks: null,\n}\n\n/**\n * Selection.\n *\n * @type {Selection}\n */\n\nclass Selection extends Record(DEFAULTS) {\n  /**\n   * Create a new `Selection` with `attrs`.\n   *\n   * @param {Object|Selection} attrs\n   * @return {Selection}\n   */\n\n  static create(attrs = {}) {\n    if (Selection.isSelection(attrs)) {\n      return attrs\n    }\n\n    if (Range.isRange(attrs)) {\n      return Selection.fromJSON(Range.createProperties(attrs))\n    }\n\n    if (isPlainObject(attrs)) {\n      return Selection.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Selection.create\\` only accepts objects, ranges or selections, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable selection properties from `attrs`.\n   *\n   * @param {Object|String|Selection} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Selection.isSelection(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n        isFocused: a.isFocused,\n        marks: a.marks,\n      }\n    }\n\n    if (Range.isRange(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      if ('isFocused' in a) p.isFocused = a.isFocused\n      if ('marks' in a)\n        p.marks = a.marks == null ? null : Mark.createSet(a.marks)\n      return p\n    }\n\n    throw new Error(\n      `\\`Selection.createProperties\\` only accepts objects, ranges or selections, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Selection` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Selection}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus, isFocused = false, marks = null } = object\n    const selection = new Selection({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n      isFocused,\n      marks: marks == null ? null : new Set(marks.map(Mark.fromJSON)),\n    })\n\n    return selection\n  }\n\n  /**\n   * Check if an `obj` is a `Selection`.\n   *\n   * @param {Any} obj\n   * @return {Boolean}\n   */\n\n  static isSelection(obj) {\n    return !!(obj && obj[MODEL_TYPES.SELECTION])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'selection'\n  }\n\n  /**\n   * Check whether the selection is blurred.\n   *\n   * @return {Boolean}\n   */\n\n  get isBlurred() {\n    return !this.isFocused\n  }\n\n  /**\n   * Set the `isFocused` property to a new `value`.\n   *\n   * @param {Boolean} value\n   * @return {Selection}\n   */\n\n  setIsFocused(value) {\n    const selection = this.set('isFocused', value)\n    return selection\n  }\n\n  /**\n   * Set the `marks` property to a new set of `marks`.\n   *\n   * @param {Set} marks\n   * @return {Selection}\n   */\n\n  setMarks(marks) {\n    const selection = this.set('marks', marks)\n    return selection\n  }\n\n  /**\n   * Set new `properties` on the selection.\n   *\n   * @param {Object|Range|Selection} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Selection.createProperties(properties)\n    const { anchor, focus, ...props } = properties\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    const selection = this.merge(props)\n    return selection\n  }\n\n  /**\n   * Return a JSON representation of the selection.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n      isFocused: this.isFocused,\n      marks:\n        this.marks == null ? null : this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nSelection.prototype[MODEL_TYPES.SELECTION] = true\n\n/**\n * Export.\n *\n * @type {Selection}\n */\n\nexport default Selection\n","import { is } from 'immutable'\nimport pick from 'lodash/pick'\n\nimport Selection from '../models/selection'\n\nconst Changes = {}\n\nChanges.blur = change => {\n  change.select({ isFocused: false })\n}\n\nChanges.deselect = change => {\n  const range = Selection.create()\n  change.select(range)\n}\n\nChanges.focus = change => {\n  change.select({ isFocused: true })\n}\n\nChanges.flip = change => {\n  change.call(proxy, 'flip')\n}\n\nChanges.moveAnchorBackward = (change, ...args) => {\n  change.call(pointBackward, 'anchor', ...args)\n}\n\nChanges.moveAnchorForward = (change, ...args) => {\n  change.call(pointForward, 'anchor', ...args)\n}\n\nChanges.moveAnchorTo = (change, ...args) => {\n  change.call(proxy, 'moveAnchorTo', ...args)\n}\n\nChanges.moveAnchorToEndOfBlock = change => {\n  change.call(pointEdgeObject, 'anchor', 'end', 'block')\n}\n\nChanges.moveAnchorToEndOfInline = change => {\n  change.call(pointEdgeObject, 'anchor', 'end', 'inline')\n}\n\nChanges.moveAnchorToEndOfDocument = change => {\n  change.moveAnchorToEndOfNode(change.value.document).moveToAnchor()\n}\n\nChanges.moveAnchorToEndOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'end', 'next', 'block')\n}\n\nChanges.moveAnchorToEndOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'end', 'next', 'inline')\n}\n\nChanges.moveAnchorToEndOfNextText = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'end', 'next', 'text')\n}\n\nChanges.moveAnchorToEndOfNode = (change, ...args) => {\n  change.call(proxy, 'moveAnchorToEndOfNode', ...args)\n}\n\nChanges.moveAnchorToEndOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'end', 'previous', 'block')\n}\n\nChanges.moveAnchorToEndOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'end', 'previous', 'inline')\n}\n\nChanges.moveAnchorToEndOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'end', 'previous', 'text')\n}\n\nChanges.moveAnchorToEndOfText = change => {\n  change.call(pointEdgeObject, 'anchor', 'end', 'text')\n}\n\nChanges.moveAnchorToStartOfBlock = change => {\n  change.call(pointEdgeObject, 'anchor', 'start', 'block')\n}\n\nChanges.moveAnchorToStartOfDocument = change => {\n  change.moveAnchorToStartOfNode(change.value.document).moveToAnchor()\n}\n\nChanges.moveAnchorToStartOfInline = change => {\n  change.call(pointEdgeObject, 'anchor', 'start', 'inline')\n}\n\nChanges.moveAnchorToStartOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'start', 'next', 'block')\n}\n\nChanges.moveAnchorToStartOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'start', 'next', 'inline')\n}\n\nChanges.moveAnchorToStartOfNextText = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'start', 'next', 'text')\n}\n\nChanges.moveAnchorToStartOfNode = (change, ...args) => {\n  change.call(proxy, 'moveAnchorToStartOfNode', ...args)\n}\n\nChanges.moveAnchorToStartOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'start', 'previous', 'block')\n}\n\nChanges.moveAnchorToStartOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'start', 'previous', 'inline')\n}\n\nChanges.moveAnchorToStartOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'start', 'previous', 'text')\n}\n\nChanges.moveAnchorToStartOfText = change => {\n  change.call(pointEdgeObject, 'anchor', 'start', 'text')\n}\n\nChanges.moveBackward = (change, ...args) => {\n  change.moveAnchorBackward(...args).moveFocusBackward(...args)\n}\n\nChanges.moveEndBackward = (change, ...args) => {\n  change.call(pointBackward, 'end', ...args)\n}\n\nChanges.moveEndForward = (change, ...args) => {\n  change.call(pointForward, 'end', ...args)\n}\n\nChanges.moveEndTo = (change, ...args) => {\n  change.call(proxy, 'moveEndTo', ...args)\n}\n\nChanges.moveEndToEndOfBlock = change => {\n  change.call(pointEdgeObject, 'end', 'end', 'block')\n}\n\nChanges.moveEndToEndOfDocument = change => {\n  change.moveEndToEndOfNode(change.value.document).moveToEnd()\n}\n\nChanges.moveEndToEndOfInline = change => {\n  change.call(pointEdgeObject, 'end', 'end', 'inline')\n}\n\nChanges.moveEndToEndOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'end', 'end', 'next', 'block')\n}\n\nChanges.moveEndToEndOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'end', 'end', 'next', 'inline')\n}\n\nChanges.moveEndToEndOfNextText = change => {\n  change.call(pointEdgeSideObject, 'end', 'end', 'next', 'text')\n}\n\nChanges.moveEndToEndOfNode = (change, ...args) => {\n  change.call(proxy, 'moveEndToEndOfNode', ...args)\n}\n\nChanges.moveEndToEndOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'end', 'end', 'previous', 'block')\n}\n\nChanges.moveEndToEndOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'end', 'end', 'previous', 'inline')\n}\n\nChanges.moveEndToEndOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'end', 'end', 'previous', 'text')\n}\n\nChanges.moveEndToEndOfText = change => {\n  change.call(pointEdgeObject, 'end', 'end', 'text')\n}\n\nChanges.moveEndToStartOfBlock = change => {\n  change.call(pointEdgeObject, 'end', 'start', 'block')\n}\n\nChanges.moveEndToStartOfDocument = change => {\n  change.moveEndToStartOfNode(change.value.document).moveToEnd()\n}\n\nChanges.moveEndToStartOfInline = change => {\n  change.call(pointEdgeObject, 'end', 'start', 'inline')\n}\n\nChanges.moveEndToStartOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'end', 'start', 'next', 'block')\n}\n\nChanges.moveEndToStartOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'end', 'start', 'next', 'inline')\n}\n\nChanges.moveEndToStartOfNextText = change => {\n  change.call(pointEdgeSideObject, 'end', 'start', 'next', 'text')\n}\n\nChanges.moveEndToStartOfNode = (change, ...args) => {\n  change.call(proxy, 'moveEndToStartOfNode', ...args)\n}\n\nChanges.moveEndToStartOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'end', 'start', 'previous', 'block')\n}\n\nChanges.moveEndToStartOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'end', 'start', 'previous', 'inline')\n}\n\nChanges.moveEndToStartOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'end', 'start', 'previous', 'text')\n}\n\nChanges.moveEndToStartOfText = change => {\n  change.call(pointEdgeObject, 'end', 'start', 'text')\n}\n\nChanges.moveFocusBackward = (change, ...args) => {\n  change.call(pointBackward, 'focus', ...args)\n}\n\nChanges.moveFocusForward = (change, ...args) => {\n  change.call(pointForward, 'focus', ...args)\n}\n\nChanges.moveFocusTo = (change, ...args) => {\n  change.call(proxy, 'moveFocusTo', ...args)\n}\n\nChanges.moveFocusToEndOfBlock = change => {\n  change.call(pointEdgeObject, 'focus', 'end', 'block')\n}\n\nChanges.moveFocusToEndOfDocument = change => {\n  change.moveFocusToEndOfNode(change.value.document).moveToFocus()\n}\n\nChanges.moveFocusToEndOfInline = change => {\n  change.call(pointEdgeObject, 'focus', 'end', 'inline')\n}\n\nChanges.moveFocusToEndOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'focus', 'end', 'next', 'block')\n}\n\nChanges.moveFocusToEndOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'focus', 'end', 'next', 'inline')\n}\n\nChanges.moveFocusToEndOfNextText = change => {\n  change.call(pointEdgeSideObject, 'focus', 'end', 'next', 'text')\n}\n\nChanges.moveFocusToEndOfNode = (change, ...args) => {\n  change.call(proxy, 'moveFocusToEndOfNode', ...args)\n}\n\nChanges.moveFocusToEndOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'focus', 'end', 'previous', 'block')\n}\n\nChanges.moveFocusToEndOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'focus', 'end', 'previous', 'inline')\n}\n\nChanges.moveFocusToEndOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'focus', 'end', 'previous', 'text')\n}\n\nChanges.moveFocusToEndOfText = change => {\n  change.call(pointEdgeObject, 'focus', 'end', 'text')\n}\n\nChanges.moveFocusToStartOfBlock = change => {\n  change.call(pointEdgeObject, 'focus', 'start', 'block')\n}\n\nChanges.moveFocusToStartOfDocument = change => {\n  change.moveFocusToStartOfNode(change.value.document).moveToFocus()\n}\n\nChanges.moveFocusToStartOfInline = change => {\n  change.call(pointEdgeObject, 'focus', 'start', 'inline')\n}\n\nChanges.moveFocusToStartOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'focus', 'start', 'next', 'block')\n}\n\nChanges.moveFocusToStartOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'focus', 'start', 'next', 'inline')\n}\n\nChanges.moveFocusToStartOfNextText = change => {\n  change.call(pointEdgeSideObject, 'focus', 'start', 'next', 'text')\n}\n\nChanges.moveFocusToStartOfNode = (change, ...args) => {\n  change.call(proxy, 'moveFocusToStartOfNode', ...args)\n}\n\nChanges.moveFocusToStartOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'focus', 'start', 'previous', 'block')\n}\n\nChanges.moveFocusToStartOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'focus', 'start', 'previous', 'inline')\n}\n\nChanges.moveFocusToStartOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'focus', 'start', 'previous', 'text')\n}\n\nChanges.moveFocusToStartOfText = change => {\n  change.call(pointEdgeObject, 'focus', 'start', 'text')\n}\n\nChanges.moveForward = (change, ...args) => {\n  change.moveAnchorForward(...args).moveFocusForward(...args)\n}\n\nChanges.moveStartBackward = (change, ...args) => {\n  change.call(pointBackward, 'start', ...args)\n}\n\nChanges.moveStartForward = (change, ...args) => {\n  change.call(pointForward, 'start', ...args)\n}\n\nChanges.moveStartTo = (change, ...args) => {\n  change.call(proxy, 'moveStartTo', ...args)\n}\n\nChanges.moveStartToEndOfBlock = change => {\n  change.call(pointEdgeObject, 'start', 'end', 'block')\n}\n\nChanges.moveStartToEndOfDocument = change => {\n  change.moveStartToEndOfNode(change.value.document).moveToStart()\n}\n\nChanges.moveStartToEndOfInline = change => {\n  change.call(pointEdgeObject, 'start', 'end', 'inline')\n}\n\nChanges.moveStartToEndOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'start', 'end', 'next', 'block')\n}\n\nChanges.moveStartToEndOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'start', 'end', 'next', 'inline')\n}\n\nChanges.moveStartToEndOfNextText = change => {\n  change.call(pointEdgeSideObject, 'start', 'end', 'next', 'text')\n}\n\nChanges.moveStartToEndOfNode = (change, ...args) => {\n  change.call(proxy, 'moveStartToEndOfNode', ...args)\n}\n\nChanges.moveStartToEndOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'start', 'end', 'previous', 'block')\n}\n\nChanges.moveStartToEndOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'start', 'end', 'previous', 'inline')\n}\n\nChanges.moveStartToEndOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'start', 'end', 'previous', 'text')\n}\n\nChanges.moveStartToEndOfText = change => {\n  change.call(pointEdgeObject, 'start', 'end', 'text')\n}\n\nChanges.moveStartToStartOfBlock = change => {\n  change.call(pointEdgeObject, 'start', 'start', 'block')\n}\n\nChanges.moveStartToStartOfDocument = change => {\n  change.moveStartToStartOfNode(change.value.document).moveToStart()\n}\n\nChanges.moveStartToStartOfInline = change => {\n  change.call(pointEdgeObject, 'start', 'start', 'inline')\n}\n\nChanges.moveStartToStartOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'start', 'start', 'next', 'block')\n}\n\nChanges.moveStartToStartOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'start', 'start', 'next', 'inline')\n}\n\nChanges.moveStartToStartOfNextText = change => {\n  change.call(pointEdgeSideObject, 'start', 'start', 'next', 'text')\n}\n\nChanges.moveStartToStartOfNode = (change, ...args) => {\n  change.call(proxy, 'moveStartToStartOfNode', ...args)\n}\n\nChanges.moveStartToStartOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'start', 'start', 'previous', 'block')\n}\n\nChanges.moveStartToStartOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'start', 'start', 'previous', 'inline')\n}\n\nChanges.moveStartToStartOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'start', 'start', 'previous', 'text')\n}\n\nChanges.moveStartToStartOfText = change => {\n  change.call(pointEdgeObject, 'start', 'start', 'text')\n}\n\nChanges.moveTo = (change, ...args) => {\n  change.call(proxy, 'moveTo', ...args)\n}\n\nChanges.moveToAnchor = change => {\n  change.call(proxy, 'moveToAnchor')\n}\n\nChanges.moveToEnd = change => {\n  change.call(proxy, 'moveToEnd')\n}\n\nChanges.moveToEndOfBlock = change => {\n  change.moveEndToEndOfBlock().moveToEnd()\n}\n\nChanges.moveToEndOfDocument = change => {\n  change.moveEndToEndOfNode(change.value.document).moveToEnd()\n}\n\nChanges.moveToEndOfInline = change => {\n  change.moveEndToEndOfInline().moveToEnd()\n}\n\nChanges.moveToEndOfNextBlock = change => {\n  change.moveEndToEndOfNextBlock().moveToEnd()\n}\n\nChanges.moveToEndOfNextInline = change => {\n  change.moveEndToEndOfNextInline().moveToEnd()\n}\n\nChanges.moveToEndOfNextText = change => {\n  change.moveEndToEndOfNextText().moveToEnd()\n}\n\nChanges.moveToEndOfNode = (change, ...args) => {\n  change.call(proxy, 'moveToEndOfNode', ...args)\n}\n\nChanges.moveToEndOfPreviousBlock = change => {\n  change.moveStartToEndOfPreviousBlock().moveToStart()\n}\n\nChanges.moveToEndOfPreviousInline = change => {\n  change.moveStartToEndOfPreviousInline().moveToStart()\n}\n\nChanges.moveToEndOfPreviousText = change => {\n  change.moveStartToEndOfPreviousText().moveToStart()\n}\n\nChanges.moveToEndOfText = change => {\n  change.moveEndToEndOfText().moveToEnd()\n}\n\nChanges.moveToFocus = change => {\n  change.call(proxy, 'moveToFocus')\n}\n\nChanges.moveToRangeOfDocument = change => {\n  change.moveToRangeOfNode(change.value.document)\n}\n\nChanges.moveToRangeOfNode = (change, ...args) => {\n  change.call(proxy, 'moveToRangeOfNode', ...args)\n}\n\nChanges.moveToStart = change => {\n  change.call(proxy, 'moveToStart')\n}\n\nChanges.moveToStartOfBlock = change => {\n  change.moveStartToStartOfBlock().moveToStart()\n}\n\nChanges.moveToStartOfDocument = change => {\n  change.moveStartToStartOfNode(change.value.document).moveToStart()\n}\n\nChanges.moveToStartOfInline = change => {\n  change.moveStartToStartOfInline().moveToStart()\n}\n\nChanges.moveToStartOfNextBlock = change => {\n  change.moveEndToStartOfNextBlock().moveToEnd()\n}\n\nChanges.moveToStartOfNextInline = change => {\n  change.moveEndToStartOfNextInline().moveToEnd()\n}\n\nChanges.moveToStartOfNextText = change => {\n  change.moveEndToStartOfNextText().moveToEnd()\n}\n\nChanges.moveToStartOfNode = (change, ...args) => {\n  change.call(proxy, 'moveToStartOfNode', ...args)\n}\n\nChanges.moveToStartOfPreviousBlock = change => {\n  change.moveStartToStartOfPreviousBlock().moveToStart()\n}\n\nChanges.moveToStartOfPreviousInline = change => {\n  change.moveStartToStartOfPreviousInline().moveToStart()\n}\n\nChanges.moveToStartOfPreviousText = change => {\n  change.moveStartToStartOfPreviousText().moveToStart()\n}\n\nChanges.moveToStartOfText = change => {\n  change.moveStartToStartOfText().moveToStart()\n}\n\nChanges.select = (change, properties, options = {}) => {\n  properties = Selection.createProperties(properties)\n  const { snapshot = false } = options\n  const { value } = change\n  const { document, selection } = value\n  const props = {}\n  let next = selection.setProperties(properties)\n  next = document.resolveSelection(next)\n\n  // Re-compute the properties, to ensure that we get their normalized values.\n  properties = pick(next, Object.keys(properties))\n\n  // Remove any properties that are already equal to the current selection. And\n  // create a dictionary of the previous values for all of the properties that\n  // are being changed, for the inverse operation.\n  for (const k in properties) {\n    if (snapshot === true || !is(properties[k], selection[k])) {\n      props[k] = properties[k]\n    }\n  }\n\n  // If the selection moves, clear any marks, unless the new selection\n  // properties change the marks in some way.\n  if (selection.marks && !props.marks && (props.anchor || props.focus)) {\n    props.marks = null\n  }\n\n  // If there are no new properties to set, abort to avoid extra operations.\n  if (Object.keys(props).length === 0) {\n    return\n  }\n\n  change.applyOperation(\n    {\n      type: 'set_selection',\n      value,\n      properties: props,\n      selection: selection.toJSON(),\n    },\n    snapshot ? { skip: false, merge: false } : {}\n  )\n}\n\nChanges.setAnchor = (change, ...args) => {\n  change.call(proxy, 'setAnchor', ...args)\n}\n\nChanges.setEnd = (change, ...args) => {\n  change.call(proxy, 'setEnd', ...args)\n}\n\nChanges.setFocus = (change, ...args) => {\n  change.call(proxy, 'setFocus', ...args)\n}\n\nChanges.setStart = (change, ...args) => {\n  change.call(proxy, 'setStart', ...args)\n}\n\nChanges.snapshotSelection = change => {\n  change.select(change.value.selection, { snapshot: true })\n}\n\n/**\n * Helpers.\n */\n\nfunction proxy(change, method, ...args) {\n  const range = change.value.selection[method](...args)\n  change.select(range)\n}\n\nfunction pointEdgeObject(change, point, edge, object) {\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const Edge = edge.slice(0, 1).toUpperCase() + edge.slice(1)\n  const Object = object.slice(0, 1).toUpperCase() + object.slice(1)\n  const method = `move${Point}To${Edge}OfNode`\n  const getNode = object == 'text' ? 'getNode' : `getClosest${Object}`\n  const { value } = change\n  const { document, selection } = value\n  const p = selection[point]\n  const node = document[getNode](p.key)\n  if (!node) return\n  change[method](node)\n}\n\nfunction pointEdgeSideObject(change, point, edge, side, object) {\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const Edge = edge.slice(0, 1).toUpperCase() + edge.slice(1)\n  const Side = side.slice(0, 1).toUpperCase() + side.slice(1)\n  const Object = object.slice(0, 1).toUpperCase() + object.slice(1)\n  const method = `move${Point}To${Edge}OfNode`\n  const getNode = object == 'text' ? 'getNode' : `getClosest${Object}`\n  const getDirectionNode = `get${Side}${Object}`\n  const { value } = change\n  const { document, selection } = value\n  const p = selection[point]\n  const node = document[getNode](p.key)\n  if (!node) return\n  const target = document[getDirectionNode](node.key)\n  if (!target) return\n  change[method](target)\n}\n\nfunction pointBackward(change, point, n = 1) {\n  if (n === 0) return\n  if (n < 0) return pointForward(change, point, -n)\n\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const { value } = change\n  const { document, selection, schema } = value\n  const p = selection[point]\n  const hasVoidParent = document.hasVoidParent(p.path, schema)\n\n  // what is this?\n  if (!hasVoidParent && p.offset - n >= 0) {\n    const range = selection[`move${Point}Backward`](n)\n    change.select(range)\n    return\n  }\n\n  const previous = document.getPreviousText(p.path)\n  if (!previous) return\n\n  const block = document.getClosestBlock(p.path)\n  const isInBlock = block.hasNode(previous.key)\n  const isPreviousInVoid =\n    previous && document.hasVoidParent(previous.key, schema)\n  change[`move${Point}ToEndOfNode`](previous)\n\n  // when is this called?\n  if (!hasVoidParent && !isPreviousInVoid && isInBlock) {\n    const range = change.value.selection[`move${Point}Backward`](n)\n    change.select(range)\n  }\n}\n\nfunction pointForward(change, point, n = 1) {\n  if (n === 0) return\n  if (n < 0) return pointBackward(change, point, -n)\n\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const { value } = change\n  const { document, selection, schema } = value\n  const p = selection[point]\n  const text = document.getNode(p.path)\n  const hasVoidParent = document.hasVoidParent(p.path, schema)\n\n  // what is this?\n  if (!hasVoidParent && p.offset + n <= text.text.length) {\n    const range = selection[`move${Point}Forward`](n)\n    change.select(range)\n    return\n  }\n\n  const next = document.getNextText(p.path)\n  if (!next) return\n\n  const block = document.getClosestBlock(p.path)\n  const isInBlock = block.hasNode(next.key)\n  const isNextInVoid = document.hasVoidParent(next.key, schema)\n  change[`move${Point}ToStartOfNode`](next)\n\n  // when is this called?\n  if (!hasVoidParent && !isNextInVoid && isInBlock) {\n    const range = change.value.selection[`move${Point}Forward`](n)\n    change.select(range)\n  }\n}\n\nexport default Changes\n","import Debug from 'debug'\nimport isPlainObject from 'is-plain-object'\nimport { List, Record, Stack } from 'immutable'\n\nimport MODEL_TYPES, { isType } from '../constants/model-types'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:history')\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  redos: new Stack(),\n  undos: new Stack(),\n}\n\n/**\n * History.\n *\n * @type {History}\n */\n\nclass History extends Record(DEFAULTS) {\n  /**\n   * Create a new `History` with `attrs`.\n   *\n   * @param {Object|History} attrs\n   * @return {History}\n   */\n\n  static create(attrs = {}) {\n    if (History.isHistory(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return History.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`History.create\\` only accepts objects or histories, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Operations` from `operations`.\n   *\n   * @param {Array<Object>|List<Object>} operations\n   * @return {List<Object>}\n   */\n\n  static createOperationsList(operations = []) {\n    if (List.isList(operations)) {\n      return operations\n    }\n\n    if (Array.isArray(operations)) {\n      return new List(operations)\n    }\n\n    throw new Error(\n      `\\`History.createList\\` only accepts arrays or lists, but you passed it: ${operations}`\n    )\n  }\n\n  /**\n   * Create a `History` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {History}\n   */\n\n  static fromJSON(object) {\n    const { redos = [], undos = [] } = object\n\n    const history = new History({\n      redos: new Stack(redos.map(this.createOperationsList)),\n      undos: new Stack(undos.map(this.createOperationsList)),\n    })\n\n    return history\n  }\n\n  /**\n   * Check if `any` is a `History`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isHistory = isType.bind(null, 'HISTORY')\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'history'\n  }\n\n  /**\n   * Save an `operation` into the history.\n   *\n   * @param {Object} operation\n   * @param {Object} options\n   * @return {History}\n   */\n\n  save(operation, options = {}) {\n    let history = this\n    let { undos, redos } = history\n    let { merge, skip } = options\n\n    if (skip) {\n      return history\n    }\n\n    const prevBatch = undos.peek()\n    const prevOperation = prevBatch && prevBatch.last()\n\n    if (merge == null) {\n      merge = shouldMerge(operation, prevOperation)\n    }\n\n    debug('save', { operation, merge })\n\n    // If the `merge` flag is true, add the operation to the previous batch.\n    if (merge && prevBatch) {\n      const batch = prevBatch.push(operation)\n      undos = undos.pop()\n      undos = undos.push(batch)\n    } else {\n      // Otherwise, create a new batch with the operation.\n      const batch = new List([operation])\n      undos = undos.push(batch)\n    }\n\n    // Constrain the history to 100 entries for memory's sake.\n    if (undos.size > 100) {\n      undos = undos.take(100)\n    }\n\n    // Clear the redos and update the history.\n    redos = redos.clear()\n    history = history.set('undos', undos).set('redos', redos)\n    return history\n  }\n\n  /**\n   * Return a JSON representation of the history.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      redos: this.redos.toJSON(),\n      undos: this.undos.toJSON(),\n    }\n\n    return object\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nHistory.prototype[MODEL_TYPES.HISTORY] = true\n\n/**\n * Check whether to merge a new operation `o` into the previous operation `p`.\n *\n * @param {Object} o\n * @param {Object} p\n * @return {Boolean}\n */\n\nfunction shouldMerge(o, p) {\n  if (!p) return false\n\n  const merge =\n    (o.type == 'set_selection' && p.type == 'set_selection') ||\n    (o.type == 'insert_text' &&\n      p.type == 'insert_text' &&\n      o.offset == p.offset + p.text.length &&\n      o.path.equals(p.path)) ||\n    (o.type == 'remove_text' &&\n      p.type == 'remove_text' &&\n      o.offset + o.text.length == p.offset &&\n      o.path.equals(p.path))\n\n  return merge\n}\n\n/**\n * Export.\n *\n * @type {History}\n */\n\nexport default History\n","import { Record } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport memoize from '../utils/memoize'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  plugins: [],\n}\n\n/**\n * Stack.\n *\n * @type {Stack}\n */\n\nclass Stack extends Record(DEFAULTS) {\n  /**\n   * Constructor.\n   *\n   * @param {Object} attrs\n   */\n\n  static create(attrs = {}) {\n    const { plugins = [] } = attrs\n    const stack = new Stack({ plugins })\n    return stack\n  }\n\n  /**\n   * Check if `any` is a `Stack`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isStack(any) {\n    return !!(any && any[MODEL_TYPES.STACK])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'stack'\n  }\n\n  /**\n   * Get all plugins with `property`.\n   *\n   * @param {String} property\n   * @return {Array}\n   */\n\n  getPluginsWith(property) {\n    return this.plugins.filter(plugin => plugin[property] != null)\n  }\n\n  /**\n   * Iterate the plugins with `property`, returning the first non-null value.\n   *\n   * @param {String} property\n   * @param {Any} ...args\n   */\n\n  find(property, ...args) {\n    const plugins = this.getPluginsWith(property)\n\n    for (const plugin of plugins) {\n      const ret = plugin[property](...args)\n      if (ret != null) return ret\n    }\n  }\n\n  /**\n   * Iterate the plugins with `property`, returning all the non-null values.\n   *\n   * @param {String} property\n   * @param {Any} ...args\n   * @return {Array}\n   */\n\n  map(property, ...args) {\n    const plugins = this.getPluginsWith(property)\n    const array = []\n\n    for (const plugin of plugins) {\n      const ret = plugin[property](...args)\n      if (ret != null) array.push(ret)\n    }\n\n    return array\n  }\n\n  /**\n   * Iterate the plugins with `property`, breaking on any a non-null values.\n   *\n   * @param {String} property\n   * @param {Any} ...args\n   */\n\n  run(property, ...args) {\n    const plugins = this.getPluginsWith(property)\n\n    for (const plugin of plugins) {\n      const ret = plugin[property](...args)\n      if (ret != null) return\n    }\n  }\n\n  /**\n   * Iterate the plugins with `property`, reducing to a set of React children.\n   *\n   * @param {String} property\n   * @param {Object} props\n   * @param {Any} ...args\n   */\n\n  render(property, props, ...args) {\n    const plugins = this.getPluginsWith(property)\n    return plugins.reduceRight((children, plugin) => {\n      if (!plugin[property]) return children\n      const ret = plugin[property](props, ...args)\n      if (ret == null) return children\n      props.children = ret\n      return ret\n    }, props.children === undefined ? null : props.children)\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nStack.prototype[MODEL_TYPES.STACK] = true\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Stack.prototype, ['getPluginsWith'])\n\n/**\n * Export.\n *\n * @type {Stack}\n */\n\nexport default Stack\n","/**\n * Define a Slate error.\n *\n * @type {SlateError}\n */\n\nclass SlateError extends Error {\n  constructor(code, attrs = {}) {\n    super(code)\n    this.code = code\n\n    for (const key in attrs) {\n      this[key] = attrs[key]\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = new Error().stack\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {SlateError}\n */\n\nexport default SlateError\n","import Debug from 'debug'\nimport isPlainObject from 'is-plain-object'\nimport { Record } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport Stack from './stack'\nimport Text from './text'\nimport SlateError from '../utils/slate-error'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:schema')\n\n/**\n * Define the core schema rules, order-sensitive.\n *\n * @type {Array}\n */\n\nconst CORE_RULES = [\n  // Only allow block nodes in documents.\n  {\n    match: { object: 'document' },\n    nodes: [\n      {\n        match: { object: 'block' },\n      },\n    ],\n  },\n\n  // Only allow block nodes or inline and text nodes in blocks.\n  {\n    match: {\n      object: 'block',\n      first: { object: 'block' },\n    },\n    nodes: [\n      {\n        match: { object: 'block' },\n      },\n    ],\n  },\n  {\n    match: {\n      object: 'block',\n      first: [{ object: 'inline' }, { object: 'text' }],\n    },\n    nodes: [\n      {\n        match: [{ object: 'inline' }, { object: 'text' }],\n      },\n    ],\n  },\n\n  // Only allow inline and text nodes in inlines.\n  {\n    match: { object: 'inline' },\n    nodes: [{ match: [{ object: 'inline' }, { object: 'text' }] }],\n  },\n\n  // Ensure that block and inline nodes have at least one text child.\n  {\n    match: [{ object: 'block' }, { object: 'inline' }],\n    nodes: [{ min: 1 }],\n    normalize: (change, error) => {\n      const { code, node } = error\n      if (code !== 'child_required') return\n      change.insertNodeByKey(node.key, 0, Text.create(), { normalize: false })\n    },\n  },\n\n  // Ensure that inline nodes are surrounded by text nodes.\n  {\n    match: { object: 'block' },\n    first: [{ object: 'block' }, { object: 'text' }],\n    last: [{ object: 'block' }, { object: 'text' }],\n    normalize: (change, error) => {\n      const { code, node } = error\n      const text = Text.create()\n      let i\n\n      if (code === 'first_child_object_invalid') {\n        i = 0\n      } else if (code === 'last_child_object_invalid') {\n        i = node.nodes.size\n      } else {\n        return\n      }\n\n      change.insertNodeByKey(node.key, i, text, { normalize: false })\n    },\n  },\n  {\n    match: { object: 'inline' },\n    first: [{ object: 'block' }, { object: 'text' }],\n    last: [{ object: 'block' }, { object: 'text' }],\n    previous: [{ object: 'block' }, { object: 'text' }],\n    next: [{ object: 'block' }, { object: 'text' }],\n    normalize: (change, error) => {\n      const { code, node, index } = error\n      const text = Text.create()\n      let i\n\n      if (code === 'first_child_object_invalid') {\n        i = 0\n      } else if (code === 'last_child_object_invalid') {\n        i = node.nodes.size\n      } else if (code === 'previous_sibling_object_invalid') {\n        i = index\n      } else if (code === 'next_sibling_object_invalid') {\n        i = index + 1\n      } else {\n        return\n      }\n\n      change.insertNodeByKey(node.key, i, text, { normalize: false })\n    },\n  },\n\n  // Merge adjacent text nodes.\n  {\n    match: { object: 'text' },\n    next: [{ object: 'block' }, { object: 'inline' }],\n    normalize: (change, error) => {\n      const { code, next } = error\n      if (code !== 'next_sibling_object_invalid') return\n      change.mergeNodeByKey(next.key, { normalize: false })\n    },\n  },\n]\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  stack: Stack.create(),\n  rules: [],\n}\n\n/**\n * Schema.\n *\n * @type {Schema}\n */\n\nclass Schema extends Record(DEFAULTS) {\n  /**\n   * Create a new `Schema` with `attrs`.\n   *\n   * @param {Object|Schema} attrs\n   * @return {Schema}\n   */\n\n  static create(attrs = {}) {\n    if (Schema.isSchema(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Schema.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Schema.create\\` only accepts objects or schemas, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Schema` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Schema}\n   */\n\n  static fromJSON(object) {\n    if (Schema.isSchema(object)) {\n      return object\n    }\n\n    const plugins = object.plugins ? object.plugins : [{ schema: object }]\n    let rules = [...CORE_RULES]\n\n    for (const plugin of plugins) {\n      const { schema = {} } = plugin\n      const { blocks = {}, inlines = {}, marks = {} } = schema\n\n      if (schema.rules) {\n        rules = rules.concat(schema.rules)\n      }\n\n      if (schema.document) {\n        rules.push({\n          match: [{ object: 'document' }],\n          ...schema.document,\n        })\n      }\n\n      for (const key in blocks) {\n        rules.push({\n          match: [{ object: 'block', type: key }],\n          ...blocks[key],\n        })\n      }\n\n      for (const key in inlines) {\n        rules.push({\n          match: [{ object: 'inline', type: key }],\n          ...inlines[key],\n        })\n      }\n\n      for (const key in marks) {\n        rules.push({\n          match: [{ object: 'mark', type: key }],\n          ...marks[key],\n        })\n      }\n    }\n\n    const stack = Stack.create({ plugins })\n    const ret = new Schema({ stack, rules })\n    return ret\n  }\n\n  /**\n   * Check if `any` is a `Schema`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isSchema(any) {\n    return !!(any && any[MODEL_TYPES.SCHEMA])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'schema'\n  }\n\n  /**\n   * Get the schema rules for a `node`.\n   *\n   * @param {Node} node\n   * @return {Array}\n   */\n\n  getNodeRules(node) {\n    const rules = this.rules.filter(r => testRules(node, r.match))\n    return rules\n  }\n\n  /**\n   * Validate a `node` with the schema, returning an error if it's invalid.\n   *\n   * @param {Node} node\n   * @return {Error|Void}\n   */\n\n  validateNode(node) {\n    const rules = this.getNodeRules(node)\n    const failure = validateRules(node, rules, this.rules, { every: true })\n    if (!failure) return\n    const error = new SlateError(failure.code, failure)\n    return error\n  }\n\n  /**\n   * Test whether a `node` is valid against the schema.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  testNode(node) {\n    const error = this.validateNode(node)\n    return !error\n  }\n\n  /**\n   * Assert that a `node` is valid against the schema.\n   *\n   * @param {Node} node\n   * @throws\n   */\n\n  assertNode(node) {\n    const error = this.validateNode(node)\n    if (error) throw error\n  }\n\n  /**\n   * Normalize a `node` with the schema, returning a function that will fix the\n   * invalid node, or void if the node is valid.\n   *\n   * @param {Node} node\n   * @return {Function|Void}\n   */\n\n  normalizeNode(node) {\n    const ret = this.stack.find('normalizeNode', node)\n    if (ret) return ret\n    if (node.object == 'text') return\n\n    const error = this.validateNode(node)\n    if (!error) return\n\n    return change => {\n      debug(`normalizing`, { error })\n      const { rule } = error\n      const { size } = change.operations\n\n      // First run the user-provided `normalize` function if one exists...\n      if (rule.normalize) {\n        rule.normalize(change, error)\n      }\n\n      // If the `normalize` function did not add any operations to the change\n      // object, it can't have normalized, so run the default one.\n      if (change.operations.size === size) {\n        defaultNormalize(change, error)\n      }\n    }\n  }\n\n  /**\n   * Check if a mark is void.\n   *\n   * @param {Mark}\n   * @return {Boolean}\n   */\n\n  isAtomic(mark) {\n    const rule = this.rules.find(\n      r => 'isAtomic' in r && testRules(mark, r.match)\n    )\n\n    return rule ? rule.isAtomic : false\n  }\n\n  /**\n   * Check if a node is void.\n   *\n   * @param {Node}\n   * @return {Boolean}\n   */\n\n  isVoid(node) {\n    const rule = this.rules.find(r => 'isVoid' in r && testRules(node, r.match))\n    return rule ? rule.isVoid : false\n  }\n\n  /**\n   * Return a JSON representation of the schema.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      rules: this.rules,\n    }\n\n    return object\n  }\n}\n\n/**\n * Normalize an invalid value with `error` with default remedies.\n *\n * @param {Change} change\n * @param {SlateError} error\n */\n\nfunction defaultNormalize(change, error) {\n  const { code, node, child, next, previous, key, mark } = error\n\n  switch (code) {\n    case 'child_object_invalid':\n    case 'child_type_invalid':\n    case 'child_unknown':\n    case 'first_child_object_invalid':\n    case 'first_child_type_invalid':\n    case 'last_child_object_invalid':\n    case 'last_child_type_invalid': {\n      return child.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? change.removeNodeByKey(node.key, { normalize: false })\n        : change.removeNodeByKey(child.key, { normalize: false })\n    }\n\n    case 'previous_sibling_object_invalid':\n    case 'previous_sibling_type_invalid': {\n      return previous.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? change.removeNodeByKey(node.key, { normalize: false })\n        : change.removeNodeByKey(previous.key, { normalize: false })\n    }\n\n    case 'next_sibling_object_invalid':\n    case 'next_sibling_type_invalid': {\n      return next.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? change.removeNodeByKey(node.key, { normalize: false })\n        : change.removeNodeByKey(next.key, { normalize: false })\n    }\n\n    case 'child_required':\n    case 'node_text_invalid':\n    case 'parent_object_invalid':\n    case 'parent_type_invalid': {\n      return node.object === 'document'\n        ? node.nodes.forEach(n =>\n            change.removeNodeByKey(n.key, { normalize: false })\n          )\n        : change.removeNodeByKey(node.key, { normalize: false })\n    }\n\n    case 'node_data_invalid': {\n      return node.data.get(key) === undefined && node.object !== 'document'\n        ? change.removeNodeByKey(node.key, { normalize: false })\n        : change.setNodeByKey(\n            node.key,\n            { data: node.data.delete(key) },\n            { normalize: false }\n          )\n    }\n\n    case 'node_mark_invalid': {\n      return node.getTexts().forEach(t =>\n        change.removeMarkByKey(t.key, 0, t.text.length, mark, {\n          normalize: false,\n        })\n      )\n    }\n\n    default: {\n      return change.removeNodeByKey(node.key, { normalize: false })\n    }\n  }\n}\n\n/**\n * Check that an `object` matches one of a set of `rules`.\n *\n * @param {Mixed} object\n * @param {Object|Array} rules\n * @return {Boolean}\n */\n\nfunction testRules(object, rules) {\n  const error = validateRules(object, rules)\n  return !error\n}\n\n/**\n * Validate that a `object` matches a `rule` object or array.\n *\n * @param {Mixed} object\n * @param {Object|Array} rule\n * @param {Array|Void} rules\n * @return {Error|Void}\n */\n\nfunction validateRules(object, rule, rules, options = {}) {\n  const { every = false } = options\n\n  if (Array.isArray(rule)) {\n    const array = rule.length ? rule : [{}]\n    let first\n\n    for (const r of array) {\n      const error = validateRules(object, r, rules)\n      first = first || error\n      if (every && error) return error\n      if (!every && !error) return\n    }\n\n    return first\n  }\n\n  const error =\n    validateObject(object, rule) ||\n    validateType(object, rule) ||\n    validateData(object, rule) ||\n    validateMarks(object, rule) ||\n    validateText(object, rule) ||\n    validateFirst(object, rule) ||\n    validateLast(object, rule) ||\n    validateNodes(object, rule, rules)\n\n  return error\n}\n\nfunction validateObject(node, rule) {\n  if (rule.object == null) return\n  if (rule.object === node.object) return\n  if (typeof rule.object === 'function' && rule.object(node.object)) return\n  return fail('node_object_invalid', { rule, node })\n}\n\nfunction validateType(node, rule) {\n  if (rule.type == null) return\n  if (rule.type === node.type) return\n  if (typeof rule.type === 'function' && rule.type(node.type)) return\n  return fail('node_type_invalid', { rule, node })\n}\n\nfunction validateData(node, rule) {\n  if (rule.data == null) return\n  if (node.data == null) return\n\n  if (typeof rule.data === 'function') {\n    if (rule.data(node.data)) return\n    return fail('node_data_invalid', { rule, node })\n  }\n\n  for (const key in rule.data) {\n    const fn = rule.data[key]\n    const value = node.data && node.data.get(key)\n    const valid = typeof fn === 'function' ? fn(value) : fn === value\n    if (valid) continue\n    return fail('node_data_invalid', { rule, node, key, value })\n  }\n}\n\nfunction validateMarks(node, rule) {\n  if (rule.marks == null) return\n  const marks = node.getMarks().toArray()\n\n  for (const mark of marks) {\n    const valid = rule.marks.some(\n      def =>\n        typeof def.type === 'function'\n          ? def.type(mark.type)\n          : def.type === mark.type\n    )\n    if (valid) continue\n    return fail('node_mark_invalid', { rule, node, mark })\n  }\n}\n\nfunction validateText(node, rule) {\n  if (rule.text == null) return\n  const { text } = node\n  const valid =\n    typeof rule.text === 'function' ? rule.text(text) : rule.text.test(text)\n  if (valid) return\n  return fail('node_text_invalid', { rule, node, text })\n}\n\nfunction validateFirst(node, rule) {\n  if (rule.first == null) return\n  const first = node.nodes.first()\n  if (!first) return\n  const error = validateRules(first, rule.first)\n  if (!error) return\n  error.rule = rule\n  error.node = node\n  error.child = first\n  error.code = error.code.replace('node_', 'first_child_')\n  return error\n}\n\nfunction validateLast(node, rule) {\n  if (rule.last == null) return\n  const last = node.nodes.last()\n  if (!last) return\n  const error = validateRules(last, rule.last)\n  if (!error) return\n  error.rule = rule\n  error.node = node\n  error.child = last\n  error.code = error.code.replace('node_', 'last_child_')\n  return error\n}\n\nfunction validateNodes(node, rule, rules = []) {\n  if (node.nodes == null) return\n\n  const children = node.nodes.toArray()\n  const defs = rule.nodes != null ? rule.nodes.slice() : []\n  let offset\n  let min\n  let index\n  let def\n  let max\n  let child\n  let previous\n  let next\n\n  function nextDef() {\n    offset = offset == null ? null : 0\n    def = defs.shift()\n    min = def && def.min\n    max = def && def.max\n    return !!def\n  }\n\n  function nextChild() {\n    index = index == null ? 0 : index + 1\n    offset = offset == null ? 0 : offset + 1\n    previous = child\n    child = children[index]\n    next = children[index + 1]\n    if (max != null && offset == max) nextDef()\n    return !!child\n  }\n\n  function rewind() {\n    offset -= 1\n    index -= 1\n  }\n\n  if (rule.nodes != null) {\n    nextDef()\n  }\n\n  while (nextChild()) {\n    const err =\n      validateParent(node, child, rules) ||\n      validatePrevious(node, child, previous, index, rules) ||\n      validateNext(node, child, next, index, rules)\n\n    if (err) return err\n\n    if (rule.nodes != null) {\n      if (!def) {\n        return fail('child_unknown', { rule, node, child, index })\n      }\n\n      if (def.match) {\n        const error = validateRules(child, def.match)\n\n        if (error && offset >= min && nextDef()) {\n          rewind()\n          continue\n        }\n\n        if (error) {\n          error.rule = rule\n          error.node = node\n          error.child = child\n          error.index = index\n          error.code = error.code.replace('node_', 'child_')\n          return error\n        }\n      }\n    }\n  }\n\n  if (rule.nodes != null) {\n    while (min != null) {\n      if (offset < min) {\n        return fail('child_required', { rule, node, index })\n      }\n\n      nextDef()\n    }\n  }\n}\n\nfunction validateParent(node, child, rules) {\n  for (const rule of rules) {\n    if (rule.parent == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(node, rule.parent)\n    if (!error) continue\n\n    error.rule = rule\n    error.parent = node\n    error.node = child\n    error.code = error.code.replace('node_', 'parent_')\n    return error\n  }\n}\n\nfunction validatePrevious(node, child, previous, index, rules) {\n  if (!previous) return\n\n  for (const rule of rules) {\n    if (rule.previous == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(previous, rule.previous)\n    if (!error) continue\n\n    error.rule = rule\n    error.node = node\n    error.child = child\n    error.index = index\n    error.previous = previous\n    error.code = error.code.replace('node_', 'previous_sibling_')\n    return error\n  }\n}\n\nfunction validateNext(node, child, next, index, rules) {\n  if (!next) return\n\n  for (const rule of rules) {\n    if (rule.next == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(next, rule.next)\n    if (!error) continue\n\n    error.rule = rule\n    error.node = node\n    error.child = child\n    error.index = index\n    error.next = next\n    error.code = error.code.replace('node_', 'next_sibling_')\n    return error\n  }\n}\n\n/**\n * Create an interim failure object with `code` and `attrs`.\n *\n * @param {String} code\n * @param {Object} attrs\n * @return {Object}\n */\n\nfunction fail(code, attrs) {\n  return { code, ...attrs }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nSchema.prototype[MODEL_TYPES.SCHEMA] = true\n\n/**\n * Export.\n *\n * @type {Schema}\n */\n\nexport default Schema\n","import isPlainObject from 'is-plain-object'\nimport { Record, Set, List, Map } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport PathUtils from '../utils/path-utils'\nimport Change from './change'\nimport Data from './data'\nimport Decoration from './decoration'\nimport Document from './document'\nimport History from './history'\nimport Selection from './selection'\nimport Schema from './schema'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: Map(),\n  decorations: List(),\n  document: Document.create(),\n  history: History.create(),\n  schema: Schema.create(),\n  selection: Selection.create(),\n}\n\n/**\n * Value.\n *\n * @type {Value}\n */\n\nclass Value extends Record(DEFAULTS) {\n  /**\n   * Create a new `Value` with `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @param {Object} options\n   * @return {Value}\n   */\n\n  static create(attrs = {}, options = {}) {\n    if (Value.isValue(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Value.fromJSON(attrs, options)\n    }\n\n    throw new Error(\n      `\\`Value.create\\` only accepts objects or values, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable value properties from `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Value.isValue(a)) {\n      return {\n        data: a.data,\n        decorations: a.decorations,\n        schema: a.schema,\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('data' in a) p.data = Data.create(a.data)\n      if ('decorations' in a)\n        p.decorations = Decoration.createList(a.decorations)\n      if ('schema' in a) p.schema = Schema.create(a.schema)\n      return p\n    }\n\n    throw new Error(\n      `\\`Value.createProperties\\` only accepts objects or values, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Value` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @param {Object} options\n   *   @property {Boolean} normalize\n   *   @property {Array} plugins\n   * @return {Value}\n   */\n\n  static fromJSON(object, options = {}) {\n    let {\n      data = {},\n      document = {},\n      selection = {},\n      schema = {},\n      history = {},\n    } = object\n\n    data = Data.fromJSON(data)\n    schema = Schema.fromJSON(schema)\n    history = History.fromJSON(history)\n    document = Document.fromJSON(document)\n    selection = document.createSelection(selection)\n\n    if (selection.isUnset) {\n      const text = document.getFirstText()\n      if (text) selection = selection.moveToStartOfNode(text)\n      selection = document.createSelection(selection)\n    }\n\n    let value = new Value({\n      data,\n      document,\n      selection,\n      schema,\n      history,\n    })\n\n    if (options.normalize !== false) {\n      const change = value.change()\n      change.withoutSaving(() => change.normalize())\n      value = change.value\n    }\n\n    return value\n  }\n\n  /**\n   * Check if a `value` is a `Value`.\n   *\n   * @param {Any} value\n   * @return {Boolean}\n   */\n\n  static isValue(value) {\n    return !!(value && value[MODEL_TYPES.VALUE])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'value'\n  }\n\n  /**\n   * Get the current start text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get startBlock() {\n    return (\n      this.selection.start.key &&\n      this.document.getClosestBlock(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get endBlock() {\n    return (\n      this.selection.end.key &&\n      this.document.getClosestBlock(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get anchorBlock() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getClosestBlock(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get focusBlock() {\n    return (\n      this.selection.focus.key &&\n      this.document.getClosestBlock(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the current start text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get startInline() {\n    return (\n      this.selection.start.key &&\n      this.document.getClosestInline(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get endInline() {\n    return (\n      this.selection.end.key &&\n      this.document.getClosestInline(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get anchorInline() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getClosestInline(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get focusInline() {\n    return (\n      this.selection.focus.key &&\n      this.document.getClosestInline(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the current start text node.\n   *\n   * @return {Text}\n   */\n\n  get startText() {\n    return (\n      this.selection.start.key &&\n      this.document.getDescendant(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end node.\n   *\n   * @return {Text}\n   */\n\n  get endText() {\n    return (\n      this.selection.end.key &&\n      this.document.getDescendant(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor node.\n   *\n   * @return {Text}\n   */\n\n  get anchorText() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getDescendant(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus node.\n   *\n   * @return {Text}\n   */\n\n  get focusText() {\n    return (\n      this.selection.focus.key &&\n      this.document.getDescendant(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the next block node.\n   *\n   * @return {Block}\n   */\n\n  get nextBlock() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextBlock(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous block node.\n   *\n   * @return {Block}\n   */\n\n  get previousBlock() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousBlock(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the next inline node.\n   *\n   * @return {Inline}\n   */\n\n  get nextInline() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextInline(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous inline node.\n   *\n   * @return {Inline}\n   */\n\n  get previousInline() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousInline(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the next text node.\n   *\n   * @return {Text}\n   */\n\n  get nextText() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextText(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous text node.\n   *\n   * @return {Text}\n   */\n\n  get previousText() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousText(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get marks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks || this.document.getMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the active marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get activeMarks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks ||\n          this.document.getActiveMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the block nodes in the current selection.\n   *\n   * @return {List<Block>}\n   */\n\n  get blocks() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getBlocksAtRange(this.selection)\n  }\n\n  /**\n   * Get the fragment of the current selection.\n   *\n   * @return {Document}\n   */\n\n  get fragment() {\n    return this.selection.isUnset\n      ? Document.create()\n      : this.document.getFragmentAtRange(this.selection)\n  }\n\n  /**\n   * Get the inline nodes in the current selection.\n   *\n   * @return {List<Inline>}\n   */\n\n  get inlines() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getInlinesAtRange(this.selection)\n  }\n\n  /**\n   * Get the text nodes in the current selection.\n   *\n   * @return {List<Text>}\n   */\n\n  get texts() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getTextsAtRange(this.selection)\n  }\n\n  /**\n   * Create a new `Change` with the current value as a starting point.\n   *\n   * @param {Object} attrs\n   * @return {Change}\n   */\n\n  change(attrs = {}) {\n    return new Change({ ...attrs, value: this })\n  }\n\n  /**\n   * Add mark to text at `offset` and `length` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Value}\n   */\n\n  addMark(path, offset, length, mark) {\n    let value = this\n    let { document } = value\n    document = document.addMark(path, offset, length, mark)\n    value = this.set('document', document)\n    return value\n  }\n\n  /**\n   * Insert a `node`.\n   *\n   * @param {List|String} path\n   * @param {Node} node\n   * @return {Value}\n   */\n\n  insertNode(path, node) {\n    let value = this\n    let { document } = value\n    document = document.insertNode(path, node)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range =>\n      range.updatePoints(point => point.setPath(null))\n    )\n\n    return value\n  }\n\n  /**\n   * Insert `text` at `offset` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {String} text\n   * @param {Set} marks\n   * @return {Value}\n   */\n\n  insertText(path, offset, text, marks) {\n    let value = this\n    let { document, schema } = value\n    document = document.insertText(path, offset, text, marks)\n    value = value.set('document', document)\n\n    // Update any ranges that were affected.\n    const node = document.assertNode(path)\n\n    value = value.mapRanges(range => {\n      const { anchor, focus, isBackward } = range\n      const isAtomic =\n        Decoration.isDecoration(range) && schema.isAtomic(range.mark)\n\n      if (\n        anchor.key === node.key &&\n        (anchor.offset > offset ||\n          (anchor.offset === offset && (!isAtomic || !isBackward)))\n      ) {\n        range = range.moveAnchorForward(text.length)\n      }\n\n      if (\n        focus.key === node.key &&\n        (focus.offset > offset ||\n          (focus.offset == offset && (!isAtomic || isBackward)))\n      ) {\n        range = range.moveFocusForward(text.length)\n      }\n\n      return range\n    })\n\n    value = value.clearAtomicRanges(node.key, offset)\n    return value\n  }\n\n  /**\n   * Merge a node backwards its previous sibling.\n   *\n   * @param {List|Key} path\n   * @return {Value}\n   */\n\n  mergeNode(path) {\n    let value = this\n    const { document } = value\n    const newDocument = document.mergeNode(path)\n    path = document.resolvePath(path)\n    const withPath = PathUtils.decrement(path)\n    const one = document.getNode(withPath)\n    const two = document.getNode(path)\n    value = value.set('document', newDocument)\n\n    value = value.mapRanges(range => {\n      if (two.object === 'text') {\n        const max = one.text.length\n\n        if (range.anchor.key === two.key) {\n          range = range.moveAnchorTo(one.key, max + range.anchor.offset)\n        }\n\n        if (range.focus.key === two.key) {\n          range = range.moveFocusTo(one.key, max + range.focus.offset)\n        }\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Move a node by `path` to `newPath`.\n   *\n   * A `newIndex` can be provided when move nodes by `key`, to account for not\n   * being able to have a key for a location in the tree that doesn't exist yet.\n   *\n   * @param {List|Key} path\n   * @param {List|Key} newPath\n   * @param {Number} newIndex\n   * @return {Value}\n   */\n\n  moveNode(path, newPath, newIndex = 0) {\n    let value = this\n    let { document } = value\n    document = document.moveNode(path, newPath, newIndex)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range =>\n      range.updatePoints(point => point.setPath(null))\n    )\n\n    return value\n  }\n\n  /**\n   * Remove mark from text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Value}\n   */\n\n  removeMark(path, offset, length, mark) {\n    let value = this\n    let { document } = value\n    document = document.removeMark(path, offset, length, mark)\n    value = this.set('document', document)\n    return value\n  }\n\n  /**\n   * Remove a node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Value}\n   */\n\n  removeNode(path) {\n    let value = this\n    let { document } = value\n    const node = document.assertNode(path)\n    const first = node.object == 'text' ? node : node.getFirstText() || node\n    const last = node.object == 'text' ? node : node.getLastText() || node\n    const prev = document.getPreviousText(first.key)\n    const next = document.getNextText(last.key)\n\n    document = document.removeNode(path)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range => {\n      const { start, end } = range\n\n      if (node.hasNode(start.key)) {\n        range = prev\n          ? range.moveStartTo(prev.key, prev.text.length)\n          : next ? range.moveStartTo(next.key, 0) : range.unset()\n      }\n\n      if (node.hasNode(end.key)) {\n        range = prev\n          ? range.moveEndTo(prev.key, prev.text.length)\n          : next ? range.moveEndTo(next.key, 0) : range.unset()\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Remove `text` at `offset` in node by `path`.\n   *\n   * @param {List|Key} path\n   * @param {Number} offset\n   * @param {String} text\n   * @return {Value}\n   */\n\n  removeText(path, offset, text) {\n    let value = this\n    let { document } = value\n    document = document.removeText(path, offset, text)\n    value = value.set('document', document)\n\n    const node = document.assertNode(path)\n    const { length } = text\n    const rangeOffset = offset + length\n\n    value = value.clearAtomicRanges(node.key, offset, offset + length)\n\n    value = value.mapRanges(range => {\n      const { anchor, focus } = range\n\n      if (anchor.key === node.key) {\n        range =\n          anchor.offset >= rangeOffset\n            ? range.moveAnchorBackward(length)\n            : anchor.offset > offset\n              ? range.moveAnchorTo(anchor.key, offset)\n              : range\n      }\n\n      if (focus.key === node.key) {\n        range =\n          focus.offset >= rangeOffset\n            ? range.moveFocusBackward(length)\n            : focus.offset > offset\n              ? range.moveFocusTo(focus.key, offset)\n              : range\n      }\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Set `properties` on a node.\n   *\n   * @param {List|String} path\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setNode(path, properties) {\n    let value = this\n    let { document } = value\n    document = document.setNode(path, properties)\n    value = value.set('document', document)\n    return value\n  }\n\n  /**\n   * Set `properties` on `mark` on text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setMark(path, offset, length, mark, properties) {\n    let value = this\n    let { document } = value\n    document = document.setMark(path, offset, length, mark, properties)\n    value = value.set('document', document)\n    return value\n  }\n\n  /**\n   * Set `properties` on the value.\n   *\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setProperties(properties) {\n    let value = this\n    const { document } = value\n    const { data, decorations, history, schema } = properties\n    const props = {}\n\n    if (data) {\n      props.data = data\n    }\n\n    if (history) {\n      props.history = history\n    }\n\n    if (schema) {\n      props.schema = schema\n    }\n\n    if (decorations) {\n      props.decorations = decorations.map(d => {\n        return d.isSet ? d : document.resolveDecoration(d)\n      })\n    }\n\n    value = value.merge(props)\n    return value\n  }\n\n  /**\n   * Set `properties` on the selection.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  setSelection(properties) {\n    let value = this\n    let { document, selection } = value\n    const next = selection.setProperties(properties)\n    selection = document.resolveSelection(next)\n    value = value.set('selection', selection)\n    return value\n  }\n\n  /**\n   * Split a node by `path` at `position` with optional `properties` to apply\n   * to the newly split node.\n   *\n   * @param {List|String} path\n   * @param {Number} position\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  splitNode(path, position, properties) {\n    let value = this\n    const { document } = value\n    const newDocument = document.splitNode(path, position, properties)\n    const node = document.assertNode(path)\n    value = value.set('document', newDocument)\n\n    value = value.mapRanges(range => {\n      const next = newDocument.getNextText(node.key)\n      const { start, end } = range\n\n      // If the start was after the split, move it to the next node.\n      if (node.key === start.key && position <= start.offset) {\n        range = range.moveStartTo(next.key, start.offset - position)\n      }\n\n      // If the end was after the split, move it to the next node.\n      if (node.key === end.key && position <= end.offset) {\n        range = range.moveEndTo(next.key, end.offset - position)\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Map all range objects to apply adjustments with an `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Value}\n   */\n\n  mapRanges(iterator) {\n    let value = this\n    const { document, selection, decorations } = value\n\n    let sel = selection.isSet ? iterator(selection) : selection\n    if (!sel) sel = selection.unset()\n    if (sel !== selection) sel = document.createSelection(sel)\n    value = value.set('selection', sel)\n\n    let decs = decorations.map(decoration => {\n      let n = decoration.isSet ? iterator(decoration) : decoration\n      if (n && n !== decoration) n = document.createDecoration(n)\n      return n\n    })\n\n    decs = decs.filter(decoration => !!decoration)\n    value = value.set('decorations', decs)\n    return value\n  }\n\n  /**\n   * Remove any atomic ranges inside a `key`, `offset` and `length`.\n   *\n   * @param {String} key\n   * @param {Number} from\n   * @param {Number?} to\n   * @return {Value}\n   */\n\n  clearAtomicRanges(key, from, to = null) {\n    let value = this\n    const { schema } = value\n\n    value = this.mapRanges(range => {\n      if (!Decoration.isDecoration(range)) return range\n      const { start, end, mark } = range\n      const isAtomic = schema.isAtomic(mark)\n      if (!isAtomic) return range\n      if (start.key !== key) return range\n\n      if (start.offset < from && (end.key !== key || end.offset > from)) {\n        return null\n      }\n\n      if (\n        to != null &&\n        start.offset < to &&\n        (end.key !== key || end.offset > to)\n      ) {\n        return null\n      }\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Return a JSON representation of the value.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      document: this.document.toJSON(options),\n    }\n\n    if (options.preserveData) {\n      object.data = this.data.toJSON(options)\n    }\n\n    if (options.preserveDecorations) {\n      object.decorations = this.decorations\n        .toArray()\n        .map(d => d.toJSON(options))\n    }\n\n    if (options.preserveHistory) {\n      object.history = this.history.toJSON(options)\n    }\n\n    if (options.preserveSelection) {\n      object.selection = this.selection.toJSON(options)\n    }\n\n    if (options.preserveSchema) {\n      object.schema = this.schema.toJSON(options)\n    }\n\n    return object\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nValue.prototype[MODEL_TYPES.VALUE] = true\n\n/**\n * Export.\n */\n\nexport default Value\n","import Value from '../models/value'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Set `properties` on the value.\n *\n * @param {Change} change\n * @param {Object|Value} properties\n */\n\nChanges.setValue = (change, properties) => {\n  properties = Value.createProperties(properties)\n  const { value } = change\n\n  change.applyOperation({\n    type: 'set_value',\n    properties,\n    value,\n  })\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import AtCurrentRange from './at-current-range'\nimport AtRange from './at-range'\nimport ByPath from './by-path'\nimport OnHistory from './on-history'\nimport OnSelection from './on-selection'\nimport OnValue from './on-value'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  ...AtCurrentRange,\n  ...AtRange,\n  ...ByPath,\n  ...OnHistory,\n  ...OnSelection,\n  ...OnValue,\n}\n","import Debug from 'debug'\n\nimport Operation from '../models/operation'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:apply')\n\n/**\n * Apply an `op` to a `value`.\n *\n * @param {Value} value\n * @param {Object|Operation} op\n * @return {Value} value\n */\n\nfunction applyOperation(value, op) {\n  op = Operation.create(op)\n  const { type } = op\n  debug(type, op)\n\n  switch (type) {\n    case 'add_mark': {\n      const { path, offset, length, mark } = op\n      const next = value.addMark(path, offset, length, mark)\n      return next\n    }\n\n    case 'insert_node': {\n      const { path, node } = op\n      const next = value.insertNode(path, node)\n      return next\n    }\n\n    case 'insert_text': {\n      const { path, offset, text, marks } = op\n      const next = value.insertText(path, offset, text, marks)\n      return next\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const next = value.mergeNode(path)\n      return next\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n      const next = value.moveNode(path, newPath)\n      return next\n    }\n\n    case 'remove_mark': {\n      const { path, offset, length, mark } = op\n      const next = value.removeMark(path, offset, length, mark)\n      return next\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const next = value.removeNode(path)\n      return next\n    }\n\n    case 'remove_text': {\n      const { path, offset, text } = op\n      const next = value.removeText(path, offset, text)\n      return next\n    }\n\n    case 'set_mark': {\n      const { path, offset, length, mark, properties } = op\n      const next = value.setMark(path, offset, length, mark, properties)\n      return next\n    }\n\n    case 'set_node': {\n      const { path, properties } = op\n      const next = value.setNode(path, properties)\n      return next\n    }\n\n    case 'set_selection': {\n      const { properties } = op\n      const next = value.setSelection(properties)\n      return next\n    }\n\n    case 'set_value': {\n      const { properties } = op\n      const next = value.setProperties(properties)\n      return next\n    }\n\n    case 'split_node': {\n      const { path, position, properties } = op\n      const next = value.splitNode(path, position, properties)\n      return next\n    }\n\n    default: {\n      throw new Error(`Unknown operation type: \"${type}\".`)\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default applyOperation\n","import Debug from 'debug'\nimport pick from 'lodash/pick'\n\nimport Operation from '../models/operation'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:invert')\n\n/**\n * Invert an `op`.\n *\n * @param {Object} op\n * @return {Object}\n */\n\nfunction invertOperation(op) {\n  op = Operation.create(op)\n  const { type } = op\n  debug(type, op)\n\n  switch (type) {\n    case 'insert_node': {\n      const inverse = op.set('type', 'remove_node')\n      return inverse\n    }\n\n    case 'remove_node': {\n      const inverse = op.set('type', 'insert_node')\n      return inverse\n    }\n\n    case 'move_node': {\n      const { newPath, path } = op\n      let inversePath = newPath\n      let inverseNewPath = path\n\n      const pathLast = path.size - 1\n      const newPathLast = newPath.size - 1\n\n      // If the node's old position was a left sibling of an ancestor of\n      // its new position, we need to adjust part of the path by -1.\n      if (\n        path.size < inversePath.size &&\n        path.slice(0, pathLast).every((e, i) => e == inversePath.get(i)) &&\n        path.last() < inversePath.get(pathLast)\n      ) {\n        inversePath = inversePath\n          .slice(0, pathLast)\n          .concat(inversePath.get(pathLast) - 1)\n          .concat(inversePath.slice(pathLast + 1, inversePath.size))\n      }\n\n      // If the node's new position is an ancestor of the old position,\n      // or a left sibling of an ancestor of its old position, we need\n      // to adjust part of the path by 1.\n      if (\n        newPath.size < inverseNewPath.size &&\n        newPath\n          .slice(0, newPathLast)\n          .every((e, i) => e == inverseNewPath.get(i)) &&\n        newPath.last() <= inverseNewPath.get(newPathLast)\n      ) {\n        inverseNewPath = inverseNewPath\n          .slice(0, newPathLast)\n          .concat(inverseNewPath.get(newPathLast) + 1)\n          .concat(inverseNewPath.slice(newPathLast + 1, inverseNewPath.size))\n      }\n\n      const inverse = op.set('path', inversePath).set('newPath', inverseNewPath)\n      return inverse\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const inversePath = PathUtils.decrement(path)\n      const inverse = op.set('type', 'split_node').set('path', inversePath)\n      return inverse\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const inversePath = PathUtils.increment(path)\n      const inverse = op.set('type', 'merge_node').set('path', inversePath)\n      return inverse\n    }\n\n    case 'set_node': {\n      const { properties, node } = op\n      const inverseNode = node.merge(properties)\n      const inverseProperties = pick(node, Object.keys(properties))\n      const inverse = op\n        .set('node', inverseNode)\n        .set('properties', inverseProperties)\n      return inverse\n    }\n\n    case 'insert_text': {\n      const inverse = op.set('type', 'remove_text')\n      return inverse\n    }\n\n    case 'remove_text': {\n      const inverse = op.set('type', 'insert_text')\n      return inverse\n    }\n\n    case 'add_mark': {\n      const inverse = op.set('type', 'remove_mark')\n      return inverse\n    }\n\n    case 'remove_mark': {\n      const inverse = op.set('type', 'add_mark')\n      return inverse\n    }\n\n    case 'set_mark': {\n      const { properties, mark } = op\n      const inverseMark = mark.merge(properties)\n      const inverseProperties = pick(mark, Object.keys(properties))\n      const inverse = op\n        .set('mark', inverseMark)\n        .set('properties', inverseProperties)\n      return inverse\n    }\n\n    case 'set_selection': {\n      const { properties, selection } = op\n      const inverseSelection = selection.merge(properties)\n      const inverseProps = pick(selection, Object.keys(properties))\n      const inverse = op\n        .set('selection', inverseSelection)\n        .set('properties', inverseProps)\n      return inverse\n    }\n\n    case 'set_value': {\n      const { properties, value } = op\n      const inverseValue = value.merge(properties)\n      const inverseProperties = pick(value, Object.keys(properties))\n      const inverse = op\n        .set('value', inverseValue)\n        .set('properties', inverseProperties)\n      return inverse\n    }\n\n    default: {\n      throw new Error(`Unknown operation type: \"${type}\".`)\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default invertOperation\n","import isPlainObject from 'is-plain-object'\nimport { List, Record } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport Mark from './mark'\nimport Node from './node'\nimport PathUtils from '../utils/path-utils'\nimport Selection from './selection'\nimport Value from './value'\nimport apply from '../operations/apply'\nimport invert from '../operations/invert'\n\n/**\n * Operation attributes.\n *\n * @type {Array}\n */\n\nconst OPERATION_ATTRIBUTES = {\n  add_mark: ['value', 'path', 'offset', 'length', 'mark'],\n  insert_node: ['value', 'path', 'node'],\n  insert_text: ['value', 'path', 'offset', 'text', 'marks'],\n  merge_node: ['value', 'path', 'position', 'properties', 'target'],\n  move_node: ['value', 'path', 'newPath'],\n  remove_mark: ['value', 'path', 'offset', 'length', 'mark'],\n  remove_node: ['value', 'path', 'node'],\n  remove_text: ['value', 'path', 'offset', 'text', 'marks'],\n  set_mark: ['value', 'path', 'offset', 'length', 'mark', 'properties'],\n  set_node: ['value', 'path', 'node', 'properties'],\n  set_selection: ['value', 'selection', 'properties'],\n  set_value: ['value', 'properties'],\n  split_node: ['value', 'path', 'position', 'properties', 'target'],\n}\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  length: undefined,\n  mark: undefined,\n  marks: undefined,\n  newPath: undefined,\n  node: undefined,\n  offset: undefined,\n  path: undefined,\n  position: undefined,\n  properties: undefined,\n  selection: undefined,\n  target: undefined,\n  text: undefined,\n  type: undefined,\n  value: undefined,\n}\n\n/**\n * Operation.\n *\n * @type {Operation}\n */\n\nclass Operation extends Record(DEFAULTS) {\n  /**\n   * Create a new `Operation` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Operation} attrs\n   * @return {Operation}\n   */\n\n  static create(attrs = {}) {\n    if (Operation.isOperation(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Operation.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Operation.create\\` only accepts objects or operations, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Operations` from `elements`.\n   *\n   * @param {Array<Operation|Object>|List<Operation|Object>} elements\n   * @return {List<Operation>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Operation.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Operation.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Operation` from a JSON `object`.\n   *\n   * @param {Object|Operation} object\n   * @return {Operation}\n   */\n\n  static fromJSON(object) {\n    if (Operation.isOperation(object)) {\n      return object\n    }\n\n    const { type } = object\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n    const attrs = { type }\n\n    if (!ATTRIBUTES) {\n      throw new Error(\n        `\\`Operation.fromJSON\\` was passed an unrecognized operation type: \"${type}\"`\n      )\n    }\n\n    for (const key of ATTRIBUTES) {\n      let v = object[key]\n\n      if (v === undefined) {\n        // Skip keys for objects that should not be serialized, and are only used\n        // for providing the local-only invert behavior for the history stack.\n        if (key == 'document') continue\n        if (key == 'selection') continue\n        if (key == 'value') continue\n        if (key == 'node' && type != 'insert_node') continue\n\n        throw new Error(\n          `\\`Operation.fromJSON\\` was passed a \"${type}\" operation without the required \"${key}\" attribute.`\n        )\n      }\n\n      if (key === 'path' || key === 'newPath') {\n        v = PathUtils.create(v)\n      }\n\n      if (key === 'mark') {\n        v = Mark.create(v)\n      }\n\n      if (key === 'marks' && v != null) {\n        v = Mark.createSet(v)\n      }\n\n      if (key === 'node') {\n        v = Node.create(v)\n      }\n\n      if (key === 'selection') {\n        v = Selection.create(v)\n      }\n\n      if (key === 'value') {\n        v = Value.create(v)\n      }\n\n      if (key === 'properties' && type === 'merge_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_mark') {\n        v = Mark.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_selection') {\n        v = Selection.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_value') {\n        v = Value.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'split_node') {\n        v = Node.createProperties(v)\n      }\n\n      attrs[key] = v\n    }\n\n    const node = new Operation(attrs)\n    return node\n  }\n\n  /**\n   * Check if `any` is a `Operation`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isOperation(any) {\n    return !!(any && any[MODEL_TYPES.OPERATION])\n  }\n\n  /**\n   * Check if `any` is a list of operations.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isOperationList(any) {\n    return List.isList(any) && any.every(item => Operation.isOperation(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'operation'\n  }\n\n  /**\n   * Apply the operation to a `value`.\n   *\n   * @param {Value} value\n   * @return {Value}\n   */\n\n  apply(value) {\n    const next = apply(value, this)\n    return next\n  }\n\n  /**\n   * Invert the operation.\n   *\n   * @return {Operation}\n   */\n\n  invert() {\n    const inverted = invert(this)\n    return inverted\n  }\n\n  /**\n   * Return a JSON representation of the operation.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const { object, type } = this\n    const json = { object, type }\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n\n    for (const key of ATTRIBUTES) {\n      let value = this[key]\n\n      // Skip keys for objects that should not be serialized, and are only used\n      // for providing the local-only invert behavior for the history stack.\n      if (key == 'document') continue\n      if (key == 'selection') continue\n      if (key == 'value') continue\n      if (key == 'node' && type != 'insert_node') continue\n\n      if (key == 'mark' || key == 'marks' || key == 'node') {\n        value = value.toJSON()\n      }\n\n      if (key == 'properties' && type == 'merge_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_mark') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_selection') {\n        const v = {}\n        if ('anchor' in value) v.anchor = value.anchor.toJSON()\n        if ('focus' in value) v.focus = value.focus.toJSON()\n        if ('isFocused' in value) v.isFocused = value.isFocused\n        if ('marks' in value) v.marks = value.marks && value.marks.toJSON()\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_value') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('decorations' in value) v.decorations = value.decorations.toJS()\n        if ('schema' in value) v.schema = value.schema.toJS()\n        value = v\n      }\n\n      if (key == 'properties' && type == 'split_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      json[key] = value\n    }\n\n    return json\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nOperation.prototype[MODEL_TYPES.OPERATION] = true\n\n/**\n * Export.\n *\n * @type {Operation}\n */\n\nexport default Operation\n","import Debug from 'debug'\nimport isPlainObject from 'is-plain-object'\nimport warning from 'slate-dev-warning'\nimport { List, Map } from 'immutable'\n\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport Changes from '../changes'\nimport Operation from './operation'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:change')\n\n/**\n * Change.\n *\n * @type {Change}\n */\n\nclass Change {\n  /**\n   * Check if `any` is a `Change`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isChange = isType.bind(null, 'CHANGE')\n\n  /**\n   * Create a new `Change` with `attrs`.\n   *\n   * @param {Object} attrs\n   *   @property {Value} value\n   */\n\n  constructor(attrs) {\n    const { value } = attrs\n    this.value = value\n    this.operations = new List()\n\n    this.tmp = {\n      dirty: [],\n      merge: null,\n      normalize: true,\n      save: true,\n    }\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'change'\n  }\n\n  /**\n   * Apply an `operation` to the current value, saving the operation to the\n   * history if needed.\n   *\n   * @param {Operation|Object} operation\n   * @param {Object} options\n   * @return {Change}\n   */\n\n  applyOperation(operation, options = {}) {\n    const { operations } = this\n    let { value } = this\n    let { history } = value\n    const oldValue = value\n\n    // Add in the current `value` in case the operation was serialized.\n    if (isPlainObject(operation)) {\n      operation = { ...operation, value }\n    }\n\n    operation = Operation.create(operation)\n\n    // Default options to the change-level flags, this allows for setting\n    // specific options for all of the operations of a given change.\n    let { merge, save } = this.tmp\n\n    // If `merge` is non-commital, and this is not the first operation in a new change\n    // then we should merge.\n    if (merge == null && operations.size !== 0) {\n      merge = true\n    }\n\n    // Apply the operation to the value.\n    debug('apply', { operation, save, merge })\n    value = operation.apply(value)\n\n    // If needed, save the operation to the history.\n    if (history && save) {\n      history = history.save(operation, { merge })\n      value = value.set('history', history)\n    }\n\n    // Get the keys of the affected nodes, and mark them as dirty.\n    const keys = getDirtyKeys(operation, value, oldValue)\n    this.tmp.dirty = this.tmp.dirty.concat(keys)\n\n    // Update the mutable change object.\n    this.value = value\n    this.operations = operations.push(operation)\n    return this\n  }\n\n  /**\n   * Apply a series of `operations` to the current value.\n   *\n   * @param {Array|List} operations\n   * @param {Object} options\n   * @return {Change}\n   */\n\n  applyOperations(operations, options) {\n    operations.forEach(op => this.applyOperation(op, options))\n    return this\n  }\n\n  /**\n   * Call a change `fn` with arguments.\n   *\n   * @param {Function} fn\n   * @param {Mixed} ...args\n   * @return {Change}\n   */\n\n  call(fn, ...args) {\n    fn(this, ...args)\n    this.normalizeDirtyOperations()\n    return this\n  }\n\n  /**\n   * Normalize all of the nodes in the document from scratch.\n   *\n   * @return {Change}\n   */\n\n  normalize() {\n    const { value } = this\n    const { document } = value\n    const keys = Object.keys(document.getKeysToPathsTable())\n    this.normalizeKeys(keys)\n    return this\n  }\n\n  /**\n   * Normalize any new \"dirty\" operations that have been added to the change.\n   *\n   * @return {Change}\n   */\n\n  normalizeDirtyOperations() {\n    const { normalize, dirty } = this.tmp\n    if (!normalize) return this\n    if (!dirty.length) return this\n    this.tmp.dirty = []\n    this.normalizeKeys(dirty)\n    return this\n  }\n\n  /**\n   * Normalize a set of nodes by their `keys`.\n   *\n   * @param {Array} keys\n   * @return {Change}\n   */\n\n  normalizeKeys(keys) {\n    const { value } = this\n    const { document } = value\n\n    // TODO: if we had an `Operations.tranform` method, we could optimize this\n    // to not use keys, and instead used transformed operation paths.\n    const table = document.getKeysToPathsTable()\n    let map = Map()\n\n    // TODO: this could be optimized to not need the nested map, and instead use\n    // clever sorting to arrive at the proper depth-first normalizing.\n    keys.forEach(key => {\n      const path = table[key]\n      if (!path) return\n      if (!path.length) return\n      if (!map.hasIn(path)) map = map.setIn(path, Map())\n    })\n\n    // To avoid infinite loops, we need to defer normalization until the end.\n    this.withoutNormalizing(() => {\n      this.normalizeMapAndPath(map)\n    })\n\n    return this\n  }\n\n  /**\n   * Normalize all of the nodes in a normalization `map`, depth-first. An\n   * additional `path` argument specifics the current depth/location.\n   *\n   * @param {Map} map\n   * @param {Array} path (optional)\n   * @return {Change}\n   */\n\n  normalizeMapAndPath(map, path = []) {\n    map.forEach((m, k) => {\n      const p = [...path, k]\n      this.normalizeMapAndPath(m, p)\n    })\n\n    this.normalizePath(path)\n    return this\n  }\n\n  /**\n   * Normalize the node at a specific `path`, iterating as many times as\n   * necessary until it satisfies all of the schema rules.\n   *\n   * @param {Array} path\n   * @return {Change}\n   */\n\n  normalizePath(path) {\n    const { value } = this\n    let { document, schema } = value\n    let node = document.assertNode(path)\n\n    let iterations = 0\n    const max =\n      schema.stack.plugins.length +\n      schema.rules.length +\n      (node.object === 'text' ? 1 : node.nodes.size)\n\n    const iterate = () => {\n      const fn = node.normalize(schema)\n      if (!fn) return\n\n      // Run the normalize `fn` to fix the node.\n      fn(this)\n\n      // Attempt to re-find the node by path, or by key if it has changed\n      // locations in the tree continue iterating.\n      document = this.value.document\n      const { key } = node\n      let found = document.getDescendant(path)\n\n      if (found && found.key === key) {\n        node = found\n      } else {\n        found = document.getDescendant(key)\n\n        if (found) {\n          node = found\n          path = document.getPath(key)\n        } else {\n          // If it no longer exists by key, it was removed, so abort.\n          return\n        }\n      }\n\n      // Increment the iterations counter, and check to make sure that we haven't\n      // exceeded the max. Without this check, it's easy for the `normalize`\n      // function of a schema rule to be written incorrectly and for an infinite\n      // invalid loop to occur.\n      iterations++\n\n      if (iterations > max) {\n        throw new Error(\n          'A schema rule could not be normalized after sufficient iterations. This is usually due to a `rule.normalize` or `plugin.normalizeNode` function of a schema being incorrectly written, causing an infinite loop.'\n        )\n      }\n\n      // Otherwise, iterate again.\n      iterate()\n    }\n\n    iterate()\n    return this\n  }\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, deferring\n   * normalization until after the function has finished executing.\n   *\n   * @param {Function} fn\n   * @return {Change}\n   */\n\n  withoutNormalizing(fn) {\n    const value = this.tmp.normalize\n    this.tmp.normalize = false\n    fn(this)\n    this.tmp.normalize = value\n\n    if (this.tmp.normalize) {\n      this.normalizeDirtyOperations()\n    }\n\n    return this\n  }\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without merging any of\n   * the new operations into previous save point in the history.\n   *\n   * @param {Function} fn\n   * @return {Change}\n   */\n\n  withoutMerging(fn) {\n    const value = this.tmp.merge\n    this.tmp.merge = false\n    fn(this)\n    this.tmp.merge = value\n    return this\n  }\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without saving any of\n   * their operations into the history.\n   *\n   * @param {Function} fn\n   * @return {Change}\n   */\n\n  withoutSaving(fn) {\n    const value = this.tmp.save\n    this.tmp.save = false\n    fn(this)\n    this.tmp.save = value\n    return this\n  }\n\n  /**\n   * Set an operation flag by `key` to `value`.\n   *\n   * @param {String} key\n   * @param {Any} value\n   * @return {Change}\n   */\n\n  /**\n   * Deprecated.\n   */\n\n  setOperationFlag(key, value) {\n    warning(\n      false,\n      'As of slate@0.41.0 the `change.setOperationFlag` method has been deprecated.'\n    )\n\n    this.tmp[key] = value\n    return this\n  }\n\n  getFlag(key, options = {}) {\n    warning(\n      false,\n      'As of slate@0.41.0 the `change.getFlag` method has been deprecated.'\n    )\n\n    return options[key] !== undefined ? options[key] : this.tmp[key]\n  }\n\n  unsetOperationFlag(key) {\n    warning(\n      false,\n      'As of slate@0.41.0 the `change.unsetOperationFlag` method has been deprecated.'\n    )\n\n    delete this.tmp[key]\n    return this\n  }\n\n  withoutNormalization(fn) {\n    warning(\n      false,\n      'As of slate@0.41.0 the `change.withoutNormalization` helper has been renamed to `change.withoutNormalizing`.'\n    )\n\n    return this.withoutNormalizing(fn)\n  }\n}\n\n/**\n * Get the \"dirty\" nodes's keys for a given `operation` and values.\n *\n * @param {Operation} operation\n * @param {Value} newValue\n * @param {Value} oldValue\n * @return {Array}\n */\n\nfunction getDirtyKeys(operation, newValue, oldValue) {\n  const { type, node, path, newPath } = operation\n  const newDocument = newValue.document\n  const oldDocument = oldValue.document\n\n  switch (type) {\n    case 'add_mark':\n    case 'insert_text':\n    case 'remove_mark':\n    case 'remove_text':\n    case 'set_mark':\n    case 'set_node': {\n      const target = newDocument.assertNode(path)\n      const keys = [target.key]\n      return keys\n    }\n\n    case 'insert_node': {\n      const table = node.getKeysToPathsTable()\n      const keys = Object.keys(table)\n      return keys\n    }\n\n    case 'split_node': {\n      const nextPath = PathUtils.increment(path)\n      const target = newDocument.assertNode(path)\n      const split = newDocument.assertNode(nextPath)\n      const keys = [target.key, split.key]\n      return keys\n    }\n\n    case 'merge_node': {\n      const previousPath = PathUtils.decrement(path)\n      const merged = newDocument.assertNode(previousPath)\n      const keys = [merged.key]\n      return keys\n    }\n\n    case 'move_node': {\n      const parentPath = PathUtils.lift(path)\n      const newParentPath = PathUtils.lift(newPath)\n      const oldParent = oldDocument.assertNode(parentPath)\n      const newParent = oldDocument.assertNode(newParentPath)\n      const keys = [oldParent.key, newParent.key]\n      return keys\n    }\n\n    case 'remove_node': {\n      const parentPath = PathUtils.lift(path)\n      const parent = newDocument.assertNode(parentPath)\n      const keys = [parent.key]\n      return keys\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nChange.prototype[MODEL_TYPES.CHANGE] = true\n\n/**\n * Add a change method for each of the changes.\n */\n\nObject.keys(Changes).forEach(type => {\n  Change.prototype[type] = function(...args) {\n    debug(type, { args })\n    this.call(Changes[type], ...args)\n    return this\n  }\n})\n\n/**\n * Export.\n *\n * @type {Change}\n */\n\nexport default Change\n","import mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Change from '../models/change'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport History from '../models/history'\nimport Inline from '../models/inline'\nimport Leaf from '../models/leaf'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport Operation from '../models/operation'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Schema from '../models/schema'\nimport Selection from '../models/selection'\nimport Stack from '../models/stack'\nimport Text from '../models/text'\nimport Value from '../models/value'\n\n/**\n * The interface that all Slate models implement.\n *\n * @type {Class}\n */\n\nclass CommonInterface {\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS(...args) {\n    return this.fromJSON(...args)\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(...args) {\n    return this.toJSON(...args)\n  }\n}\n\n/**\n * Mix in the common interface.\n *\n * @param {Record}\n */\n\nmixin(CommonInterface, [\n  Block,\n  Change,\n  Decoration,\n  Document,\n  History,\n  Inline,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Point,\n  Range,\n  Schema,\n  Selection,\n  Stack,\n  Text,\n  Value,\n])\n","import direction from 'direction'\nimport { List, OrderedSet, Set } from 'immutable'\n\nimport mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport Inline from '../models/inline'\nimport memoize from '../utils/memoize'\nimport PathUtils from '../utils/path-utils'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\n\n/**\n * The interface that `Document`, `Block` and `Inline` all implement, to make\n * working with the recursive node tree easier.\n *\n * @type {Class}\n */\n\nclass ElementInterface {\n  /**\n   * Add mark to text at `offset` and `length` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Node}\n   */\n\n  addMark(path, offset, length, mark) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.addMark(offset, length, mark)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Create a decoration with `properties` relative to the node.\n   *\n   * @param {Object|Decoration} properties\n   * @return {Decoration}\n   */\n\n  createDecoration(properties) {\n    properties = Decoration.createProperties(properties)\n    const decoration = this.resolveDecoration(properties)\n    return decoration\n  }\n\n  /**\n   * Create a point with `properties` relative to the node.\n   *\n   * @param {Object|Point} properties\n   * @return {Range}\n   */\n\n  createPoint(properties) {\n    properties = Point.createProperties(properties)\n    const point = this.resolvePoint(properties)\n    return point\n  }\n\n  /**\n   * Create a range with `properties` relative to the node.\n   *\n   * @param {Object|Range} properties\n   * @return {Range}\n   */\n\n  createRange(properties) {\n    properties = Range.createProperties(properties)\n    const range = this.resolveRange(properties)\n    return range\n  }\n\n  /**\n   * Create a selection with `properties` relative to the node.\n   *\n   * @param {Object|Selection} properties\n   * @return {Selection}\n   */\n\n  createSelection(properties) {\n    properties = Selection.createProperties(properties)\n    const selection = this.resolveSelection(properties)\n    return selection\n  }\n\n  /**\n   * Recursively filter all descendant nodes with `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {List<Node>}\n   */\n\n  filterDescendants(iterator) {\n    const matches = []\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) matches.push(node)\n    })\n\n    return List(matches)\n  }\n\n  /**\n   * Recursively find all descendant nodes by `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  findDescendant(iterator) {\n    let found = null\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) {\n        found = node\n        return false\n      }\n    })\n\n    return found\n  }\n\n  /**\n   * Recursively iterate over all descendant nodes with `iterator`. If the\n   * iterator returns false it will break the loop.\n   *\n   * @param {Function} iterator\n   */\n\n  forEachDescendant(iterator) {\n    let ret\n\n    this.nodes.forEach((child, i, nodes) => {\n      if (iterator(child, i, nodes) === false) {\n        ret = false\n        return false\n      }\n\n      if (child.object != 'text') {\n        ret = child.forEachDescendant(iterator)\n        return ret\n      }\n    })\n\n    return ret\n  }\n\n  /**\n   * Get a set of the active marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarksAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return Set()\n\n    if (range.isCollapsed) {\n      const { start } = range\n      return this.getMarksAtPosition(start.key, start.offset).toSet()\n    }\n\n    const { start, end } = range\n    let startKey = start.key\n    let startOffset = start.offset\n    let endKey = end.key\n    let endOffset = end.offset\n    let startText = this.getDescendant(startKey)\n\n    if (startKey !== endKey) {\n      while (startKey !== endKey && endOffset === 0) {\n        const endText = this.getPreviousText(endKey)\n        endKey = endText.key\n        endOffset = endText.text.length\n      }\n\n      while (startKey !== endKey && startOffset === startText.text.length) {\n        startText = this.getNextText(startKey)\n        startKey = startText.key\n        startOffset = 0\n      }\n    }\n\n    if (startKey === endKey) {\n      return startText.getActiveMarksBetweenOffsets(startOffset, endOffset)\n    }\n\n    const startMarks = startText.getActiveMarksBetweenOffsets(\n      startOffset,\n      startText.text.length\n    )\n    if (startMarks.size === 0) return Set()\n    const endText = this.getDescendant(endKey)\n    const endMarks = endText.getActiveMarksBetweenOffsets(0, endOffset)\n    let marks = startMarks.intersect(endMarks)\n    // If marks is already empty, the active marks is empty\n    if (marks.size === 0) return marks\n\n    let text = this.getNextText(startKey)\n\n    while (text.key !== endKey) {\n      if (text.text.length !== 0) {\n        marks = marks.intersect(text.getActiveMarks())\n        if (marks.size === 0) return Set()\n      }\n\n      text = this.getNextText(text.key)\n    }\n    return marks\n  }\n\n  /**\n   * Get a list of the ancestors of a descendant.\n   *\n   * @param {List|String} path\n   * @return {List<Node>|Null}\n   */\n\n  getAncestors(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n\n    const ancestors = []\n\n    path.forEach((p, i) => {\n      const current = path.slice(0, i)\n      const parent = this.getNode(current)\n      ancestors.push(parent)\n    })\n\n    return List(ancestors)\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocks() {\n    const array = this.getBlocksAsArray()\n    return List(array)\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocksAsArray() {\n    return this.nodes.reduce((array, child) => {\n      if (child.object != 'block') return array\n      if (!child.isLeafBlock()) return array.concat(child.getBlocksAsArray())\n      array.push(child)\n      return array\n    }, [])\n  }\n\n  /**\n   * Get the leaf block descendants in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getBlocksAtRange(range) {\n    const array = this.getBlocksAtRangeAsArray(range)\n    // Eliminate duplicates by converting to an `OrderedSet` first.\n    return List(OrderedSet(array))\n  }\n\n  /**\n   * Get the leaf block descendants in a `range` as an array\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getBlocksAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n\n    const { start, end } = range\n    const startBlock = this.getClosestBlock(start.key)\n\n    // PERF: the most common case is when the range is in a single block node,\n    // where we can avoid a lot of iterating of the tree.\n    if (start.key === end.key) return [startBlock]\n\n    const endBlock = this.getClosestBlock(end.key)\n    const blocks = this.getBlocksAsArray()\n    const startIndex = blocks.indexOf(startBlock)\n    const endIndex = blocks.indexOf(endBlock)\n    return blocks.slice(startIndex, endIndex + 1)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getBlocksByType(type) {\n    const array = this.getBlocksByTypeAsArray(type)\n    return List(array)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type` as an array\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getBlocksByTypeAsArray(type) {\n    return this.nodes.reduce((array, node) => {\n      if (node.object != 'block') {\n        return array\n      } else if (node.isLeafBlock() && node.type == type) {\n        array.push(node)\n        return array\n      } else {\n        return array.concat(node.getBlocksByTypeAsArray(type))\n      }\n    }, [])\n  }\n\n  /**\n   * Get a child node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getChild(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    const child = path.size === 1 ? this.nodes.get(path.first()) : null\n    return child\n  }\n\n  /**\n   * Get closest parent of node that matches an `iterator`.\n   *\n   * @param {List|String} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getClosest(path, iterator) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const closest = ancestors.findLast((node, ...args) => {\n      // We never want to include the top-level node.\n      if (node === this) return false\n      return iterator(node, ...args)\n    })\n\n    return closest || null\n  }\n\n  /**\n   * Get the closest block parent of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getClosestBlock(path) {\n    const closest = this.getClosest(path, n => n.object === 'block')\n    return closest\n  }\n\n  /**\n   * Get the closest inline parent of a node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getClosestInline(path) {\n    const closest = this.getClosest(path, n => n.object === 'inline')\n    return closest\n  }\n\n  /**\n   * Get the closest void parent of a node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Schema} schema\n   * @return {Node|Null}\n   */\n\n  getClosestVoid(path, schema) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const ancestor = ancestors.findLast(a => schema.isVoid(a))\n    return ancestor\n  }\n\n  /**\n   * Get the common ancestor of nodes `a` and `b`.\n   *\n   * @param {List} a\n   * @param {List} b\n   * @return {Node}\n   */\n\n  getCommonAncestor(a, b) {\n    a = this.resolvePath(a)\n    b = this.resolvePath(b)\n    if (!a || !b) return null\n\n    const path = PathUtils.relate(a, b)\n    const node = this.getNode(path)\n    return node\n  }\n\n  /**\n   * Get the decorations for the node from a `stack`.\n   *\n   * @param {Stack} stack\n   * @return {List}\n   */\n\n  getDecorations(stack) {\n    const allDecorations = stack\n      .map('decorateNode', this)\n      .map(decorations => Decoration.createList(decorations))\n    const list = List(allDecorations).flatten(true)\n    return list\n  }\n\n  /**\n   * Get the depth of a descendant, with optional `startAt`.\n   *\n   * @param {List|String} path\n   * @param {Number} startAt\n   * @return {Number|Null}\n   */\n\n  getDepth(path, startAt = 1) {\n    path = this.resolvePath(path)\n    if (!path) return null\n\n    const node = this.getNode(path)\n    const depth = node ? path.size - 1 + startAt : null\n    return depth\n  }\n\n  /**\n   * Get a descendant node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getDescendant(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n\n    const deep = path.flatMap(x => ['nodes', x])\n    const ret = this.getIn(deep)\n    return ret\n  }\n\n  /**\n   * Get a fragment of the node at a `range`.\n   *\n   * @param {Range} range\n   * @return {Document}\n   */\n\n  getFragmentAtRange(range) {\n    range = this.resolveRange(range)\n\n    if (range.isUnset) {\n      return Document.create()\n    }\n\n    const { start, end } = range\n    let node = this\n    let targetPath = end.path\n    let targetPosition = end.offset\n    let mode = 'end'\n\n    while (targetPath.size) {\n      const index = targetPath.last()\n      node = node.splitNode(targetPath, targetPosition)\n      targetPosition = index + 1\n      targetPath = PathUtils.lift(targetPath)\n\n      if (!targetPath.size && mode === 'end') {\n        targetPath = start.path\n        targetPosition = start.offset\n        mode = 'start'\n      }\n    }\n\n    const startIndex = start.path.first() + 1\n    const endIndex = end.path.first() + 2\n    const nodes = node.nodes.slice(startIndex, endIndex)\n    const fragment = Document.create({ nodes })\n    return fragment\n  }\n\n  /**\n   * Get the furthest parent of a node that matches an `iterator`.\n   *\n   * @param {Path} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getFurthest(path, iterator) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const furthest = ancestors.find((node, ...args) => {\n      // We never want to include the top-level node.\n      if (node === this) return false\n      return iterator(node, ...args)\n    })\n\n    return furthest || null\n  }\n\n  /**\n   * Get the furthest ancestor of a node.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestAncestor(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    const furthest = path.size ? this.nodes.get(path.first()) : null\n    return furthest\n  }\n\n  /**\n   * Get the furthest block parent of a node.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestBlock(path) {\n    const furthest = this.getFurthest(path, n => n.object === 'block')\n    return furthest\n  }\n\n  /**\n   * Get the furthest inline parent of a node.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestInline(path) {\n    const furthest = this.getFurthest(path, n => n.object === 'inline')\n    return furthest\n  }\n\n  /**\n   * Get the furthest ancestor of a node that has only one child.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestOnlyChildAncestor(path) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const furthest = ancestors\n      .rest()\n      .reverse()\n      .takeUntil(p => p.nodes.size > 1)\n      .last()\n\n    return furthest || null\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getInlines() {\n    const array = this.getInlinesAsArray()\n    const list = List(array)\n    return list\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node, as an array.\n   *\n   * @return {List<Node>}\n   */\n\n  getInlinesAsArray() {\n    let array = []\n\n    this.nodes.forEach(child => {\n      if (child.object == 'text') return\n\n      if (child.isLeafInline()) {\n        array.push(child)\n      } else {\n        array = array.concat(child.getInlinesAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getInlinesAtRange(range) {\n    const array = this.getInlinesAtRangeAsArray(range)\n    // Remove duplicates by converting it to an `OrderedSet` first.\n    const list = List(OrderedSet(array))\n    return list\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getInlinesAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n\n    const array = this.getTextsAtRangeAsArray(range)\n      .map(text => this.getClosestInline(text.key))\n      .filter(exists => exists)\n\n    return array\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getInlinesByType(type) {\n    const array = this.getInlinesByTypeAsArray(type)\n    const list = List(array)\n    return list\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getInlinesByTypeAsArray(type) {\n    const array = this.nodes.reduce((inlines, node) => {\n      if (node.object == 'text') {\n        return inlines\n      } else if (node.isLeafInline() && node.type == type) {\n        inlines.push(node)\n        return inlines\n      } else {\n        return inlines.concat(node.getInlinesByTypeAsArray(type))\n      }\n    }, [])\n\n    return array\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getInsertMarksAtRange(range) {\n    range = this.resolveRange(range)\n    const { start } = range\n\n    if (range.isUnset) {\n      return Set()\n    }\n\n    if (range.isCollapsed) {\n      // PERF: range is not cachable, use key and offset as proxies for cache\n      return this.getMarksAtPosition(start.key, start.offset)\n    }\n\n    const text = this.getDescendant(start.key)\n    const marks = text.getMarksAtIndex(start.offset + 1)\n    return marks\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {Set<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return Set(array)\n  }\n\n  /**\n   * Get all of the marks as an array.\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    const result = []\n\n    this.nodes.forEach(node => {\n      result.push(node.getMarksAsArray())\n    })\n\n    // PERF: use only one concat rather than multiple for speed.\n    const array = [].concat(...result)\n    return array\n  }\n\n  /**\n   * Get a set of marks in a `position`, the equivalent of a collapsed range\n   *\n   * @param {string} key\n   * @param {number} offset\n   * @return {Set}\n   */\n\n  getMarksAtPosition(key, offset) {\n    const text = this.getDescendant(key)\n    const currentMarks = text.getMarksAtIndex(offset)\n    if (offset !== 0) return currentMarks\n    const closestBlock = this.getClosestBlock(key)\n\n    if (closestBlock.text === '') {\n      // insert mark for empty block; the empty block are often created by split node or add marks in a range including empty blocks\n      return currentMarks\n    }\n\n    const previous = this.getPreviousText(key)\n    if (!previous) return Set()\n\n    if (closestBlock.hasDescendant(previous.key)) {\n      return previous.getMarksAtIndex(previous.text.length)\n    }\n\n    return currentMarks\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtRange(range) {\n    const marks = Set(this.getOrderedMarksAtRange(range))\n    return marks\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {Set<Mark>}\n   */\n\n  getMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return Set(array)\n  }\n\n  /**\n   * Get all of the marks that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getMarksByTypeAsArray(type) {\n    const array = this.nodes.reduce((memo, node) => {\n      return node.object == 'text'\n        ? memo.concat(node.getMarksAsArray().filter(m => m.type == type))\n        : memo.concat(node.getMarksByTypeAsArray(type))\n    }, [])\n\n    return array\n  }\n\n  /**\n   * Get the block node before a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getNextBlock(key) {\n    const child = this.assertDescendant(key)\n    let last\n\n    if (child.object == 'block') {\n      last = child.getLastText()\n    } else {\n      const block = this.getClosestBlock(key)\n      last = block.getLastText()\n    }\n\n    const next = this.getNextText(last.key)\n    if (!next) return null\n\n    const closest = this.getClosestBlock(next.key)\n    return closest\n  }\n\n  /**\n   * Get the next node in the tree from a node.\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the next ancestor if no sibling is found.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n      const target = PathUtils.increment(p)\n      const node = this.getNode(target)\n      if (node) return node\n    }\n\n    return null\n  }\n\n  /**\n   * Get the next sibling of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextSibling(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const p = PathUtils.increment(path)\n    const sibling = this.getNode(p)\n    return sibling\n  }\n\n  /**\n   * Get the text node after a descendant text node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextText(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const next = this.getNextNode(path)\n    if (!next) return null\n    const text = next.getFirstText()\n    return text\n  }\n\n  /**\n   * Get the offset for a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Number}\n   */\n\n  getOffset(key) {\n    this.assertDescendant(key)\n\n    // Calculate the offset of the nodes before the highest child.\n    const child = this.getFurthestAncestor(key)\n    const offset = this.nodes\n      .takeUntil(n => n == child)\n      .reduce((memo, n) => memo + n.text.length, 0)\n\n    // Recurse if need be.\n    const ret = this.hasChild(key) ? offset : offset + child.getOffset(key)\n    return ret\n  }\n\n  /**\n   * Get the offset from a `range`.\n   *\n   * @param {Range} range\n   * @return {Number}\n   */\n\n  getOffsetAtRange(range) {\n    range = this.resolveRange(range)\n\n    if (range.isUnset) {\n      throw new Error('The range cannot be unset to calculcate its offset.')\n    }\n\n    if (range.isExpanded) {\n      throw new Error('The range must be collapsed to calculcate its offset.')\n    }\n\n    const { start } = range\n    const offset = this.getOffset(start.key) + start.offset\n    return offset\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarks() {\n    const array = this.getMarksAsArray()\n    return OrderedSet(array)\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksAtRange(range) {\n    range = this.resolveRange(range)\n    const { start, end } = range\n\n    if (range.isUnset) {\n      return OrderedSet()\n    }\n\n    if (range.isCollapsed) {\n      // PERF: range is not cachable, use key and offset as proxies for cache\n      return this.getMarksAtPosition(start.key, start.offset)\n    }\n\n    const marks = this.getOrderedMarksBetweenPositions(\n      start.key,\n      start.offset,\n      end.key,\n      end.offset\n    )\n\n    return marks\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   * PERF: arguments use key and offset for utilizing cache\n   *\n   * @param {string} startKey\n   * @param {number} startOffset\n   * @param {string} endKey\n   * @param {number} endOffset\n   * @returns {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksBetweenPositions(startKey, startOffset, endKey, endOffset) {\n    if (startKey === endKey) {\n      const startText = this.getDescendant(startKey)\n      return startText.getMarksBetweenOffsets(startOffset, endOffset)\n    }\n\n    const texts = this.getTextsBetweenPositionsAsArray(startKey, endKey)\n\n    return OrderedSet().withMutations(result => {\n      texts.forEach(text => {\n        if (text.key === startKey) {\n          result.union(\n            text.getMarksBetweenOffsets(startOffset, text.text.length)\n          )\n        } else if (text.key === endKey) {\n          result.union(text.getMarksBetweenOffsets(0, endOffset))\n        } else {\n          result.union(text.getMarks())\n        }\n      })\n    })\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return OrderedSet(array)\n  }\n\n  /**\n   * Get the parent of a descendant node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getParent(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const parentPath = PathUtils.lift(path)\n    const parent = this.getNode(parentPath)\n    return parent\n  }\n\n  /**\n   * Get the block node before a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getPreviousBlock(key) {\n    const child = this.assertDescendant(key)\n    let first\n\n    if (child.object == 'block') {\n      first = child.getFirstText()\n    } else {\n      const block = this.getClosestBlock(key)\n      first = block.getFirstText()\n    }\n\n    const previous = this.getPreviousText(first.key)\n    if (!previous) return null\n\n    const closest = this.getClosestBlock(previous.key)\n    return closest\n  }\n\n  /**\n   * Get the previous node from a node in the tree.\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the previous ancestor if no sibling is found.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n      if (p.last() === 0) continue\n\n      const target = PathUtils.decrement(p)\n      const node = this.getNode(target)\n      if (node) return node\n    }\n\n    return null\n  }\n\n  /**\n   * Get the previous sibling of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousSibling(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    if (path.last() === 0) return null\n    const p = PathUtils.decrement(path)\n    const sibling = this.getNode(p)\n    return sibling\n  }\n\n  /**\n   * Get the text node after a descendant text node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousText(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const previous = this.getPreviousNode(path)\n    if (!previous) return null\n    const text = previous.getLastText()\n    return text\n  }\n\n  /**\n   * Get the indexes of the selection for a `range`, given an extra flag for\n   * whether the node `isSelected`, to determine whether not finding matches\n   * means everything is selected or nothing is.\n   *\n   * @param {Range} range\n   * @param {Boolean} isSelected\n   * @return {Object|Null}\n   */\n\n  getSelectionIndexes(range, isSelected = true) {\n    const { start, end } = range\n\n    // PERF: if we're not selected, we can exit early.\n    if (!isSelected) {\n      return null\n    }\n\n    // if we've been given an invalid selection we can exit early.\n    if (range.isUnset) {\n      return null\n    }\n\n    // PERF: if the start and end keys are the same, just check for the child\n    // that contains that single key.\n    if (start.key == end.key) {\n      const child = this.getFurthestAncestor(start.key)\n      const index = child ? this.nodes.indexOf(child) : null\n      return { start: index, end: index + 1 }\n    }\n\n    // Otherwise, check all of the children...\n    let startIndex = null\n    let endIndex = null\n\n    this.nodes.forEach((child, i) => {\n      if (child.object == 'text') {\n        if (startIndex == null && child.key == start.key) startIndex = i\n        if (endIndex == null && child.key == end.key) endIndex = i + 1\n      } else {\n        if (startIndex == null && child.hasDescendant(start.key)) startIndex = i\n        if (endIndex == null && child.hasDescendant(end.key)) endIndex = i + 1\n      }\n\n      // PERF: exit early if both start and end have been found.\n      return startIndex == null || endIndex == null\n    })\n\n    if (isSelected && startIndex == null) startIndex = 0\n    if (isSelected && endIndex == null) endIndex = this.nodes.size\n    return startIndex == null ? null : { start: startIndex, end: endIndex }\n  }\n\n  /**\n   * Get the descendent text node at an `offset`.\n   *\n   * @param {String} offset\n   * @return {Node|Null}\n   */\n\n  getTextAtOffset(offset) {\n    // PERF: Add a few shortcuts for the obvious cases.\n    if (offset === 0) return this.getFirstText()\n    if (offset === this.text.length) return this.getLastText()\n    if (offset < 0 || offset > this.text.length) return null\n\n    let length = 0\n    const text = this.getTexts().find((node, i, nodes) => {\n      length += node.text.length\n      return length > offset\n    })\n\n    return text\n  }\n\n  /**\n   * Get the direction of the node's text.\n   *\n   * @return {String}\n   */\n\n  getTextDirection() {\n    const dir = direction(this.text)\n    return dir === 'neutral' ? null : dir\n  }\n\n  /**\n   * Recursively get all of the child text nodes in order of appearance.\n   *\n   * @return {List<Node>}\n   */\n\n  getTexts() {\n    const array = this.getTextsAsArray()\n    return List(array)\n  }\n\n  /**\n   * Recursively get all the leaf text nodes in order of appearance, as array.\n   *\n   * @return {List<Node>}\n   */\n\n  getTextsAsArray() {\n    let array = []\n\n    this.nodes.forEach(node => {\n      if (node.object == 'text') {\n        array.push(node)\n      } else {\n        array = array.concat(node.getTextsAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get all of the text nodes in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getTextsAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return List()\n    const { start, end } = range\n    const list = List(this.getTextsBetweenPositionsAsArray(start.key, end.key))\n\n    return list\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getTextsAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n    const { start, end } = range\n    const texts = this.getTextsBetweenPositionsAsArray(start.key, end.key)\n    return texts\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   * PERF: use key in arguments for cache\n   *\n   * @param {string} startKey\n   * @param {string} endKey\n   * @returns {Array}\n   */\n\n  getTextsBetweenPositionsAsArray(startKey, endKey) {\n    const startText = this.getDescendant(startKey)\n\n    // PERF: the most common case is when the range is in a single text node,\n    // where we can avoid a lot of iterating of the tree.\n    if (startKey == endKey) return [startText]\n\n    const endText = this.getDescendant(endKey)\n    const texts = this.getTextsAsArray()\n    const start = texts.indexOf(startText)\n    const end = texts.indexOf(endText, start)\n    const ret = texts.slice(start, end + 1)\n    return ret\n  }\n\n  /**\n   * Check if the node has block children.\n   *\n   * @return {Boolean}\n   */\n\n  hasBlockChildren() {\n    return !!(this.nodes && this.nodes.find(n => n.object === 'block'))\n  }\n\n  /**\n   * Check if a child node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasChild(path) {\n    const child = this.getChild(path)\n    return !!child\n  }\n\n  /**\n   * Check if a node has inline children.\n   *\n   * @return {Boolean}\n   */\n\n  hasInlineChildren() {\n    return !!(\n      this.nodes &&\n      this.nodes.find(n => n.object === 'inline' || n.object === 'text')\n    )\n  }\n\n  /**\n   * Recursively check if a child node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasDescendant(path) {\n    const descendant = this.getDescendant(path)\n    return !!descendant\n  }\n\n  /**\n   * Check if a node has a void parent.\n   *\n   * @param {List|String} path\n   * @param {Schema} schema\n   * @return {Boolean}\n   */\n\n  hasVoidParent(path, schema) {\n    const closest = this.getClosestVoid(path, schema)\n    return !!closest\n  }\n\n  /**\n   * Insert a `node`.\n   *\n   * @param {List|String} path\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  insertNode(path, node) {\n    path = this.resolvePath(path)\n    const index = path.last()\n    const parentPath = PathUtils.lift(path)\n    let parent = this.assertNode(parentPath)\n    const nodes = parent.nodes.splice(index, 0, node)\n    parent = parent.set('nodes', nodes)\n    const ret = this.replaceNode(parentPath, parent)\n    return ret\n  }\n\n  /**\n   * Insert `text` at `offset` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {String} text\n   * @param {Set} marks\n   * @return {Node}\n   */\n\n  insertText(path, offset, text, marks) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.insertText(offset, text, marks)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Check whether the node is a leaf block.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafBlock() {\n    const { object, nodes } = this\n    const first = nodes.first()\n    return object === 'block' && first.object !== 'block'\n  }\n\n  /**\n   * Check whether the node is a leaf inline.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafInline() {\n    const { object, nodes } = this\n    const first = nodes.first()\n    return object === 'inline' && first.object !== 'inline'\n  }\n\n  /**\n   * Map all child nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapChildren(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, i) => {\n      const ret = iterator(node, i, this.nodes)\n      if (ret !== node) nodes = nodes.set(ret.key, ret)\n    })\n\n    const ret = this.set('nodes', nodes)\n    return ret\n  }\n\n  /**\n   * Map all descendant nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapDescendants(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, index) => {\n      let ret = node\n      if (ret.object !== 'text') ret = ret.mapDescendants(iterator)\n      ret = iterator(ret, index, this.nodes)\n      if (ret === node) return\n\n      nodes = nodes.set(index, ret)\n    })\n\n    const ret = this.set('nodes', nodes)\n    return ret\n  }\n\n  /**\n   * Merge a node backwards its previous sibling.\n   *\n   * @param {List|Key} path\n   * @return {Node}\n   */\n\n  mergeNode(path) {\n    const b = this.assertNode(path)\n    path = this.resolvePath(path)\n\n    if (path.last() === 0) {\n      throw new Error(\n        `Unable to merge node because it has no previous sibling: ${b}`\n      )\n    }\n\n    const withPath = PathUtils.decrement(path)\n    const a = this.assertNode(withPath)\n\n    if (a.object !== b.object) {\n      throw new Error(\n        `Unable to merge two different kinds of nodes: ${a} and ${b}`\n      )\n    }\n\n    const newNode =\n      a.object === 'text'\n        ? a.mergeText(b)\n        : a.set('nodes', a.nodes.concat(b.nodes))\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.removeNode(withPath)\n    ret = ret.insertNode(withPath, newNode)\n    return ret\n  }\n\n  /**\n   * Move a node by `path` to `newPath`.\n   *\n   * A `newIndex` can be provided when move nodes by `key`, to account for not\n   * being able to have a key for a location in the tree that doesn't exist yet.\n   *\n   * @param {List|Key} path\n   * @param {List|Key} newPath\n   * @param {Number} newIndex\n   * @return {Node}\n   */\n\n  moveNode(path, newPath, newIndex = 0) {\n    const node = this.assertNode(path)\n    path = this.resolvePath(path)\n    newPath = this.resolvePath(newPath, newIndex)\n\n    const newParentPath = PathUtils.lift(newPath)\n    this.assertNode(newParentPath)\n\n    const [p, np] = PathUtils.crop(path, newPath)\n    const position = PathUtils.compare(p, np)\n\n    // If the old path ends above and before a node in the new path, then\n    // removing it will alter the target, so we need to adjust the new path.\n    if (path.size < newPath.size && position === -1) {\n      newPath = PathUtils.decrement(newPath, 1, p.size - 1)\n    }\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.insertNode(newPath, node)\n    return ret\n  }\n\n  /**\n   * Remove mark from text at `offset` and `length` in node.\n   *\n   * @param {List} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Node}\n   */\n\n  removeMark(path, offset, length, mark) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.removeMark(offset, length, mark)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Remove a node.\n   *\n   * @param {List|String} path\n   * @return {Node}\n   */\n\n  removeNode(path) {\n    this.assertDescendant(path)\n    path = this.resolvePath(path)\n    const deep = path.flatMap(x => ['nodes', x])\n    const ret = this.deleteIn(deep)\n    return ret\n  }\n\n  /**\n   * Remove `text` at `offset` in node.\n   *\n   * @param {List|Key} path\n   * @param {Number} offset\n   * @param {String} text\n   * @return {Node}\n   */\n\n  removeText(path, offset, text) {\n    let node = this.assertDescendant(path)\n    node = node.removeText(offset, text.length)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Replace a `node` in the tree.\n   *\n   * @param {List|Key} path\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  replaceNode(path, node) {\n    path = this.resolvePath(path)\n\n    if (!path) {\n      throw new Error(\n        `Unable to replace a node because it could not be found in the first place: ${path}`\n      )\n    }\n\n    if (!path.size) return node\n    this.assertNode(path)\n    const deep = path.flatMap(x => ['nodes', x])\n    const ret = this.setIn(deep, node)\n    return ret\n  }\n\n  /**\n   * Resolve a `decoration`, relative to the node, ensuring that the keys and\n   * offsets in the decoration exist and that they are synced with the paths.\n   *\n   * @param {Decoration|Object} decoration\n   * @return {Decoration}\n   */\n\n  resolveDecoration(decoration) {\n    decoration = Decoration.create(decoration)\n    decoration = decoration.normalize(this)\n    return decoration\n  }\n\n  /**\n   * Resolve a `point`, relative to the node, ensuring that the keys and\n   * offsets in the point exist and that they are synced with the paths.\n   *\n   * @param {Point|Object} point\n   * @return {Point}\n   */\n\n  resolvePoint(point) {\n    point = Point.create(point)\n    point = point.normalize(this)\n    return point\n  }\n\n  /**\n   * Resolve a `range`, relative to the node, ensuring that the keys and\n   * offsets in the range exist and that they are synced with the paths.\n   *\n   * @param {Range|Object} range\n   * @return {Range}\n   */\n\n  resolveRange(range) {\n    range = Range.create(range)\n    range = range.normalize(this)\n    return range\n  }\n\n  /**\n   * Resolve a `selection`, relative to the node, ensuring that the keys and\n   * offsets in the selection exist and that they are synced with the paths.\n   *\n   * @param {Selection|Object} selection\n   * @return {Selection}\n   */\n\n  resolveSelection(selection) {\n    selection = Selection.create(selection)\n    selection = selection.normalize(this)\n    return selection\n  }\n\n  /**\n   * Set `properties` on a node.\n   *\n   * @param {List|String} path\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  setNode(path, properties) {\n    let node = this.assertNode(path)\n    node = node.merge(properties)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Set `properties` on `mark` on text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  setMark(path, offset, length, mark, properties) {\n    let node = this.assertNode(path)\n    node = node.updateMark(offset, length, mark, properties)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Split a node by `path` at `position` with optional `properties` to apply\n   * to the newly split node.\n   *\n   * @param {List|String} path\n   * @param {Number} position\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  splitNode(path, position, properties) {\n    const child = this.assertNode(path)\n    path = this.resolvePath(path)\n    let a\n    let b\n\n    if (child.object === 'text') {\n      ;[a, b] = child.splitText(position)\n    } else {\n      const befores = child.nodes.take(position)\n      const afters = child.nodes.skip(position)\n      a = child.set('nodes', befores)\n      b = child.set('nodes', afters).regenerateKey()\n    }\n\n    if (properties && child.object !== 'text') {\n      b = b.merge(properties)\n    }\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.insertNode(path, b)\n    ret = ret.insertNode(path, a)\n    return ret\n  }\n}\n\n/**\n * Mix in assertion variants.\n */\n\nconst ASSERTS = ['Child', 'Depth', 'Descendant', 'Node', 'Parent', 'Path']\n\nfor (const method of ASSERTS) {\n  ElementInterface.prototype[`assert${method}`] = function(path, ...args) {\n    const ret = this[`get${method}`](path, ...args)\n\n    if (ret == null) {\n      throw new Error(\n        `\\`Node.assert${method}\\` could not find node with path or key: ${path}`\n      )\n    }\n\n    return ret\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(ElementInterface.prototype, [\n  'getBlocksAsArray',\n  'getBlocksAtRangeAsArray',\n  'getBlocksByTypeAsArray',\n  'getDecorations',\n  'getFragmentAtRange',\n  'getInlinesAsArray',\n  'getInlinesAtRangeAsArray',\n  'getInlinesByTypeAsArray',\n  'getMarksAsArray',\n  'getMarksAtPosition',\n  'getOrderedMarksBetweenPositions',\n  'getInsertMarksAtRange',\n  'getMarksByTypeAsArray',\n  'getNextBlock',\n  'getOffset',\n  'getOffsetAtRange',\n  'getPreviousBlock',\n  'getTextAtOffset',\n  'getTextDirection',\n  'getTextsAsArray',\n  'getTextsBetweenPositionsAsArray',\n])\n\n/**\n * Mix in the element interface.\n */\n\nmixin(ElementInterface, [Block, Document, Inline])\n","import warning from 'slate-dev-warning'\nimport { List } from 'immutable'\n\nimport mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Document from '../models/document'\nimport Inline from '../models/inline'\nimport KeyUtils from '../utils/key-utils'\nimport memoize from '../utils/memoize'\nimport PathUtils from '../utils/path-utils'\nimport Text from '../models/text'\n\n/**\n * The interface that `Document`, `Block` and `Inline` all implement, to make\n * working with the recursive node tree easier.\n *\n * @type {Class}\n */\n\nclass NodeInterface {\n  /**\n   * Get the concatenated text of the node.\n   *\n   * @return {String}\n   */\n\n  get text() {\n    return this.getText()\n  }\n\n  /**\n   * Check whether the node is a leaf inline.\n   *\n   * @return {Boolean}\n   */\n\n  getFirstInvalidNode(schema) {\n    if (this.object === 'text') {\n      const invalid = this.validate(schema) ? this : null\n      return invalid\n    }\n\n    let invalid = null\n\n    this.nodes.find(n => {\n      invalid = n.validate(schema) ? n : n.getFirstInvalidNode(schema)\n      return invalid\n    })\n\n    return invalid\n  }\n\n  /**\n   * Get the first text node of a node, or the node itself.\n   *\n   * @return {Node|Null}\n   */\n\n  getFirstText() {\n    if (this.object === 'text') {\n      return this\n    }\n\n    let descendant = null\n\n    const found = this.nodes.find(node => {\n      if (node.object === 'text') return true\n      descendant = node.getFirstText()\n      return !!descendant\n    })\n\n    return descendant || found\n  }\n\n  /**\n   * Get an object mapping all the keys in the node to their paths.\n   *\n   * @return {Object}\n   */\n\n  getKeysToPathsTable() {\n    const ret = {\n      [this.key]: [],\n    }\n\n    if (this.nodes) {\n      this.nodes.forEach((node, i) => {\n        const nested = node.getKeysToPathsTable()\n\n        for (const key in nested) {\n          const path = nested[key]\n\n          warning(\n            !(key in ret),\n            `A node with a duplicate key of \"${key}\" was found! Duplicate keys are not allowed, you should use \\`node.regenerateKey\\` before inserting if you are reusing an existing node.`\n          )\n\n          ret[key] = [i, ...path]\n        }\n      })\n    }\n\n    return ret\n  }\n\n  /**\n   * Get the last text node of a node, or the node itself.\n   *\n   * @return {Node|Null}\n   */\n\n  getLastText() {\n    if (this.object === 'text') {\n      return this\n    }\n\n    let descendant = null\n\n    const found = this.nodes.findLast(node => {\n      if (node.object == 'text') return true\n      descendant = node.getLastText()\n      return descendant\n    })\n\n    return descendant || found\n  }\n\n  /**\n   * Get a node in the tree, or the node itself.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (this.object === 'text' && path.size) return null\n    const node = path.size ? this.getDescendant(path) : this\n    return node\n  }\n\n  /**\n   * Find the path to a node.\n   *\n   * @param {String|List} key\n   * @return {List}\n   */\n\n  getPath(key) {\n    // Handle the case of passing in a path directly, to match other methods.\n    if (List.isList(key)) return key\n\n    const dict = this.getKeysToPathsTable()\n    const path = dict[key]\n    return path ? List(path) : null\n  }\n\n  /**\n   * Get the concatenated text string of a node.\n   *\n   * @return {String}\n   */\n\n  getText() {\n    const children = this.object === 'text' ? this.leaves : this.nodes\n    const text = children.reduce((memo, c) => memo + c.text, '')\n    return text\n  }\n\n  /**\n   * Check if a node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasNode(path) {\n    const node = this.getNode(path)\n    return !!node\n  }\n\n  /**\n   * Normalize the text node with a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Function|Void}\n   */\n\n  normalize(schema) {\n    const normalizer = schema.normalizeNode(this)\n    return normalizer\n  }\n\n  /**\n   * Regenerate the node's key.\n   *\n   * @return {Node}\n   */\n\n  regenerateKey() {\n    const key = KeyUtils.create()\n    const node = this.set('key', key)\n    return node\n  }\n\n  /**\n   * Resolve a path from a path list or key string.\n   *\n   * An `index` can be provided, in which case paths created from a key string\n   * will have the index pushed onto them. This is helpful in cases where you\n   * want to accept either a `path` or a `key, index` combination for targeting\n   * a location in the tree that doesn't exist yet, like when inserting.\n   *\n   * @param {List|String} value\n   * @param {Number} index\n   * @return {List}\n   */\n\n  resolvePath(path, index) {\n    if (typeof path === 'string') {\n      path = this.getPath(path)\n\n      if (index != null) {\n        path = path.concat(index)\n      }\n    } else {\n      path = PathUtils.create(path)\n    }\n\n    return path\n  }\n\n  /**\n   * Validate the node against a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Error|Void}\n   */\n\n  validate(schema) {\n    const error = schema.validateNode(this)\n    return error\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(NodeInterface.prototype, [\n  'getFirstInvalidNode',\n  'getFirstText',\n  'getKeysToPathsTable',\n  'getLastText',\n  'getText',\n  'normalize',\n  'validate',\n])\n\n/**\n * Mix in the node interface.\n */\n\nmixin(NodeInterface, [Block, Document, Inline, Text])\n","import mixin from '../utils/mixin'\nimport Decoration from '../models/decoration'\nimport PathUtils from '../utils/path-utils'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\n\n/**\n * The interface that `Decoration`, `Range` and `Selection` all implement, to make\n * working anchor and focus points easier.\n *\n * @type {Class}\n */\n\nclass RangeInterface {\n  /**\n   * Check whether the range is collapsed.\n   *\n   * @return {Boolean}\n   */\n\n  get isCollapsed() {\n    return (\n      this.anchor === this.focus ||\n      (this.anchor.key === this.focus.key &&\n        this.anchor.offset === this.focus.offset)\n    )\n  }\n\n  /**\n   * Check whether the range is expanded.\n   *\n   * @return {Boolean}\n   */\n\n  get isExpanded() {\n    return !this.isCollapsed\n  }\n\n  /**\n   * Check whether the range is backward.\n   *\n   * @return {Boolean}\n   */\n\n  get isBackward() {\n    const { isUnset, anchor, focus } = this\n\n    if (isUnset) {\n      return null\n    }\n\n    if (anchor.key === focus.key) {\n      return anchor.offset > focus.offset\n    }\n\n    const isBackward = PathUtils.isBefore(focus.path, anchor.path)\n    return isBackward\n  }\n\n  /**\n   * Check whether the range is forward.\n   *\n   * @return {Boolean}\n   */\n\n  get isForward() {\n    const { isBackward } = this\n    const isForward = isBackward == null ? null : !isBackward\n    return isForward\n  }\n\n  /**\n   * Check whether the range isn't set.\n   *\n   * @return {Boolean}\n   */\n\n  get isUnset() {\n    const { anchor, focus } = this\n    const isUnset = anchor.isUnset || focus.isUnset\n    return isUnset\n  }\n\n  /**\n   * Check whether the range is set.\n   *\n   * @return {Boolean}\n   */\n\n  get isSet() {\n    return !this.isUnset\n  }\n\n  /**\n   * Get the start point.\n   *\n   * @return {String}\n   */\n\n  get start() {\n    return this.isBackward ? this.focus : this.anchor\n  }\n\n  /**\n   * Get the end point.\n   *\n   * @return {String}\n   */\n\n  get end() {\n    return this.isBackward ? this.anchor : this.focus\n  }\n\n  /**\n   * Flip the range.\n   *\n   * @return {Range}\n   */\n\n  flip() {\n    const range = this.setPoints([this.focus, this.anchor])\n    return range\n  }\n\n  /**\n   * Move the anchor and focus offsets forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveForward(n) {\n    return this.updatePoints(point => point.moveForward(n))\n  }\n\n  /**\n   * Move the anchor and focus offsets backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveBackward(n) {\n    return this.updatePoints(point => point.moveBackward(n))\n  }\n\n  /**\n   * Move the anchor offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveAnchorBackward(n) {\n    const range = this.setAnchor(this.anchor.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the anchor offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveAnchorForward(n) {\n    const range = this.setAnchor(this.anchor.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveAnchorTo(path, offset) {\n    const range = this.setAnchor(this.anchor.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToStartOfNode(node) {\n    const range = this.setAnchor(this.anchor.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToEndOfNode(node) {\n    const range = this.setAnchor(this.anchor.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the end offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveEndBackward(n) {\n    const range = this.setEnd(this.end.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the end offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveEndForward(n) {\n    const range = this.setEnd(this.end.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's end point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveEndTo(path, offset) {\n    const range = this.setEnd(this.end.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's end point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveEndToStartOfNode(node) {\n    const range = this.setEnd(this.end.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's end point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveEndToEndOfNode(node) {\n    const range = this.setEnd(this.end.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the focus offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveFocusBackward(n) {\n    const range = this.setFocus(this.focus.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the focus offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveFocusForward(n) {\n    const range = this.setFocus(this.focus.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveFocusTo(path, offset) {\n    const range = this.setFocus(this.focus.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToStartOfNode(node) {\n    const range = this.setFocus(this.focus.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToEndOfNode(node) {\n    const range = this.setFocus(this.focus.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the start offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveStartBackward(n) {\n    const range = this.setStart(this.start.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the start offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveStartForward(n) {\n    const range = this.setStart(this.start.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's start point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveStartTo(path, offset) {\n    const range = this.setStart(this.start.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's start point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveStartToStartOfNode(node) {\n    const range = this.setStart(this.start.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's start point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveStartToEndOfNode(node) {\n    const range = this.setStart(this.start.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move range's points to a new `path` and `offset`.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveTo(path, offset) {\n    return this.updatePoints(point => point.moveTo(path, offset))\n  }\n\n  /**\n   * Move the focus point to the anchor point.\n   *\n   * @return {Range}\n   */\n\n  moveToAnchor() {\n    const range = this.setFocus(this.anchor)\n    return range\n  }\n\n  /**\n   * Move the start point to the end point.\n   *\n   * @return {Range}\n   */\n\n  moveToEnd() {\n    const range = this.setStart(this.end)\n    return range\n  }\n\n  /**\n   * Move the range's points to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveToEndOfNode(node) {\n    return this.updatePoints(point => point.moveToEndOfNode(node))\n  }\n\n  /**\n   * Move the anchor point to the focus point.\n   *\n   * @return {Range}\n   */\n\n  moveToFocus() {\n    const range = this.setAnchor(this.focus)\n    return range\n  }\n\n  /**\n   * Move to the entire range of `start` and `end` nodes.\n   *\n   * @param {Node} start\n   * @param {Node} end (optional)\n   * @return {Range}\n   */\n\n  moveToRangeOfNode(start, end = start) {\n    const range = this.setPoints([\n      this.anchor.moveToStartOfNode(start),\n      this.focus.moveToEndOfNode(end),\n    ])\n\n    return range\n  }\n\n  /**\n   * Move the end point to the start point.\n   *\n   * @return {Range}\n   */\n\n  moveToStart() {\n    const range = this.setEnd(this.start)\n    return range\n  }\n\n  /**\n   * Move the range's points to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveToStartOfNode(node) {\n    return this.updatePoints(point => point.moveToStartOfNode(node))\n  }\n\n  /**\n   * Normalize the range, relative to a `node`, ensuring that the anchor\n   * and focus nodes of the range always refer to leaf text nodes.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  normalize(node) {\n    return this.updatePoints(point => point.normalize(node))\n  }\n\n  /**\n   * Set the anchor point to a new `anchor`.\n   *\n   * @param {Point} anchor\n   * @return {Range}\n   */\n\n  setAnchor(anchor) {\n    const range = this.set('anchor', anchor)\n    return range\n  }\n\n  /**\n   * Set the end point to a new `point`.\n   *\n   * @param {Point} point\n   * @return {Range}\n   */\n\n  setEnd(point) {\n    const range = this.isBackward ? this.setAnchor(point) : this.setFocus(point)\n    return range\n  }\n\n  /**\n   * Set the focus point to a new `focus`.\n   *\n   * @param {Point} focus\n   * @return {Range}\n   */\n\n  setFocus(focus) {\n    const range = this.set('focus', focus)\n    return range\n  }\n\n  /**\n   * Set the anchor and focus points to new `values`.\n   *\n   * @param {Array<Point>} values\n   * @return {Range}\n   */\n\n  setPoints(values) {\n    const [anchor, focus] = values\n    const range = this.set('anchor', anchor).set('focus', focus)\n    return range\n  }\n\n  /**\n   * Set the anchor and focus points with `updater` callback\n   *\n   * @param {Function} updater\n   * @return {Range}\n   */\n\n  updatePoints(updater) {\n    let { anchor, focus } = this\n    anchor = updater(anchor)\n    focus = updater(focus)\n    return this.merge({ anchor, focus })\n  }\n\n  /**\n   * Set the start point to a new `point`.\n   *\n   * @param {Point} point\n   * @return {Range}\n   */\n\n  setStart(point) {\n    const range = this.isBackward ? this.setFocus(point) : this.setAnchor(point)\n    return range\n  }\n\n  /**\n   * Set new `properties` on the range.\n   *\n   * @param {Object|Range} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Range.createProperties(properties)\n    const { anchor, focus, ...props } = properties\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    const range = this.merge(props)\n    return range\n  }\n\n  /**\n   * Return a JSON representation of the range.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n    }\n\n    return object\n  }\n\n  /**\n   * Return a `Range` instance from any range-like instance.\n   *\n   * @return {Range}\n   */\n\n  toRange() {\n    const properties = Range.createProperties(this)\n    const range = Range.create(properties)\n    return range\n  }\n\n  /**\n   * Unset the range.\n   *\n   * @return {Range}\n   */\n\n  unset() {\n    const range = this.updatePoints(p => p.unset())\n    return range\n  }\n}\n\n/**\n * Mix in the range interface.\n *\n * @param {Record}\n */\n\nmixin(RangeInterface, [Decoration, Range, Selection])\n","import apply from './apply'\nimport invert from './invert'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  apply,\n  invert,\n}\n","import './interfaces/common'\nimport './interfaces/element'\nimport './interfaces/node'\nimport './interfaces/range'\n\nimport Block from './models/block'\nimport Change from './models/change'\nimport Changes from './changes'\nimport Data from './models/data'\nimport Decoration from './models/decoration'\nimport Document from './models/document'\nimport History from './models/history'\nimport Inline from './models/inline'\nimport KeyUtils from './utils/key-utils'\nimport Leaf from './models/leaf'\nimport Mark from './models/mark'\nimport Node from './models/node'\nimport Operation from './models/operation'\nimport Operations from './operations'\nimport PathUtils from './utils/path-utils'\nimport Point from './models/point'\nimport Range from './models/range'\nimport Schema from './models/schema'\nimport Selection from './models/selection'\nimport Stack from './models/stack'\nimport Text from './models/text'\nimport TextUtils from './utils/text-utils'\nimport Value from './models/value'\nimport { resetMemoization, useMemoization } from './utils/memoize'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport {\n  Block,\n  Change,\n  Changes,\n  Data,\n  Decoration,\n  Document,\n  History,\n  Inline,\n  KeyUtils,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Operations,\n  PathUtils,\n  Point,\n  Range,\n  resetMemoization,\n  Schema,\n  Selection,\n  Stack,\n  Text,\n  TextUtils,\n  useMemoization,\n  Value,\n}\n\nexport default {\n  Block,\n  Changes,\n  Data,\n  Decoration,\n  Document,\n  History,\n  Inline,\n  KeyUtils,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Operations,\n  PathUtils,\n  Point,\n  Range,\n  resetMemoization,\n  Schema,\n  Selection,\n  Stack,\n  Text,\n  TextUtils,\n  useMemoization,\n  Value,\n}\n"],"names":["mixin","Interface","Classes","Class","Object","getOwnPropertyNames","name","hasOwnProperty","desc","getOwnPropertyDescriptor","defineProperty","prototype","n","generate","create","key","Error","setGenerator","func","resetGenerator","MODEL_TYPES","isType","type","any","Data","attrs","Map","isMap","isPlainObject","fromJSON","object","fromJS","DEFAULTS","undefined","List","Document","options","data","toJSON","nodes","toArray","map","preserveKeys","isDocument","isList","Array","isArray","KeyUtils","document","Node","createList","Record","bind","DOCUMENT","Inline","isInline","elements","list","inline","every","item","INLINE","Mark","isMark","Set","isSet","marks","props","mark","MARK","Leaf","newMark","equals","has","newMarks","withMutations","remove","add","set","union","text","m","isLeaf","leaves","size","invalid","result","findLast","leaf","index","firstLeaf","cache","first","unshift","offset","endOffset","left","right","find","startOffset","length","slice","of","take","skip","push","LEAF","ENABLED","CACHE_KEY","UNDEFINED","UNSET","memoize","properties","property","original","args","apply","__cache_key","__cache","__cache_no_args","takesArguments","cachedValue","keys","getIn","value","v","setIn","get","parent","child","resetMemoization","Number","MAX_SAFE_INTEGER","useMemoization","enabled","Text","l","addMarks","newFirst","splitLeaves","before","bundle","middle","after","concat","x","setLeaves","decorations","forEach","start","dec","end","hasStart","hasEnd","addMark","createLeaves","getActiveMarks","leafEnd","leafStart","intersect","c","getMarks","array","getMarksAsArray","OrderedSet","searchLeafAtOffset","delta","beforeText","afterText","nextLeaves","splice","removeMark","getLeaves","r","merge","updateMark","splitted","one","two","regenerateKey","isText","ranges","node","TEXT","isNode","kind","Block","isBlock","block","BLOCK","Changes","PROXY_TRANSFORMS","method","change","selection","methodAtRange","match","moveToStart","moveToEnd","isExpanded","addMarkAtRange","sel","select","getActiveMarksAtRange","delete","deleteAtRange","insertBlock","insertBlockAtRange","getNode","moveToEndOfNode","insertFragment","fragment","startText","endText","startInline","lastText","getLastText","lastInline","getClosestInline","firstChild","lastChild","last","getTexts","isAppending","isAtStartOfNode","isAtEndOfNode","isInserting","hasBlockChildren","insertFragmentAtRange","newTexts","filter","includes","newText","takeLast","moveToStartOfNode","moveForward","insertInline","insertInlineAtRange","insertText","getInsertMarksAtRange","insertTextAtRange","removeMarkAtRange","replaceMark","oldMark","splitBlock","depth","splitBlockAtRange","toggleMark","exists","activeMarks","wrapText","prefix","suffix","wrapTextAtRange","isCollapsed","moveStartBackward","moveEndBackward","isForward","flip","SURROGATE_START","SURROGATE_END","SPACE","CHAMELEON","PUNCTUATION","isSurrogate","code","isWord","char","remaining","test","next","charAt","getCharLength","rest","charCodeAt","getCharOffset","getCharOffsetBackward","reverse","getCharOffsetForward","getWordOffset","i","started","getWordOffsetBackward","o","getWordOffsetForward","range","texts","getTextsAtRange","withoutNormalizing","addMarkByKey","addMarksAtRange","snapshotSelection","startKey","endKey","schema","isStartVoid","hasVoidParent","isEndVoid","startBlock","getClosestBlock","endBlock","isHanging","getFirstText","prevText","getPreviousText","startVoid","getClosestVoid","nextText","getNextText","removeNodeByKey","endVoid","removeTextByKey","startLength","endLength","ancestor","getCommonAncestor","startChild","getFurthestAncestor","endChild","startParent","getParent","startParentIndex","indexOf","endParentIndex","afters","startChildIndex","endChildIndex","middles","befores","lonely","getFurthestOnlyChildAncestor","moveNodeByKey","mergeNodeByKey","deleteCharBackwardAtRange","getOffset","TextUtils","deleteBackwardAtRange","deleteLineBackwardAtRange","deleteWordBackwardAtRange","focus","voidParent","isVoid","getDescendant","prev","prevBlock","prevVoid","moveAnchorTo","moveFocusBackward","traversed","deleteCharForwardAtRange","deleteForwardAtRange","deleteLineForwardAtRange","deleteWordForwardAtRange","nextBlock","getNextBlock","nextVoid","moveFocusTo","moveFocusForward","extra","insertNodeByKey","atEnd","siblingText","splitRange","splitDescendantsByKey","moveTo","normalize","mapDescendants","isAtStart","blocks","getBlocks","firstBlock","lastBlock","lonelyParent","getFurthest","p","lonelyChild","startIndex","removeNode","newIndex","nextChild","getNextSibling","nextNodes","skipUntil","lastIndex","inlineChild","inlineIndex","assertDescendant","splitNodeByKey","insertTextByKey","removeMarkByKey","setBlocksAtRange","getBlocksAtRange","sets","setNodeByKey","setInlinesAtRange","inlines","getInlinesAtRange","height","h","isBackward","moveAnchorToStartOfNode","setFocus","setPath","anchor","resolveRange","splitInlineAtRange","Infinity","toggleMarkAtRange","some","unwrapBlockAtRange","createProperties","wrappers","getClosest","isSuperset","toOrderedSet","toList","children","b","hasDescendant","firstMatch","lastMatch","takeUntil","firstText","unwrapInlineAtRange","wrapBlockAtRange","clear","firstblock","lastblock","siblings","p1","p2","indexes","reduce","ind","wrapInlineAtRange","inlineParent","wrapInlineByKey","endInline","endIndex","splitText","inlinekey","rng","startInner","startInnerIndex","endInner","startInlines","endInlines","startNode","endNode","startRange","endRange","compare","path","target","pv","tv","crop","a","min","ca","cb","decrement","increment","newValue","newPath","isAbove","t","isAfter","isBefore","isEqual","isSibling","butLast","lift","max","Math","relate","av","bv","addMarkByPath","assertNode","operations","bx","by","ax","ay","applyOperations","insertFragmentByPath","insertNodeByPath","applyOperation","insertTextByPath","getMarksAtIndex","mergeNodeByPath","previous","getPreviousSibling","position","moveNodeByPath","removeMarkByPath","removeAllMarksByPath","state","getTextsAsArray","removeNodeByPath","removeTextByPath","removals","string","replaceNodeByPath","newNode","parentPath","PathUtils","replaceTextByPath","createRange","activeMark","setMarkByPath","setNodeByPath","setTextByPath","splitNodeByPath","splitDescendantsByPath","textPath","textOffset","ancestors","getAncestors","prevIndex","unwrapInlineByPath","moveToRangeOfNode","unwrapBlockByPath","unwrapNodeByPath","parentIndex","grandPath","isFirst","isLast","updatedPath","wrapBlockByPath","wrapInlineByPath","wrapNodeByPath","CHANGES","assertPath","newKey","textKey","redo","history","undos","redos","peek","pop","op","omit","withoutSaving","undo","invert","inverse","Point","isUnset","is","hasNode","point","setOffset","moveBackward","getPath","getTextAtOffset","isPoint","obj","POINT","Decoration","decoration","isDecoration","Range","isRange","JSON","stringify","DECORATION","RANGE","Selection","isSelection","isFocused","createSet","SELECTION","blur","deselect","call","proxy","moveAnchorBackward","pointBackward","moveAnchorForward","pointForward","moveAnchorToEndOfBlock","pointEdgeObject","moveAnchorToEndOfInline","moveAnchorToEndOfDocument","moveAnchorToEndOfNode","moveToAnchor","moveAnchorToEndOfNextBlock","pointEdgeSideObject","moveAnchorToEndOfNextInline","moveAnchorToEndOfNextText","moveAnchorToEndOfPreviousBlock","moveAnchorToEndOfPreviousInline","moveAnchorToEndOfPreviousText","moveAnchorToEndOfText","moveAnchorToStartOfBlock","moveAnchorToStartOfDocument","moveAnchorToStartOfInline","moveAnchorToStartOfNextBlock","moveAnchorToStartOfNextInline","moveAnchorToStartOfNextText","moveAnchorToStartOfPreviousBlock","moveAnchorToStartOfPreviousInline","moveAnchorToStartOfPreviousText","moveAnchorToStartOfText","moveEndForward","moveEndTo","moveEndToEndOfBlock","moveEndToEndOfDocument","moveEndToEndOfNode","moveEndToEndOfInline","moveEndToEndOfNextBlock","moveEndToEndOfNextInline","moveEndToEndOfNextText","moveEndToEndOfPreviousBlock","moveEndToEndOfPreviousInline","moveEndToEndOfPreviousText","moveEndToEndOfText","moveEndToStartOfBlock","moveEndToStartOfDocument","moveEndToStartOfNode","moveEndToStartOfInline","moveEndToStartOfNextBlock","moveEndToStartOfNextInline","moveEndToStartOfNextText","moveEndToStartOfPreviousBlock","moveEndToStartOfPreviousInline","moveEndToStartOfPreviousText","moveEndToStartOfText","moveFocusToEndOfBlock","moveFocusToEndOfDocument","moveFocusToEndOfNode","moveToFocus","moveFocusToEndOfInline","moveFocusToEndOfNextBlock","moveFocusToEndOfNextInline","moveFocusToEndOfNextText","moveFocusToEndOfPreviousBlock","moveFocusToEndOfPreviousInline","moveFocusToEndOfPreviousText","moveFocusToEndOfText","moveFocusToStartOfBlock","moveFocusToStartOfDocument","moveFocusToStartOfNode","moveFocusToStartOfInline","moveFocusToStartOfNextBlock","moveFocusToStartOfNextInline","moveFocusToStartOfNextText","moveFocusToStartOfPreviousBlock","moveFocusToStartOfPreviousInline","moveFocusToStartOfPreviousText","moveFocusToStartOfText","moveStartForward","moveStartTo","moveStartToEndOfBlock","moveStartToEndOfDocument","moveStartToEndOfNode","moveStartToEndOfInline","moveStartToEndOfNextBlock","moveStartToEndOfNextInline","moveStartToEndOfNextText","moveStartToEndOfPreviousBlock","moveStartToEndOfPreviousInline","moveStartToEndOfPreviousText","moveStartToEndOfText","moveStartToStartOfBlock","moveStartToStartOfDocument","moveStartToStartOfNode","moveStartToStartOfInline","moveStartToStartOfNextBlock","moveStartToStartOfNextInline","moveStartToStartOfNextText","moveStartToStartOfPreviousBlock","moveStartToStartOfPreviousInline","moveStartToStartOfPreviousText","moveStartToStartOfText","moveToEndOfBlock","moveToEndOfDocument","moveToEndOfInline","moveToEndOfNextBlock","moveToEndOfNextInline","moveToEndOfNextText","moveToEndOfPreviousBlock","moveToEndOfPreviousInline","moveToEndOfPreviousText","moveToEndOfText","moveToRangeOfDocument","moveToStartOfBlock","moveToStartOfDocument","moveToStartOfInline","moveToStartOfNextBlock","moveToStartOfNextInline","moveToStartOfNextText","moveToStartOfPreviousBlock","moveToStartOfPreviousInline","moveToStartOfPreviousText","moveToStartOfText","snapshot","setProperties","resolveSelection","pick","k","setAnchor","setEnd","setStart","edge","toUpperCase","Edge","side","Side","getDirectionNode","isInBlock","isPreviousInVoid","isNextInVoid","debug","Debug","Stack","History","operation","prevBatch","prevOperation","shouldMerge","batch","isHistory","createOperationsList","HISTORY","plugins","plugin","getPluginsWith","ret","reduceRight","stack","STACK","SlateError","captureStackTrace","constructor","CORE_RULES","error","Schema","rules","testRules","getNodeRules","failure","validateRules","validateNode","rule","isAtomic","isSchema","SCHEMA","defaultNormalize","validateObject","validateType","validateData","validateMarks","validateText","validateFirst","validateLast","validateNodes","fail","fn","valid","def","replace","defs","nextDef","shift","rewind","err","validateParent","validatePrevious","validateNext","Value","Change","insertNode","mapRanges","updatePoints","clearAtomicRanges","newDocument","mergeNode","resolvePath","withPath","moveNode","unset","removeText","rangeOffset","setNode","setMark","d","resolveDecoration","splitNode","iterator","createSelection","decs","createDecoration","from","to","preserveData","preserveDecorations","preserveHistory","preserveSelection","preserveSchema","getPreviousBlock","getNextInline","getPreviousInline","getMarksAtRange","getFragmentAtRange","isValue","VALUE","setValue","AtCurrentRange","AtRange","ByPath","OnHistory","OnSelection","OnValue","Operation","setSelection","invertOperation","inversePath","inverseNewPath","pathLast","newPathLast","e","inverseNode","inverseProperties","inverseMark","inverseSelection","inverseProps","inverseValue","OPERATION_ATTRIBUTES","inverted","json","ATTRIBUTES","toJS","isOperation","OPERATION","tmp","oldValue","save","getDirtyKeys","dirty","normalizeDirtyOperations","getKeysToPathsTable","normalizeKeys","table","hasIn","normalizeMapAndPath","normalizePath","iterations","iterate","found","isChange","oldDocument","nextPath","split","previousPath","merged","newParentPath","oldParent","newParent","CHANGE","CommonInterface","ElementInterface","replaceNode","resolvePoint","matches","forEachDescendant","getMarksAtPosition","toSet","getActiveMarksBetweenOffsets","startMarks","endMarks","current","getBlocksAsArray","isLeafBlock","getBlocksAtRangeAsArray","getBlocksByTypeAsArray","closest","allDecorations","flatten","startAt","deep","flatMap","targetPath","targetPosition","mode","furthest","getInlinesAsArray","isLeafInline","getInlinesAtRangeAsArray","getTextsAtRangeAsArray","getInlinesByTypeAsArray","currentMarks","closestBlock","getOrderedMarksAtRange","getMarksByTypeAsArray","memo","sibling","getNextNode","hasChild","getOrderedMarksBetweenPositions","getMarksBetweenOffsets","getTextsBetweenPositionsAsArray","getPreviousNode","isSelected","dir","direction","getChild","descendant","mergeText","np","deleteIn","ASSERTS","NodeInterface","validate","getFirstInvalidNode","nested","dict","normalizer","normalizeNode","getText","RangeInterface","setPoints","values","updater"],"mappings":"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"}